/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x050710
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_LYD_DIFFTYPE swig_types[1]
#define SWIGTYPE_p_LYD_FORMAT swig_types[2]
#define SWIGTYPE_p_LYS_INFORMAT swig_types[3]
#define SWIGTYPE_p_LYS_OUTFORMAT swig_types[4]
#define SWIGTYPE_p_LY_DATA_TYPE swig_types[5]
#define SWIGTYPE_p_LY_ERR swig_types[6]
#define SWIGTYPE_p_LY_LOG_LEVEL swig_types[7]
#define SWIGTYPE_p_LY_VECODE swig_types[8]
#define SWIGTYPE_p_char swig_types[9]
#define SWIGTYPE_p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void swig_types[10]
#define SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char swig_types[11]
#define SWIGTYPE_p_f_p_q_const__lys_node_p_void__void swig_types[12]
#define SWIGTYPE_p_f_p_void_p_q_const__void_size_t__ssize_t swig_types[13]
#define SWIGTYPE_p_int16_t swig_types[14]
#define SWIGTYPE_p_int32_t swig_types[15]
#define SWIGTYPE_p_int64_t swig_types[16]
#define SWIGTYPE_p_int8_t swig_types[17]
#define SWIGTYPE_p_ly_ctx swig_types[18]
#define SWIGTYPE_p_ly_set swig_types[19]
#define SWIGTYPE_p_ly_set_set swig_types[20]
#define SWIGTYPE_p_lyd_attr swig_types[21]
#define SWIGTYPE_p_lyd_difflist swig_types[22]
#define SWIGTYPE_p_lyd_node swig_types[23]
#define SWIGTYPE_p_lyd_node_anyxml swig_types[24]
#define SWIGTYPE_p_lyd_node_anyxml_value swig_types[25]
#define SWIGTYPE_p_lyd_node_leaf_list swig_types[26]
#define SWIGTYPE_p_lyd_value_u swig_types[27]
#define SWIGTYPE_p_lys_deviate swig_types[28]
#define SWIGTYPE_p_lys_deviate_type swig_types[29]
#define SWIGTYPE_p_lys_deviation swig_types[30]
#define SWIGTYPE_p_lys_feature swig_types[31]
#define SWIGTYPE_p_lys_ident swig_types[32]
#define SWIGTYPE_p_lys_import swig_types[33]
#define SWIGTYPE_p_lys_include swig_types[34]
#define SWIGTYPE_p_lys_module swig_types[35]
#define SWIGTYPE_p_lys_node swig_types[36]
#define SWIGTYPE_p_lys_node_anyxml swig_types[37]
#define SWIGTYPE_p_lys_node_augment swig_types[38]
#define SWIGTYPE_p_lys_node_case swig_types[39]
#define SWIGTYPE_p_lys_node_choice swig_types[40]
#define SWIGTYPE_p_lys_node_container swig_types[41]
#define SWIGTYPE_p_lys_node_grp swig_types[42]
#define SWIGTYPE_p_lys_node_leaf swig_types[43]
#define SWIGTYPE_p_lys_node_leaflist swig_types[44]
#define SWIGTYPE_p_lys_node_list swig_types[45]
#define SWIGTYPE_p_lys_node_notif swig_types[46]
#define SWIGTYPE_p_lys_node_rpc swig_types[47]
#define SWIGTYPE_p_lys_node_rpc_inout swig_types[48]
#define SWIGTYPE_p_lys_node_uses swig_types[49]
#define SWIGTYPE_p_lys_nodetype swig_types[50]
#define SWIGTYPE_p_lys_refine swig_types[51]
#define SWIGTYPE_p_lys_refine_mod swig_types[52]
#define SWIGTYPE_p_lys_refine_mod_list swig_types[53]
#define SWIGTYPE_p_lys_restr swig_types[54]
#define SWIGTYPE_p_lys_revision swig_types[55]
#define SWIGTYPE_p_lys_submodule swig_types[56]
#define SWIGTYPE_p_lys_tpdf swig_types[57]
#define SWIGTYPE_p_lys_type swig_types[58]
#define SWIGTYPE_p_lys_type_bit swig_types[59]
#define SWIGTYPE_p_lys_type_enum swig_types[60]
#define SWIGTYPE_p_lys_type_info swig_types[61]
#define SWIGTYPE_p_lys_type_info_binary swig_types[62]
#define SWIGTYPE_p_lys_type_info_bits swig_types[63]
#define SWIGTYPE_p_lys_type_info_dec64 swig_types[64]
#define SWIGTYPE_p_lys_type_info_enums swig_types[65]
#define SWIGTYPE_p_lys_type_info_ident swig_types[66]
#define SWIGTYPE_p_lys_type_info_inst swig_types[67]
#define SWIGTYPE_p_lys_type_info_lref swig_types[68]
#define SWIGTYPE_p_lys_type_info_num swig_types[69]
#define SWIGTYPE_p_lys_type_info_str swig_types[70]
#define SWIGTYPE_p_lys_type_info_union swig_types[71]
#define SWIGTYPE_p_lys_unique swig_types[72]
#define SWIGTYPE_p_lys_when swig_types[73]
#define SWIGTYPE_p_lyxml_attr swig_types[74]
#define SWIGTYPE_p_lyxml_attr_type swig_types[75]
#define SWIGTYPE_p_lyxml_elem swig_types[76]
#define SWIGTYPE_p_lyxml_ns swig_types[77]
#define SWIGTYPE_p_p_char swig_types[78]
#define SWIGTYPE_p_p_lyd_node swig_types[79]
#define SWIGTYPE_p_p_lys_feature swig_types[80]
#define SWIGTYPE_p_p_lys_ident swig_types[81]
#define SWIGTYPE_p_p_lys_node swig_types[82]
#define SWIGTYPE_p_p_lys_node_leaf swig_types[83]
#define SWIGTYPE_p_p_lys_type_bit swig_types[84]
#define SWIGTYPE_p_p_lyxml_elem swig_types[85]
#define SWIGTYPE_p_p_uint8_t swig_types[86]
#define SWIGTYPE_p_p_void swig_types[87]
#define SWIGTYPE_p_uint16_t swig_types[88]
#define SWIGTYPE_p_uint32_t swig_types[89]
#define SWIGTYPE_p_uint64_t swig_types[90]
#define SWIGTYPE_p_uint8_t swig_types[91]
#define SWIGTYPE_p_void swig_types[92]
static swig_type_info *swig_types[94];
static swig_module_info swig_module = {swig_types, 93, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>



#include "libyang.h"
#include "xml.h"
#include "tree_schema.h"
#include "tree_data.h"
#include "dict.h"


void ly_ctx_destroy(struct ly_ctx *ctx) {
        ly_ctx_destroy(ctx, NULL);
}



SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN int
SWIG_AsCharArray(v8::Handle<v8::Value> obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_char (v8::Handle<v8::Value> obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = (char)(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  }
#endif
  return res;
}


#define SWIGV8_INIT libyang_javascript_initialize


SWIGV8_ClientData _exports_ly_set_set_clientData;
SWIGV8_ClientData _exports_ly_set_clientData;
SWIGV8_ClientData _exports_lyxml_ns_clientData;
SWIGV8_ClientData _exports_lyxml_attr_clientData;
SWIGV8_ClientData _exports_lyxml_elem_clientData;
SWIGV8_ClientData _exports_lys_module_clientData;
SWIGV8_ClientData _exports_lys_submodule_clientData;
SWIGV8_ClientData _exports_lys_type_info_binary_clientData;
SWIGV8_ClientData _exports_lys_type_bit_clientData;
SWIGV8_ClientData _exports_lys_type_info_bits_clientData;
SWIGV8_ClientData _exports_lys_type_info_dec64_clientData;
SWIGV8_ClientData _exports_lys_type_enum_clientData;
SWIGV8_ClientData _exports_lys_type_info_enums_clientData;
SWIGV8_ClientData _exports_lys_type_info_ident_clientData;
SWIGV8_ClientData _exports_lys_type_info_inst_clientData;
SWIGV8_ClientData _exports_lys_type_info_num_clientData;
SWIGV8_ClientData _exports_lys_type_info_lref_clientData;
SWIGV8_ClientData _exports_lys_type_info_str_clientData;
SWIGV8_ClientData _exports_lys_type_info_union_clientData;
SWIGV8_ClientData _exports_lys_type_info_clientData;
SWIGV8_ClientData _exports_lys_type_clientData;
SWIGV8_ClientData _exports_lys_node_clientData;
SWIGV8_ClientData _exports_lys_node_container_clientData;
SWIGV8_ClientData _exports_lys_node_choice_clientData;
SWIGV8_ClientData _exports_lys_node_leaf_clientData;
SWIGV8_ClientData _exports_lys_node_leaflist_clientData;
SWIGV8_ClientData _exports_lys_node_list_clientData;
SWIGV8_ClientData _exports_lys_node_anyxml_clientData;
SWIGV8_ClientData _exports_lys_node_uses_clientData;
SWIGV8_ClientData _exports_lys_node_grp_clientData;
SWIGV8_ClientData _exports_lys_node_case_clientData;
SWIGV8_ClientData _exports_lys_node_rpc_inout_clientData;
SWIGV8_ClientData _exports_lys_node_notif_clientData;
SWIGV8_ClientData _exports_lys_node_rpc_clientData;
SWIGV8_ClientData _exports_lys_node_augment_clientData;
SWIGV8_ClientData _exports_lys_refine_mod_list_clientData;
SWIGV8_ClientData _exports_lys_refine_mod_clientData;
SWIGV8_ClientData _exports_lys_refine_clientData;
SWIGV8_ClientData _exports_lys_deviate_clientData;
SWIGV8_ClientData _exports_lys_deviation_clientData;
SWIGV8_ClientData _exports_lys_import_clientData;
SWIGV8_ClientData _exports_lys_include_clientData;
SWIGV8_ClientData _exports_lys_revision_clientData;
SWIGV8_ClientData _exports_lys_tpdf_clientData;
SWIGV8_ClientData _exports_lys_unique_clientData;
SWIGV8_ClientData _exports_lys_feature_clientData;
SWIGV8_ClientData _exports_lys_restr_clientData;
SWIGV8_ClientData _exports_lys_when_clientData;
SWIGV8_ClientData _exports_lys_ident_clientData;
SWIGV8_ClientData _exports_lyd_attr_clientData;
SWIGV8_ClientData _exports_lyd_val_clientData;
SWIGV8_ClientData _exports_lyd_node_clientData;
SWIGV8_ClientData _exports_lyd_node_leaf_list_clientData;
SWIGV8_ClientData _exports_lyd_node_anyxml_value_clientData;
SWIGV8_ClientData _exports_lyd_node_anyxml_clientData;
SWIGV8_ClientData _exports_lyd_difflist_clientData;


static SwigV8ReturnValue _wrap_ly_ctx_new(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  ly_ctx *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_new.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_new" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (ly_ctx *)ly_ctx_new((char const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_set_searchdir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_set_searchdir.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_set_searchdir" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_set_searchdir" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ly_ctx_set_searchdir(arg1,(char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_searchdir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_searchdir.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_searchdir" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  result = (char *)ly_ctx_get_searchdir((ly_ctx const *)arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_info.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_info" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  result = (lyd_node *)ly_ctx_info(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_module_iter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_module_iter.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_module_iter" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_module_iter" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = (uint32_t *)(argp2);
  result = (lys_module *)ly_ctx_get_module_iter((ly_ctx const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_module(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_module.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_module" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_module" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_get_module" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (lys_module *)ly_ctx_get_module((ly_ctx const *)arg1,(char const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_module_older(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_module_older.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_module_older" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_module_older" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  result = (lys_module *)ly_ctx_get_module_older((ly_ctx const *)arg1,(lys_module const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_load_module(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_load_module.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_load_module" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_load_module" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_load_module" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (lys_module *)ly_ctx_load_module(arg1,(char const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_set_module_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  ly_module_clb arg2 = (ly_module_clb) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_set_module_clb.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_set_module_clb" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ly_ctx_set_module_clb" "', argument " "2"" of type '" "ly_module_clb""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_set_module_clb" "', argument " "3"" of type '" "void *""'"); 
  }
  ly_ctx_set_module_clb(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_module_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  void **arg2 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ly_module_clb result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_module_clb.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_module_clb" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_module_clb" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = (void **)(argp2);
  result = (ly_module_clb)ly_ctx_get_module_clb((ly_ctx const *)arg1,arg2);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_module_by_ns(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_module_by_ns.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_module_by_ns" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_module_by_ns" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_get_module_by_ns" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (lys_module *)ly_ctx_get_module_by_ns((ly_ctx const *)arg1,(char const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_submodule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  lys_submodule *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_submodule.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_submodule" "', argument " "1"" of type '" "ly_ctx const *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_submodule" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_get_submodule" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ly_ctx_get_submodule" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  res5 = SWIG_AsCharPtrAndSize(args[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ly_ctx_get_submodule" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (lys_submodule *)ly_ctx_get_submodule((ly_ctx const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_submodule, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_submodule2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  lys_submodule *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_submodule2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_submodule2" "', argument " "1"" of type '" "lys_module const *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_submodule2" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (lys_submodule *)ly_ctx_get_submodule2((lys_module const *)arg1,(char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_submodule, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  lys_node *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_node.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_node" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_node" "', argument " "2"" of type '" "lys_node const *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_get_node" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (lys_node *)ly_ctx_get_node(arg1,(lys_node const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_get_node2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  lys_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_ctx_get_node2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_get_node2" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_ctx_get_node2" "', argument " "2"" of type '" "lys_node const *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ly_ctx_get_node2" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ly_ctx_get_node2" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (lys_node *)ly_ctx_get_node2(arg1,(lys_node const *)arg2,(char const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_destroy__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  void (*arg2)(lys_node const *,void *) = (void (*)(lys_node const *,void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_destroy" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__lys_node_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ly_ctx_destroy" "', argument " "2"" of type '" "void (*)(lys_node const *,void *)""'"); 
    }
  }
  ly_ctx_destroy(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_ly_set_set_s_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ly_set_set *arg1 = (ly_set_set *) 0 ;
  lys_node **arg2 = (lys_node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_s_set" "', argument " "1"" of type '" "ly_set_set *""'"); 
  }
  arg1 = (ly_set_set *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_set_set_s_set" "', argument " "2"" of type '" "lys_node **""'"); 
  }
  arg2 = (lys_node **)(argp2);
  if (arg1) (arg1)->s = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ly_set_set_s_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set_set *arg1 = (ly_set_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_s_get" "', argument " "1"" of type '" "ly_set_set *""'"); 
  }
  arg1 = (ly_set_set *)(argp1);
  result = (lys_node **) ((arg1)->s);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_ly_set_set_d_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ly_set_set *arg1 = (ly_set_set *) 0 ;
  lyd_node **arg2 = (lyd_node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_d_set" "', argument " "1"" of type '" "ly_set_set *""'"); 
  }
  arg1 = (ly_set_set *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_set_set_d_set" "', argument " "2"" of type '" "lyd_node **""'"); 
  }
  arg2 = (lyd_node **)(argp2);
  if (arg1) (arg1)->d = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ly_set_set_d_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set_set *arg1 = (ly_set_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_d_get" "', argument " "1"" of type '" "ly_set_set *""'"); 
  }
  arg1 = (ly_set_set *)(argp1);
  result = (lyd_node **) ((arg1)->d);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_ly_set_set_g_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ly_set_set *arg1 = (ly_set_set *) 0 ;
  void **arg2 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_g_set" "', argument " "1"" of type '" "ly_set_set *""'"); 
  }
  arg1 = (ly_set_set *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_set_set_g_set" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = (void **)(argp2);
  if (arg1) (arg1)->g = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ly_set_set_g_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set_set *arg1 = (ly_set_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_g_get" "', argument " "1"" of type '" "ly_set_set *""'"); 
  }
  arg1 = (ly_set_set *)(argp1);
  result = (void **) ((arg1)->g);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_ly_set_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  ly_set_set *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ly_set_set.");
  result = (ly_set_set *)new ly_set_set();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ly_set_set, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ly_set_set(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ly_set_set(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ly_set_set(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_ly_set_set(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          ly_set_set * arg1 = (ly_set_set *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_ly_set_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ly_set *arg1 = (ly_set *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_size_set" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ly_set_size_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ly_set_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_size_get" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  result = (unsigned int) ((arg1)->size);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_ly_set_number_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ly_set *arg1 = (ly_set *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_number_set" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ly_set_number_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->number = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ly_set_number_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_number_get" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  result = (unsigned int) ((arg1)->number);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_ly_set_set_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ly_set *arg1 = (ly_set *) 0 ;
  ly_set_set *arg2 = (ly_set_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_set" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ly_set_set, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_set_set_set" "', argument " "2"" of type '" "ly_set_set *""'"); 
  }
  arg2 = (ly_set_set *)(argp2);
  if (arg1) (arg1)->set = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ly_set_set_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ly_set_set *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_set_get" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  result = (ly_set_set *)& ((arg1)->set);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_set_set, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_ly_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  ly_set *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ly_set.");
  result = (ly_set *)new ly_set();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ly_set, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ly_set(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ly_set(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ly_set(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_ly_set(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          ly_set * arg1 = (ly_set *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_ly_set_new(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_new.");
  
  result = (ly_set *)ly_set_new();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_set, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_set_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_add.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_add" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_set_add" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (int)ly_set_add(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_set_clean(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_clean.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_clean" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  result = (int)ly_set_clean(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_set_rm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_rm.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_rm" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ly_set_rm" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (int)ly_set_rm(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_set_rm_index(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_rm_index.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_rm_index" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ly_set_rm_index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (int)ly_set_rm_index(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_set_free(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_set *arg1 = (ly_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_free.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_set_free" "', argument " "1"" of type '" "ly_set *""'"); 
  }
  arg1 = (ly_set *)(argp1);
  ly_set_free(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYP_WITHSIBLINGS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYP_FORMAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_LLERR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_LLERR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_LLWRN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_LLWRN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_LLVRB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_LLVRB));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_LLDBG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_LLDBG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_ly_verb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  LY_LOG_LEVEL arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_verb.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ly_verb" "', argument " "1"" of type '" "LY_LOG_LEVEL""'");
  } 
  arg1 = (LY_LOG_LEVEL)(val1);
  ly_verb(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_set_log_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void (*arg1)(LY_LOG_LEVEL,char const *,char const *) = (void (*)(LY_LOG_LEVEL,char const *,char const *)) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_set_log_clb.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ly_set_log_clb" "', argument " "1"" of type '" "void (*)(LY_LOG_LEVEL,char const *,char const *)""'"); 
    }
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ly_set_log_clb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ly_set_log_clb(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_get_log_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void (*result)(LY_LOG_LEVEL,char const *,char const *) = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_get_log_clb.");
  
  result = (void (*)(LY_LOG_LEVEL,char const *,char const *))ly_get_log_clb();
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LY_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_SUCCESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_EMEM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_EMEM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_ESYS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_ESYS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_EINVAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_EINVAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_EINT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_EINT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_EVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_EVALID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_SUCCESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XML_MISS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XML_MISS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XML_INVAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XML_INVAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XML_INCHAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XML_INCHAR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_EOF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_EOF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INSTMT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INSTMT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INDATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INDATE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INARG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INARG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_MISSSTMT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_MISSSTMT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_MISSARG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_MISSARG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_TOOMANY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_TOOMANY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_DUPID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_DUPID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_DUPLEAFLIST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_DUPLEAFLIST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_DUPLIST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_DUPLIST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOUNIQ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOUNIQ));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_ENUM_DUPVAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_ENUM_DUPVAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_ENUM_DUPNAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_ENUM_DUPNAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_ENUM_WS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_ENUM_WS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_BITS_DUPVAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_BITS_DUPVAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_BITS_DUPNAME(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_BITS_DUPNAME));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INMOD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INMOD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_KEY_NLEAF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_KEY_NLEAF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_KEY_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_KEY_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_KEY_CONFIG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_KEY_CONFIG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_KEY_MISS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_KEY_MISS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_KEY_DUP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_KEY_DUP));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INREGEX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INREGEX));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INRESOLV(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INRESOLV));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INSTATUS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INSTATUS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_CIRC_LEAFREFS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_CIRC_LEAFREFS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_OBSDATA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_OBSDATA));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NORESOLV(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NORESOLV));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INELEM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INELEM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_MISSELEM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_MISSELEM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INVAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INVAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INVALATTR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INVALATTR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INATTR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INATTR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_MISSATTR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_MISSATTR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOCONSTR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOCONSTR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INCHAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INCHAR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INPRED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INPRED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_MCASEDATA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_MCASEDATA));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOMUST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOMUST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOWHEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOWHEN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INORDER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INORDER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_INWHEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_INWHEN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOMIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOMIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOMAX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOMAX));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOREQINS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOREQINS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOLEAFREF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOLEAFREF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_NOMANDCHOICE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_NOMANDCHOICE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XPATH_INTOK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XPATH_INTOK));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XPATH_EOF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XPATH_EOF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XPATH_INOP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XPATH_INOP));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XPATH_INCTX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XPATH_INCTX));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XPATH_INARGCOUNT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XPATH_INARGCOUNT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_XPATH_INARGTYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_XPATH_INARGTYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_INCHAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_INCHAR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_INMOD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_INMOD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_MISSMOD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_MISSMOD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_INNODE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_INNODE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_INKEY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_INKEY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_MISSKEY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_MISSKEY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_EXISTS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_EXISTS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYVE_PATH_MISSPAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYVE_PATH_MISSPAR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_ly_errno_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  LY_ERR *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_errno_location.");
  
  result = (LY_ERR *)ly_errno_location();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LY_ERR, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_vecode_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  LY_VECODE *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_vecode_location.");
  
  result = (LY_VECODE *)ly_vecode_location();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LY_VECODE, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_errmsg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_errmsg.");
  
  result = (char *)ly_errmsg();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_errpath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_errpath.");
  
  result = (char *)ly_errpath();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_errapptag(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ly_errapptag.");
  
  result = (char *)ly_errapptag();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYXML_ATTR_STD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYXML_ATTR_STD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYXML_ATTR_NS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYXML_ATTR_NS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_ns_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  LYXML_ATTR_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_type_set" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyxml_ns_type_set" "', argument " "2"" of type '" "LYXML_ATTR_TYPE""'");
  } 
  arg2 = (LYXML_ATTR_TYPE)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_ns_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYXML_ATTR_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_type_get" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  result = (LYXML_ATTR_TYPE) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_ns_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  lyxml_ns *arg2 = (lyxml_ns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_next_set" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_ns, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_ns_next_set" "', argument " "2"" of type '" "lyxml_ns *""'"); 
  }
  arg2 = (lyxml_ns *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_ns_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_ns *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_next_get" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  result = (lyxml_ns *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_ns, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_ns_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_parent_set" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_elem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_ns_parent_set" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_ns_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_elem *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_parent_get" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  result = (lyxml_elem *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_ns_prefix_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_prefix_get" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  result = (char *) ((arg1)->prefix);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_ns_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_ns *arg1 = (lyxml_ns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_ns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_ns_value_get" "', argument " "1"" of type '" "lyxml_ns *""'"); 
  }
  arg1 = (lyxml_ns *)(argp1);
  result = (char *) ((arg1)->value);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyxml_ns(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyxml_ns *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyxml_ns.");
  result = (lyxml_ns *)new lyxml_ns();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyxml_ns, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyxml_ns(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyxml_ns(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyxml_ns(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyxml_ns(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyxml_ns * arg1 = (lyxml_ns *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lyxml_attr_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  LYXML_ATTR_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_type_set" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyxml_attr_type_set" "', argument " "2"" of type '" "LYXML_ATTR_TYPE""'");
  } 
  arg2 = (LYXML_ATTR_TYPE)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_attr_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYXML_ATTR_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_type_get" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  result = (LYXML_ATTR_TYPE) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_attr_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  lyxml_attr *arg2 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_next_set" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_attr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_attr_next_set" "', argument " "2"" of type '" "lyxml_attr *""'"); 
  }
  arg2 = (lyxml_attr *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_attr_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_attr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_next_get" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  result = (lyxml_attr *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_attr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_attr_ns_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_ns *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_ns_get" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  result = (lyxml_ns *) ((arg1)->ns);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_ns, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_attr_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_name_get" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_attr_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_attr *arg1 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_attr_value_get" "', argument " "1"" of type '" "lyxml_attr *""'"); 
  }
  arg1 = (lyxml_attr *)(argp1);
  result = (char *) ((arg1)->value);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyxml_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyxml_attr *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyxml_attr.");
  result = (lyxml_attr *)new lyxml_attr();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyxml_attr, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyxml_attr(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyxml_attr(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyxml_attr(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyxml_attr(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyxml_attr * arg1 = (lyxml_attr *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lyxml_elem_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_flags_set" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyxml_elem_flags_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_elem_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_flags_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (char) ((arg1)->flags);
  jsresult = SWIG_From_char((char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYXML_ELEM_MIXED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_elem_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_parent_set" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_elem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_elem_parent_set" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_elem_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_elem *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_parent_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (lyxml_elem *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_elem_attr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  lyxml_attr *arg2 = (lyxml_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_attr_set" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_attr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_elem_attr_set" "', argument " "2"" of type '" "lyxml_attr *""'"); 
  }
  arg2 = (lyxml_attr *)(argp2);
  if (arg1) (arg1)->attr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_elem_attr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_attr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_attr_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (lyxml_attr *) ((arg1)->attr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_attr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_elem_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_child_set" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_elem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_elem_child_set" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_elem_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_elem *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_child_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (lyxml_elem *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_elem_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_next_set" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_elem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_elem_next_set" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_elem_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_elem *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_next_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (lyxml_elem *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyxml_elem_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_prev_set" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_elem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_elem_prev_set" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyxml_elem_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_elem *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_prev_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (lyxml_elem *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_elem_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_name_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_elem_ns_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_ns *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_ns_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (lyxml_ns *) ((arg1)->ns);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_ns, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_elem_content_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_elem_content_get" "', argument " "1"" of type '" "lyxml_elem *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  result = (char *) ((arg1)->content);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyxml_elem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyxml_elem *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyxml_elem.");
  result = (lyxml_elem *)new lyxml_elem();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyxml_elem, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyxml_elem(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyxml_elem(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyxml_elem(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyxml_elem(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyxml_elem * arg1 = (lyxml_elem *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LYXML_PARSE_MULTIROOT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_parse_mem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lyxml_elem *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_parse_mem.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_parse_mem" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_parse_mem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyxml_parse_mem" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (lyxml_elem *)lyxml_parse_mem(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_parse_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lyxml_elem *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_parse_path.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_parse_path" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_parse_path" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyxml_parse_path" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (lyxml_elem *)lyxml_parse_path(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYXML_PRINT_OPEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYXML_PRINT_FORMAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYXML_PRINT_CLOSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYXML_PRINT_ATTRS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYXML_PRINT_SIBLINGS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyxml_print_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FILE *arg1 = (FILE *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_print_file.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_print_file" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = (FILE *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_print_file" "', argument " "2"" of type '" "lyxml_elem const *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyxml_print_file" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)lyxml_print_file(arg1,(lyxml_elem const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_print_fd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_print_fd.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lyxml_print_fd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_print_fd" "', argument " "2"" of type '" "lyxml_elem const *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyxml_print_fd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)lyxml_print_fd(arg1,(lyxml_elem const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_print_mem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_print_mem.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_print_mem" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = (char **)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_print_mem" "', argument " "2"" of type '" "lyxml_elem const *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyxml_print_mem" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)lyxml_print_mem(arg1,(lyxml_elem const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_print_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ssize_t (*arg1)(void *,void const *,size_t) = (ssize_t (*)(void *,void const *,size_t)) 0 ;
  void *arg2 = (void *) 0 ;
  lyxml_elem *arg3 = (lyxml_elem *) 0 ;
  int arg4 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_print_clb.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p_void_p_q_const__void_size_t__ssize_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "lyxml_print_clb" "', argument " "1"" of type '" "ssize_t (*)(void *,void const *,size_t)""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_print_clb" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyxml_print_clb" "', argument " "3"" of type '" "lyxml_elem const *""'"); 
  }
  arg3 = (lyxml_elem *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyxml_print_clb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)lyxml_print_clb(arg1,arg2,(lyxml_elem const *)arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_free(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_free.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_free" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_free" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  lyxml_free(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_free_withsiblings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_free_withsiblings.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_free_withsiblings" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_free_withsiblings" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  lyxml_free_withsiblings(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_unlink(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_unlink.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_unlink" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_unlink" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  lyxml_unlink(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_get_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_get_attr.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_get_attr" "', argument " "1"" of type '" "lyxml_elem const *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_get_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyxml_get_attr" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (char *)lyxml_get_attr((lyxml_elem const *)arg1,(char const *)arg2,(char const *)arg3);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyxml_get_ns(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyxml_elem *arg1 = (lyxml_elem *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  lyxml_ns *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyxml_get_ns.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyxml_get_ns" "', argument " "1"" of type '" "lyxml_elem const *""'"); 
  }
  arg1 = (lyxml_elem *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyxml_get_ns" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (lyxml_ns *)lyxml_get_ns((lyxml_elem const *)arg1,(char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_ns, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LY_REV_SIZE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_IN_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_IN_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_IN_YANG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_IN_YANG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_IN_YIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_IN_YIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_OUT_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_OUT_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_OUT_YANG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_OUT_YANG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_OUT_YIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_OUT_YIN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_OUT_TREE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_OUT_TREE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_OUT_INFO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_OUT_INFO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_YANG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_YIN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CONTAINER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_CONTAINER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CHOICE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_CHOICE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_LEAF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_LEAF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_LEAFLIST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_LEAFLIST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_LIST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_LIST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_ANYXML(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_ANYXML));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CASE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_CASE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_NOTIF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_NOTIF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_RPC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_RPC));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_INPUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_INPUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_OUTPUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_OUTPUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_GROUPING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_GROUPING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_USES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_USES));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_AUGMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYS_AUGMENT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_NO_RPC_NOTIF_NODE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x007F));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_ANY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x3FFF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_ctx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  ly_ctx *arg2 = (ly_ctx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ctx_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ly_ctx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_ctx_set" "', argument " "2"" of type '" "ly_ctx *""'"); 
  }
  arg2 = (ly_ctx *)(argp2);
  if (arg1) (arg1)->ctx = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_ctx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ly_ctx *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ctx_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (ly_ctx *) ((arg1)->ctx);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_ctx, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_name_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_prefix_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_prefix_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->prefix);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_dsc_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ref_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_org_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_org_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->org);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_contact_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_contact_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->contact);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_filepath_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_filepath_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->filepath);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_type_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_type_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_type_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->type = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_type_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->type);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_version_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_version_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_version_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_version_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->version = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_version_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_version_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->version);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_deviated_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_deviated_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_deviated_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_deviated_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->deviated = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_deviated_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_deviated_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->deviated);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_implemented_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_implemented_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_implemented_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_implemented_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->implemented = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_implemented_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_implemented_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->implemented);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_rev_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_rev_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_rev_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_rev_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->rev_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_rev_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_rev_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->rev_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_imp_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_imp_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_imp_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_imp_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->imp_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_imp_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_imp_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->imp_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_inc_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_inc_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_inc_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_inc_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->inc_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_inc_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_inc_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->inc_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_tpdf_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_tpdf_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_ident_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ident_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_ident_size_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_ident_size_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->ident_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_ident_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ident_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->ident_size);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_features_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_features_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_augment_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_augment_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_augment_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_augment_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->augment_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_augment_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_augment_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->augment_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_deviation_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_deviation_size_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_deviation_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_module_deviation_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->deviation_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_deviation_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_deviation_size_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result =  ((arg1)->deviation_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_rev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_revision *arg2 = (lys_revision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_rev_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_revision, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_rev_set" "', argument " "2"" of type '" "lys_revision *""'"); 
  }
  arg2 = (lys_revision *)(argp2);
  if (arg1) (arg1)->rev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_rev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_revision *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_rev_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_revision *) ((arg1)->rev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_revision, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_imp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_import *arg2 = (lys_import *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_imp_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_import, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_imp_set" "', argument " "2"" of type '" "lys_import *""'"); 
  }
  arg2 = (lys_import *)(argp2);
  if (arg1) (arg1)->imp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_imp_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_import *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_imp_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_import *) ((arg1)->imp);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_import, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_inc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_include *arg2 = (lys_include *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_inc_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_include, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_inc_set" "', argument " "2"" of type '" "lys_include *""'"); 
  }
  arg2 = (lys_include *)(argp2);
  if (arg1) (arg1)->inc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_inc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_include *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_inc_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_include *) ((arg1)->inc);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_include, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_tpdf_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_tpdf_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_ident_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_ident *arg2 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ident_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_ident, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_ident_set" "', argument " "2"" of type '" "lys_ident *""'"); 
  }
  arg2 = (lys_ident *)(argp2);
  if (arg1) (arg1)->ident = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_ident_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_ident *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ident_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_ident *) ((arg1)->ident);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_feature *arg2 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_features_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_feature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_features_set" "', argument " "2"" of type '" "lys_feature *""'"); 
  }
  arg2 = (lys_feature *)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_features_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_feature *) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_augment_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_node_augment *arg2 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_augment_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node_augment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_augment_set" "', argument " "2"" of type '" "lys_node_augment *""'"); 
  }
  arg2 = (lys_node_augment *)(argp2);
  if (arg1) (arg1)->augment = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_augment_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node_augment *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_augment_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_node_augment *) ((arg1)->augment);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node_augment, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_deviation_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_deviation *arg2 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_deviation_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_deviation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_deviation_set" "', argument " "2"" of type '" "lys_deviation *""'"); 
  }
  arg2 = (lys_deviation *)(argp2);
  if (arg1) (arg1)->deviation = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_deviation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_deviation *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_deviation_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_deviation *) ((arg1)->deviation);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_deviation, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_module_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_module *arg1 = (lys_module *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_data_set" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_module_data_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_module_data_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_data_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_node *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_module_ns_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_module_ns_get" "', argument " "1"" of type '" "lys_module *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (char *) ((arg1)->ns);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_module(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_module *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_module.");
  result = (lys_module *)new lys_module();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_module, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_module(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_module(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_module(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_module(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_module * arg1 = (lys_module *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_submodule_ctx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  ly_ctx *arg2 = (ly_ctx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ctx_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ly_ctx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_ctx_set" "', argument " "2"" of type '" "ly_ctx *""'"); 
  }
  arg2 = (ly_ctx *)(argp2);
  if (arg1) (arg1)->ctx = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_ctx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ly_ctx *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ctx_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (ly_ctx *) ((arg1)->ctx);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_ctx, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_name_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_prefix_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_prefix_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->prefix);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_dsc_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ref_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_org_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_org_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->org);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_contact_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_contact_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->contact);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_submodule_filepath_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_filepath_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (char *) ((arg1)->filepath);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_type_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_type_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_type_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->type = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_type_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->type);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_padding_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_padding_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_padding_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_padding_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->padding = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_padding_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_padding_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->padding);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_rev_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_rev_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_rev_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_rev_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->rev_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_rev_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_rev_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->rev_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_imp_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_imp_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_imp_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_imp_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->imp_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_imp_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_imp_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->imp_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_inc_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_inc_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_inc_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_inc_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->inc_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_inc_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_inc_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->inc_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_tpdf_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_tpdf_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_ident_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ident_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_ident_size_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_ident_size_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->ident_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_ident_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ident_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->ident_size);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_features_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_features_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_augment_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_augment_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_augment_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_augment_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->augment_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_augment_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_augment_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->augment_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_deviation_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_deviation_size_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_deviation_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_submodule_deviation_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->deviation_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_deviation_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_deviation_size_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result =  ((arg1)->deviation_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_rev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_revision *arg2 = (lys_revision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_rev_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_revision, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_rev_set" "', argument " "2"" of type '" "lys_revision *""'"); 
  }
  arg2 = (lys_revision *)(argp2);
  if (arg1) (arg1)->rev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_rev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_revision *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_rev_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_revision *) ((arg1)->rev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_revision, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_imp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_import *arg2 = (lys_import *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_imp_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_import, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_imp_set" "', argument " "2"" of type '" "lys_import *""'"); 
  }
  arg2 = (lys_import *)(argp2);
  if (arg1) (arg1)->imp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_imp_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_import *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_imp_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_import *) ((arg1)->imp);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_import, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_inc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_include *arg2 = (lys_include *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_inc_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_include, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_inc_set" "', argument " "2"" of type '" "lys_include *""'"); 
  }
  arg2 = (lys_include *)(argp2);
  if (arg1) (arg1)->inc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_inc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_include *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_inc_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_include *) ((arg1)->inc);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_include, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_tpdf_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_tpdf_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_ident_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_ident *arg2 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ident_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_ident, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_ident_set" "', argument " "2"" of type '" "lys_ident *""'"); 
  }
  arg2 = (lys_ident *)(argp2);
  if (arg1) (arg1)->ident = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_ident_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_ident *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_ident_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_ident *) ((arg1)->ident);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_feature *arg2 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_features_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_feature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_features_set" "', argument " "2"" of type '" "lys_feature *""'"); 
  }
  arg2 = (lys_feature *)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_features_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_feature *) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_augment_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_node_augment *arg2 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_augment_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node_augment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_augment_set" "', argument " "2"" of type '" "lys_node_augment *""'"); 
  }
  arg2 = (lys_node_augment *)(argp2);
  if (arg1) (arg1)->augment = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_augment_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node_augment *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_augment_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_node_augment *) ((arg1)->augment);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node_augment, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_deviation_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_deviation *arg2 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_deviation_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_deviation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_deviation_set" "', argument " "2"" of type '" "lys_deviation *""'"); 
  }
  arg2 = (lys_deviation *)(argp2);
  if (arg1) (arg1)->deviation = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_deviation_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_deviation *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_deviation_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_deviation *) ((arg1)->deviation);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_deviation, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_submodule_belongsto_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_belongsto_set" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_submodule_belongsto_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->belongsto = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_submodule_belongsto_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_submodule *arg1 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_submodule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_submodule_belongsto_get" "', argument " "1"" of type '" "lys_submodule *""'"); 
  }
  arg1 = (lys_submodule *)(argp1);
  result = (lys_module *) ((arg1)->belongsto);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_submodule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_submodule *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_submodule.");
  result = (lys_submodule *)new lys_submodule();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_submodule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_submodule(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_submodule(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_submodule(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_submodule(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_submodule * arg1 = (lys_submodule *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LY_TYPE_DER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_DER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_BINARY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_BINARY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_BITS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_BITS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_BOOL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_BOOL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_DEC64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_DEC64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_EMPTY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_EMPTY));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_ENUM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_ENUM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_IDENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_IDENT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_INST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_INST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_LEAFREF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_LEAFREF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_STRING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_STRING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_UNION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_UNION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_INT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_INT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_UINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_UINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_INT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_INT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_UINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_UINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_INT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_INT32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_UINT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_UINT32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_INT64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_INT64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_UINT64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_TYPE_UINT64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_DATA_TYPE_COUNT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_DATA_TYPE_MASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x3f));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_LEAFREF_UNRES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_TYPE_INST_UNRES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_binary_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_binary *arg1 = (lys_type_info_binary *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_binary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_binary_length_set" "', argument " "1"" of type '" "lys_type_info_binary *""'"); 
  }
  arg1 = (lys_type_info_binary *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_binary_length_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_binary_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_binary *arg1 = (lys_type_info_binary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_binary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_binary_length_get" "', argument " "1"" of type '" "lys_type_info_binary *""'"); 
  }
  arg1 = (lys_type_info_binary *)(argp1);
  result = (lys_restr *) ((arg1)->length);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_binary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_binary *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_binary.");
  result = (lys_type_info_binary *)new lys_type_info_binary();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_binary, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_binary(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_binary(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_binary(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_binary(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_binary * arg1 = (lys_type_info_binary *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_type_bit_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_name_get" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_type_bit_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_dsc_get" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_type_bit_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_ref_get" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_bit_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_flags_set" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_bit_flags_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_type_bit_flags_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_bit_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_flags_get" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_bit_pos_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_pos_set" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_bit_pos_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_type_bit_pos_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->pos = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_bit_pos_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_bit *arg1 = (lys_type_bit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_bit_pos_get" "', argument " "1"" of type '" "lys_type_bit *""'"); 
  }
  arg1 = (lys_type_bit *)(argp1);
  result =  ((arg1)->pos);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_bit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_bit *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_bit.");
  result = (lys_type_bit *)new lys_type_bit();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_bit, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_bit(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_bit(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_bit(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_bit(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_bit * arg1 = (lys_type_bit *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_type_info_bits_bit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_bits *arg1 = (lys_type_info_bits *) 0 ;
  lys_type_bit *arg2 = (lys_type_bit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_bits_bit_set" "', argument " "1"" of type '" "lys_type_info_bits *""'"); 
  }
  arg1 = (lys_type_info_bits *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_bit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_bits_bit_set" "', argument " "2"" of type '" "lys_type_bit *""'"); 
  }
  arg2 = (lys_type_bit *)(argp2);
  if (arg1) (arg1)->bit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_bits_bit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_bits *arg1 = (lys_type_info_bits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_bit *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_bits_bit_get" "', argument " "1"" of type '" "lys_type_info_bits *""'"); 
  }
  arg1 = (lys_type_info_bits *)(argp1);
  result = (lys_type_bit *) ((arg1)->bit);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_bit, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_bits_count_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_bits *arg1 = (lys_type_info_bits *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_bits_count_set" "', argument " "1"" of type '" "lys_type_info_bits *""'"); 
  }
  arg1 = (lys_type_info_bits *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_type_info_bits_count_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->count = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_bits_count_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_bits *arg1 = (lys_type_info_bits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_bits_count_get" "', argument " "1"" of type '" "lys_type_info_bits *""'"); 
  }
  arg1 = (lys_type_info_bits *)(argp1);
  result = (int) ((arg1)->count);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_bits(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_bits *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_bits.");
  result = (lys_type_info_bits *)new lys_type_info_bits();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_bits, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_bits(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_bits(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_bits(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_bits(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_bits * arg1 = (lys_type_info_bits *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_bits_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_bits *arg1 = (lys_type_info_bits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bits_set" "', argument " "1"" of type '" "lys_type_info_bits *""'"); 
  }
  arg1 = (lys_type_info_bits *)(argp1);
  bits = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_bits_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_bits *result = 0 ;
  
  result = (lys_type_info_bits *)&bits;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_dec64_range_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_dec64 *arg1 = (lys_type_info_dec64 *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_dec64, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_dec64_range_set" "', argument " "1"" of type '" "lys_type_info_dec64 *""'"); 
  }
  arg1 = (lys_type_info_dec64 *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_dec64_range_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->range = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_dec64_range_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_dec64 *arg1 = (lys_type_info_dec64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_dec64, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_dec64_range_get" "', argument " "1"" of type '" "lys_type_info_dec64 *""'"); 
  }
  arg1 = (lys_type_info_dec64 *)(argp1);
  result = (lys_restr *) ((arg1)->range);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_dec64_dig_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_dec64 *arg1 = (lys_type_info_dec64 *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_dec64, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_dec64_dig_set" "', argument " "1"" of type '" "lys_type_info_dec64 *""'"); 
  }
  arg1 = (lys_type_info_dec64 *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_dec64_dig_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_type_info_dec64_dig_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->dig = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_dec64_dig_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_dec64 *arg1 = (lys_type_info_dec64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_dec64, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_dec64_dig_get" "', argument " "1"" of type '" "lys_type_info_dec64 *""'"); 
  }
  arg1 = (lys_type_info_dec64 *)(argp1);
  result =  ((arg1)->dig);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_dec64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_dec64 *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_dec64.");
  result = (lys_type_info_dec64 *)new lys_type_info_dec64();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_dec64, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_dec64(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_dec64(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_dec64(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_dec64(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_dec64 * arg1 = (lys_type_info_dec64 *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_type_enum_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_enum *arg1 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_enum_name_get" "', argument " "1"" of type '" "lys_type_enum *""'"); 
  }
  arg1 = (lys_type_enum *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_type_enum_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_enum *arg1 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_enum_dsc_get" "', argument " "1"" of type '" "lys_type_enum *""'"); 
  }
  arg1 = (lys_type_enum *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_type_enum_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_enum *arg1 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_enum_ref_get" "', argument " "1"" of type '" "lys_type_enum *""'"); 
  }
  arg1 = (lys_type_enum *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_enum_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_enum *arg1 = (lys_type_enum *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_enum_flags_set" "', argument " "1"" of type '" "lys_type_enum *""'"); 
  }
  arg1 = (lys_type_enum *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_enum_flags_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_type_enum_flags_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_enum_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_enum *arg1 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_enum_flags_get" "', argument " "1"" of type '" "lys_type_enum *""'"); 
  }
  arg1 = (lys_type_enum *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_type_enum_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_enum *arg1 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_enum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_enum_value_get" "', argument " "1"" of type '" "lys_type_enum *""'"); 
  }
  arg1 = (lys_type_enum *)(argp1);
  result =  ((arg1)->value);
  jsresult = SWIG_NewPointerObj((new int32_t((const int32_t&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_enum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_enum *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_enum.");
  result = (lys_type_enum *)new lys_type_enum();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_enum, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_enum(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_enum(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_enum(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_enum(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_enum * arg1 = (lys_type_enum *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_type_info_enums_enm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_enums *arg1 = (lys_type_info_enums *) 0 ;
  lys_type_enum *arg2 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_enums, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_enums_enm_set" "', argument " "1"" of type '" "lys_type_info_enums *""'"); 
  }
  arg1 = (lys_type_info_enums *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_enum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_enums_enm_set" "', argument " "2"" of type '" "lys_type_enum *""'"); 
  }
  arg2 = (lys_type_enum *)(argp2);
  if (arg1) (arg1)->enm = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_enums_enm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_enums *arg1 = (lys_type_info_enums *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_enum *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_enums, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_enums_enm_get" "', argument " "1"" of type '" "lys_type_info_enums *""'"); 
  }
  arg1 = (lys_type_info_enums *)(argp1);
  result = (lys_type_enum *) ((arg1)->enm);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_enum, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_enums_count_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_enums *arg1 = (lys_type_info_enums *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_enums, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_enums_count_set" "', argument " "1"" of type '" "lys_type_info_enums *""'"); 
  }
  arg1 = (lys_type_info_enums *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_type_info_enums_count_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->count = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_enums_count_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_enums *arg1 = (lys_type_info_enums *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_enums, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_enums_count_get" "', argument " "1"" of type '" "lys_type_info_enums *""'"); 
  }
  arg1 = (lys_type_info_enums *)(argp1);
  result = (int) ((arg1)->count);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_enums(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_enums *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_enums.");
  result = (lys_type_info_enums *)new lys_type_info_enums();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_enums, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_enums(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_enums(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_enums(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_enums(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_enums * arg1 = (lys_type_info_enums *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_type_info_ident_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_ident *arg1 = (lys_type_info_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_ident *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_ident_ref_get" "', argument " "1"" of type '" "lys_type_info_ident *""'"); 
  }
  arg1 = (lys_type_info_ident *)(argp1);
  result = (lys_ident *) ((arg1)->ref);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_ident(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_ident *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_ident.");
  result = (lys_type_info_ident *)new lys_type_info_ident();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_ident, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_ident(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_ident(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_ident(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_ident(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_ident * arg1 = (lys_type_info_ident *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_type_info_inst_req_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_inst *arg1 = (lys_type_info_inst *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_inst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_inst_req_set" "', argument " "1"" of type '" "lys_type_info_inst *""'"); 
  }
  arg1 = (lys_type_info_inst *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_inst_req_set" "', argument " "2"" of type '" "int8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_type_info_inst_req_set" "', argument " "2"" of type '" "int8_t""'");
    } else {
      arg2 = *((int8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->req = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_inst_req_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_inst *arg1 = (lys_type_info_inst *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_inst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_inst_req_get" "', argument " "1"" of type '" "lys_type_info_inst *""'"); 
  }
  arg1 = (lys_type_info_inst *)(argp1);
  result =  ((arg1)->req);
  jsresult = SWIG_NewPointerObj((new int8_t((const int8_t&)(result))), SWIGTYPE_p_int8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_inst(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_inst *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_inst.");
  result = (lys_type_info_inst *)new lys_type_info_inst();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_inst, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_inst(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_inst(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_inst(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_inst(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_inst * arg1 = (lys_type_info_inst *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_type_info_num_range_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_num *arg1 = (lys_type_info_num *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_num, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_num_range_set" "', argument " "1"" of type '" "lys_type_info_num *""'"); 
  }
  arg1 = (lys_type_info_num *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_num_range_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->range = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_num_range_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_num *arg1 = (lys_type_info_num *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_num, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_num_range_get" "', argument " "1"" of type '" "lys_type_info_num *""'"); 
  }
  arg1 = (lys_type_info_num *)(argp1);
  result = (lys_restr *) ((arg1)->range);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_num(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_num *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_num.");
  result = (lys_type_info_num *)new lys_type_info_num();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_num, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_num(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_num(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_num(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_num(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_num * arg1 = (lys_type_info_num *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_type_info_lref_path_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_lref *arg1 = (lys_type_info_lref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_lref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_lref_path_get" "', argument " "1"" of type '" "lys_type_info_lref *""'"); 
  }
  arg1 = (lys_type_info_lref *)(argp1);
  result = (char *) ((arg1)->path);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_lref_target_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_lref *arg1 = (lys_type_info_lref *) 0 ;
  lys_node_leaf *arg2 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_lref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_lref_target_set" "', argument " "1"" of type '" "lys_type_info_lref *""'"); 
  }
  arg1 = (lys_type_info_lref *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node_leaf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_lref_target_set" "', argument " "2"" of type '" "lys_node_leaf *""'"); 
  }
  arg2 = (lys_node_leaf *)(argp2);
  if (arg1) (arg1)->target = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_lref_target_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_lref *arg1 = (lys_type_info_lref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node_leaf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_lref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_lref_target_get" "', argument " "1"" of type '" "lys_type_info_lref *""'"); 
  }
  arg1 = (lys_type_info_lref *)(argp1);
  result = (lys_node_leaf *) ((arg1)->target);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_lref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_lref *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_lref.");
  result = (lys_type_info_lref *)new lys_type_info_lref();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_lref, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_lref(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_lref(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_lref(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_lref(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_lref * arg1 = (lys_type_info_lref *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_type_info_str_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_str *arg1 = (lys_type_info_str *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_length_set" "', argument " "1"" of type '" "lys_type_info_str *""'"); 
  }
  arg1 = (lys_type_info_str *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_str_length_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_str_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_str *arg1 = (lys_type_info_str *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_length_get" "', argument " "1"" of type '" "lys_type_info_str *""'"); 
  }
  arg1 = (lys_type_info_str *)(argp1);
  result = (lys_restr *) ((arg1)->length);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_str_patterns_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_str *arg1 = (lys_type_info_str *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_patterns_set" "', argument " "1"" of type '" "lys_type_info_str *""'"); 
  }
  arg1 = (lys_type_info_str *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_str_patterns_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->patterns = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_str_patterns_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_str *arg1 = (lys_type_info_str *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_patterns_get" "', argument " "1"" of type '" "lys_type_info_str *""'"); 
  }
  arg1 = (lys_type_info_str *)(argp1);
  result = (lys_restr *) ((arg1)->patterns);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_str_pat_count_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_str *arg1 = (lys_type_info_str *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_pat_count_set" "', argument " "1"" of type '" "lys_type_info_str *""'"); 
  }
  arg1 = (lys_type_info_str *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_type_info_str_pat_count_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->pat_count = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_str_pat_count_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_str *arg1 = (lys_type_info_str *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_pat_count_get" "', argument " "1"" of type '" "lys_type_info_str *""'"); 
  }
  arg1 = (lys_type_info_str *)(argp1);
  result = (int) ((arg1)->pat_count);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_str(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_str *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_str.");
  result = (lys_type_info_str *)new lys_type_info_str();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_str, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_str(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_str(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_str(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_str(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_str * arg1 = (lys_type_info_str *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_type_info_union_types_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_union *arg1 = (lys_type_info_union *) 0 ;
  lys_type *arg2 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_union_types_set" "', argument " "1"" of type '" "lys_type_info_union *""'"); 
  }
  arg1 = (lys_type_info_union *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_union_types_set" "', argument " "2"" of type '" "lys_type *""'"); 
  }
  arg2 = (lys_type *)(argp2);
  if (arg1) (arg1)->types = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_union_types_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_union *arg1 = (lys_type_info_union *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_union_types_get" "', argument " "1"" of type '" "lys_type_info_union *""'"); 
  }
  arg1 = (lys_type_info_union *)(argp1);
  result = (lys_type *) ((arg1)->types);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_union_count_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info_union *arg1 = (lys_type_info_union *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_union_count_set" "', argument " "1"" of type '" "lys_type_info_union *""'"); 
  }
  arg1 = (lys_type_info_union *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_type_info_union_count_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->count = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_union_count_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info_union *arg1 = (lys_type_info_union *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info_union, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_union_count_get" "', argument " "1"" of type '" "lys_type_info_union *""'"); 
  }
  arg1 = (lys_type_info_union *)(argp1);
  result = (int) ((arg1)->count);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info_union(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info_union *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info_union.");
  result = (lys_type_info_union *)new lys_type_info_union();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info_union, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info_union(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info_union(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info_union(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info_union(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info_union * arg1 = (lys_type_info_union *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_type_info_binary_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_binary *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_binary_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_binary *)& ((arg1)->binary);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_binary, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_bits_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_bits *arg2 = (lys_type_info_bits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_bits_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_bits_set" "', argument " "2"" of type '" "lys_type_info_bits *""'"); 
  }
  arg2 = (lys_type_info_bits *)(argp2);
  if (arg1) (arg1)->bits = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_bits_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_bits *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_bits_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_bits *)& ((arg1)->bits);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_bits, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_dec64_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_dec64 *arg2 = (lys_type_info_dec64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_dec64_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_dec64, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_dec64_set" "', argument " "2"" of type '" "lys_type_info_dec64 *""'"); 
  }
  arg2 = (lys_type_info_dec64 *)(argp2);
  if (arg1) (arg1)->dec64 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_dec64_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_dec64 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_dec64_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_dec64 *)& ((arg1)->dec64);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_dec64, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_enums_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_enums *arg2 = (lys_type_info_enums *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_enums_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_enums, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_enums_set" "', argument " "2"" of type '" "lys_type_info_enums *""'"); 
  }
  arg2 = (lys_type_info_enums *)(argp2);
  if (arg1) (arg1)->enums = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_enums_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_enums *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_enums_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_enums *)& ((arg1)->enums);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_enums, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_ident_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_ident *arg2 = (lys_type_info_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_ident_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_ident, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_ident_set" "', argument " "2"" of type '" "lys_type_info_ident *""'"); 
  }
  arg2 = (lys_type_info_ident *)(argp2);
  if (arg1) (arg1)->ident = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_ident_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_ident *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_ident_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_ident *)& ((arg1)->ident);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_inst_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_inst *arg2 = (lys_type_info_inst *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_inst_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_inst, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_inst_set" "', argument " "2"" of type '" "lys_type_info_inst *""'"); 
  }
  arg2 = (lys_type_info_inst *)(argp2);
  if (arg1) (arg1)->inst = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_inst_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_inst *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_inst_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_inst *)& ((arg1)->inst);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_inst, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_num_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_num *arg2 = (lys_type_info_num *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_num_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_num, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_num_set" "', argument " "2"" of type '" "lys_type_info_num *""'"); 
  }
  arg2 = (lys_type_info_num *)(argp2);
  if (arg1) (arg1)->num = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_num_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_num *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_num_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_num *)& ((arg1)->num);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_num, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_lref_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_lref *arg2 = (lys_type_info_lref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_lref_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_lref, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_lref_set" "', argument " "2"" of type '" "lys_type_info_lref *""'"); 
  }
  arg2 = (lys_type_info_lref *)(argp2);
  if (arg1) (arg1)->lref = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_lref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_lref *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_lref_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_lref *)& ((arg1)->lref);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_lref, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_str_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_str *arg2 = (lys_type_info_str *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_str_set" "', argument " "2"" of type '" "lys_type_info_str *""'"); 
  }
  arg2 = (lys_type_info_str *)(argp2);
  if (arg1) (arg1)->str = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_str_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_str *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_str_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_str *)& ((arg1)->str);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_str, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_uni_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  lys_type_info_union *arg2 = (lys_type_info_union *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_uni_set" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info_union, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_uni_set" "', argument " "2"" of type '" "lys_type_info_union *""'"); 
  }
  arg2 = (lys_type_info_union *)(argp2);
  if (arg1) (arg1)->uni = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_uni_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type_info *arg1 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info_union *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_uni_get" "', argument " "1"" of type '" "lys_type_info *""'"); 
  }
  arg1 = (lys_type_info *)(argp1);
  result = (lys_type_info_union *)& ((arg1)->uni);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info_union, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type_info *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type_info.");
  result = (lys_type_info *)new lys_type_info();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type_info * arg1 = (lys_type_info *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_type_module_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type *arg1 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_module_name_get" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  result = (char *) ((arg1)->module_name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_base_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type *arg1 = (lys_type *) 0 ;
  LY_DATA_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_base_set" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_type_base_set" "', argument " "2"" of type '" "LY_DATA_TYPE""'");
  } 
  arg2 = (LY_DATA_TYPE)(val2);
  if (arg1) (arg1)->base = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_base_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type *arg1 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LY_DATA_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_base_get" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  result = (LY_DATA_TYPE) ((arg1)->base);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_der_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type *arg1 = (lys_type *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_der_set" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_der_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->der = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_der_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type *arg1 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_der_get" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  result = (lys_tpdf *) ((arg1)->der);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type *arg1 = (lys_type *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_parent_set" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_parent_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type *arg1 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_parent_get" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  result = (lys_tpdf *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_type_info_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_type *arg1 = (lys_type *) 0 ;
  lys_type_info *arg2 = (lys_type_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_set" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_info, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_type_info_set" "', argument " "2"" of type '" "lys_type_info *""'"); 
  }
  arg2 = (lys_type_info *)(argp2);
  if (arg1) (arg1)->info = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_type_info_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_type *arg1 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_info *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_type_info_get" "', argument " "1"" of type '" "lys_type *""'"); 
  }
  arg1 = (lys_type *)(argp1);
  result = (lys_type_info *)& ((arg1)->info);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_info, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_type *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_type.");
  result = (lys_type *)new lys_type();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_type, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_type(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_type(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_type(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_type(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_type * arg1 = (lys_type *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LYS_NACM_DENYW(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_NACM_DENYA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CONFIG_W(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CONFIG_R(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CONFIG_SET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_CONFIG_MASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x03));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_STATUS_CURR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_STATUS_DEPRC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_STATUS_OBSLT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_STATUS_MASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x38));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_RFN_MAXSET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_RFN_MINSET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_MAND_TRUE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_MAND_FALSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_INCL_STATUS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_MAND_MASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xc0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_USERORDERED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_FENABLED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_UNIQUE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_AUTOASSIGNED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_USESGRP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_name_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_dsc_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_ref_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_flags_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_flags_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_nacm_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_nacm_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_module_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_module_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_nodetype_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_nodetype_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_parent_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_parent_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_child_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_child_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_next_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_next_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_prev_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_prev_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_features_size_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_features_size_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_features_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_features_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node *arg1 = (lys_node *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_priv_set" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_priv_get" "', argument " "1"" of type '" "lys_node *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node.");
  result = (lys_node *)new lys_node();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node * arg1 = (lys_node *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_container_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_name_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_container_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_dsc_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_container_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_ref_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_flags_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_container_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_flags_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_nacm_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_container_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_nacm_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_module_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_module_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_nodetype_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_container_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_nodetype_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_parent_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_parent_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_child_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_child_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_next_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_next_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_prev_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_prev_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_features_size_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_container_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_features_size_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_features_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_features_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_priv_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_priv_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_when_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_when_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_container_presence_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_presence_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (char *) ((arg1)->presence);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_must_size_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_container_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_must_size_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_tpdf_size_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_container_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_tpdf_size_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_must_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_must_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_container_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_tpdf_set" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_container_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_container_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_container *arg1 = (lys_node_container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_container, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_container_tpdf_get" "', argument " "1"" of type '" "lys_node_container *""'"); 
  }
  arg1 = (lys_node_container *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_container(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_container *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_container.");
  result = (lys_node_container *)new lys_node_container();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_container, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_container(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_container(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_container(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_container(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_container * arg1 = (lys_node_container *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_choice_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_name_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_choice_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_dsc_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_choice_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_ref_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_flags_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_choice_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_flags_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_nacm_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_choice_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_nacm_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_module_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_module_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_nodetype_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_choice_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_nodetype_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_parent_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_parent_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_child_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_child_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_next_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_next_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_prev_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_prev_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_features_size_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_choice_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_features_size_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_features_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_features_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_priv_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_priv_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_choice_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_when_set" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_choice_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_choice_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_when_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_choice_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_choice *arg1 = (lys_node_choice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_choice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_choice_dflt_get" "', argument " "1"" of type '" "lys_node_choice *""'"); 
  }
  arg1 = (lys_node_choice *)(argp1);
  result = (lys_node *) ((arg1)->dflt);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_choice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_choice *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_choice.");
  result = (lys_node_choice *)new lys_node_choice();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_choice, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_choice(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_choice(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_choice(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_choice(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_choice * arg1 = (lys_node_choice *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_leaf_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_name_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaf_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_dsc_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaf_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_ref_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_flags_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaf_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_flags_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_nacm_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaf_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_nacm_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_module_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_module_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_nodetype_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_leaf_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_nodetype_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_parent_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_parent_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_child_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_child_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_next_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_next_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_prev_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_prev_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_features_size_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaf_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_features_size_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_features_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_features_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_priv_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_priv_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_when_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_when_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_type *arg2 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_type_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_type_set" "', argument " "2"" of type '" "lys_type *""'"); 
  }
  arg2 = (lys_type *)(argp2);
  if (arg1) (arg1)->type = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_type_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_type *)& ((arg1)->type);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaf_units_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_units_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (char *) ((arg1)->units);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_must_size_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaf_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_must_size_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaf_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_must_set" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaf_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaf_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_must_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaf_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaf *arg1 = (lys_node_leaf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaf_dflt_get" "', argument " "1"" of type '" "lys_node_leaf *""'"); 
  }
  arg1 = (lys_node_leaf *)(argp1);
  result = (char *) ((arg1)->dflt);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_leaf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_leaf *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_leaf.");
  result = (lys_node_leaf *)new lys_node_leaf();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_leaf, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_leaf(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_leaf(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_leaf(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_leaf(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_leaf * arg1 = (lys_node_leaf *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_leaflist_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_name_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_dsc_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_ref_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_flags_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaflist_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_flags_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_nacm_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaflist_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_nacm_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_module_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_module_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_nodetype_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_leaflist_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_nodetype_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_parent_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_parent_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_child_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_child_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_next_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_next_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_prev_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_prev_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_features_size_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaflist_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_features_size_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_features_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_features_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_priv_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_priv_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_when_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_when_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_type *arg2 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_type_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_type_set" "', argument " "2"" of type '" "lys_type *""'"); 
  }
  arg2 = (lys_type *)(argp2);
  if (arg1) (arg1)->type = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_type_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_type *)& ((arg1)->type);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_units_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_units_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (char *) ((arg1)->units);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_must_size_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaflist_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_must_size_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_must_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_must_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_min_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_min_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_min_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaflist_min_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->min = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_min_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_min_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result =  ((arg1)->min);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_leaflist_max_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_max_set" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_leaflist_max_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_leaflist_max_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->max = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_leaflist_max_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_leaflist *arg1 = (lys_node_leaflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_leaflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_leaflist_max_get" "', argument " "1"" of type '" "lys_node_leaflist *""'"); 
  }
  arg1 = (lys_node_leaflist *)(argp1);
  result =  ((arg1)->max);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_leaflist(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_leaflist *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_leaflist.");
  result = (lys_node_leaflist *)new lys_node_leaflist();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_leaflist, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_leaflist(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_leaflist(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_leaflist(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_leaflist(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_leaflist * arg1 = (lys_node_leaflist *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_list_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_name_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_list_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_dsc_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_list_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_ref_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_flags_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_flags_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_nacm_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_nacm_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_module_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_module_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_nodetype_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_list_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_nodetype_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_parent_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_parent_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_child_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_child_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_next_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_next_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_prev_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_prev_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_features_size_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_features_size_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_features_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_features_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_priv_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_priv_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_when_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_when_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_min_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_min_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_min_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_min_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->min = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_min_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_min_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->min);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_max_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_max_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_max_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_max_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->max = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_max_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_max_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->max);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_must_size_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_must_size_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_tpdf_size_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_tpdf_size_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_keys_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_keys_size_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_keys_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_keys_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->keys_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_keys_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_keys_size_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->keys_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_unique_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_unique_size_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_unique_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_list_unique_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->unique_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_unique_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_unique_size_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result =  ((arg1)->unique_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_must_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_must_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_tpdf_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_tpdf_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_keys_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_node_leaf **arg2 = (lys_node_leaf **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_keys_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_node_leaf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_keys_set" "', argument " "2"" of type '" "lys_node_leaf **""'"); 
  }
  arg2 = (lys_node_leaf **)(argp2);
  if (arg1) (arg1)->keys = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_keys_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node_leaf **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_keys_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_node_leaf **) ((arg1)->keys);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_node_leaf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_list_unique_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  lys_unique *arg2 = (lys_unique *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_unique_set" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_unique, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_list_unique_set" "', argument " "2"" of type '" "lys_unique *""'"); 
  }
  arg2 = (lys_unique *)(argp2);
  if (arg1) (arg1)->unique = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_list_unique_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_list *arg1 = (lys_node_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_unique *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_list_unique_get" "', argument " "1"" of type '" "lys_node_list *""'"); 
  }
  arg1 = (lys_node_list *)(argp1);
  result = (lys_unique *) ((arg1)->unique);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_unique, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_list *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_list.");
  result = (lys_node_list *)new lys_node_list();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_list, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_list(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_list(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_list(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_list(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_list * arg1 = (lys_node_list *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_anyxml_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_name_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_dsc_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_ref_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_flags_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_anyxml_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_flags_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_nacm_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_anyxml_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_nacm_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_module_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_module_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_nodetype_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_anyxml_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_nodetype_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_parent_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_parent_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_child_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_child_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_next_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_next_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_prev_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_prev_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_features_size_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_anyxml_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_features_size_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_features_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_features_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_priv_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_priv_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_when_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_when_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_must_size_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_anyxml_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_must_size_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_anyxml_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_must_set" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_anyxml_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_anyxml_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_anyxml *arg1 = (lys_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_anyxml_must_get" "', argument " "1"" of type '" "lys_node_anyxml *""'"); 
  }
  arg1 = (lys_node_anyxml *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_anyxml(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_anyxml *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_anyxml.");
  result = (lys_node_anyxml *)new lys_node_anyxml();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_anyxml, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_anyxml(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_anyxml(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_anyxml(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_anyxml(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_anyxml * arg1 = (lys_node_anyxml *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_uses_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_name_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_uses_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_dsc_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_uses_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_ref_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_flags_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_uses_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_flags_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_nacm_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_uses_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_nacm_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_module_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_module_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_nodetype_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_uses_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_nodetype_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_parent_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_parent_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_child_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_child_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_next_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_next_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_prev_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_prev_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_features_size_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_uses_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_features_size_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_features_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_features_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_priv_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_priv_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_when_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_when_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_grp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_node_grp *arg2 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_grp_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node_grp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_grp_set" "', argument " "2"" of type '" "lys_node_grp *""'"); 
  }
  arg2 = (lys_node_grp *)(argp2);
  if (arg1) (arg1)->grp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_grp_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node_grp *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_grp_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_node_grp *) ((arg1)->grp);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node_grp, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_refine_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_refine_size_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_refine_size_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_uses_refine_size_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->refine_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_refine_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_refine_size_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result =  ((arg1)->refine_size);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_augment_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_augment_size_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_augment_size_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_uses_augment_size_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->augment_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_augment_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_augment_size_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result =  ((arg1)->augment_size);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_refine_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_refine *arg2 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_refine_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_refine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_refine_set" "', argument " "2"" of type '" "lys_refine *""'"); 
  }
  arg2 = (lys_refine *)(argp2);
  if (arg1) (arg1)->refine = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_refine_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_refine *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_refine_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_refine *) ((arg1)->refine);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_refine, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_uses_augment_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  lys_node_augment *arg2 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_augment_set" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node_augment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_uses_augment_set" "', argument " "2"" of type '" "lys_node_augment *""'"); 
  }
  arg2 = (lys_node_augment *)(argp2);
  if (arg1) (arg1)->augment = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_uses_augment_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_uses *arg1 = (lys_node_uses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node_augment *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_uses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_uses_augment_get" "', argument " "1"" of type '" "lys_node_uses *""'"); 
  }
  arg1 = (lys_node_uses *)(argp1);
  result = (lys_node_augment *) ((arg1)->augment);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node_augment, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_uses(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_uses *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_uses.");
  result = (lys_node_uses *)new lys_node_uses();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_uses, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_uses(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_uses(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_uses(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_uses(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_uses * arg1 = (lys_node_uses *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_grp_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_name_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_grp_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_dsc_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_grp_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_ref_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_flags_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_grp_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_flags_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_nacm_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_grp_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_nacm_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_module_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_module_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_nodetype_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_grp_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_nodetype_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_parent_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_parent_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_child_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_child_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_next_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_next_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_prev_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_prev_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_features_size_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_grp_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_features_size_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_features_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_features_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_priv_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_priv_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_tpdf_size_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_grp_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_tpdf_size_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_grp_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_tpdf_set" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_grp_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_grp_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_grp *arg1 = (lys_node_grp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_grp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_grp_tpdf_get" "', argument " "1"" of type '" "lys_node_grp *""'"); 
  }
  arg1 = (lys_node_grp *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_grp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_grp *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_grp.");
  result = (lys_node_grp *)new lys_node_grp();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_grp, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_grp(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_grp(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_grp(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_grp(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_grp * arg1 = (lys_node_grp *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_case_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_name_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_case_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_dsc_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_case_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_ref_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_flags_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_case_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_flags_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_nacm_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_case_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_nacm_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_module_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_module_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_nodetype_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_case_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_nodetype_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_parent_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_parent_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_child_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_child_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_next_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_next_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_prev_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_prev_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_features_size_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_case_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_features_size_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_features_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_features_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_priv_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_priv_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_case_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_when_set" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_case_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_case_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_case *arg1 = (lys_node_case *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_case, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_case_when_get" "', argument " "1"" of type '" "lys_node_case *""'"); 
  }
  arg1 = (lys_node_case *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_case(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_case *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_case.");
  result = (lys_node_case *)new lys_node_case();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_case, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_case(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_case(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_case(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_case(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_case * arg1 = (lys_node_case *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_name_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_fill1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_fill1_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_fill1_set" "', argument " "2"" of type '" "void *[2]""'"); 
  } 
  arg2 = (void **)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(void * *)&arg1->fill1[ii] = *((void * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""fill1""' of type '""void *[2]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_fill1_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_fill1_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (void **)(void **) ((arg1)->fill1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_fill2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  uint16_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_fill2_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_uint16_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_fill2_set" "', argument " "2"" of type '" "uint16_t [1]""'"); 
  } 
  arg2 = (uint16_t *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)1; ++ii) *(uint16_t *)&arg1->fill2[ii] = *((uint16_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""fill2""' of type '""uint16_t [1]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_fill2_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_fill2_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (uint16_t *)(uint16_t *) ((arg1)->fill2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint16_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_module_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_module_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_nodetype_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_rpc_inout_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_nodetype_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_parent_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_parent_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_child_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_child_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_next_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_next_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_prev_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_prev_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_tpdf_size_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_rpc_inout_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_tpdf_size_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_tpdf_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_tpdf_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_inout_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_priv_set" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_inout_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_inout_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc_inout *arg1 = (lys_node_rpc_inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc_inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_inout_priv_get" "', argument " "1"" of type '" "lys_node_rpc_inout *""'"); 
  }
  arg1 = (lys_node_rpc_inout *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_rpc_inout(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_rpc_inout *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_rpc_inout.");
  result = (lys_node_rpc_inout *)new lys_node_rpc_inout();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_rpc_inout, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_rpc_inout(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_rpc_inout(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_rpc_inout(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_rpc_inout(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_rpc_inout * arg1 = (lys_node_rpc_inout *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_notif_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_name_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_notif_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_dsc_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_notif_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_ref_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_flags_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_notif_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_flags_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_nacm_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_notif_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_nacm_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_module_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_module_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_nodetype_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_notif_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_nodetype_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_parent_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_parent_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_child_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_child_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_next_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_next_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_prev_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_prev_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_features_size_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_notif_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_features_size_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_features_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_features_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_priv_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_priv_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_tpdf_size_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_notif_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_tpdf_size_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_notif_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_tpdf_set" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_notif_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_notif_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_notif *arg1 = (lys_node_notif *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_notif, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_notif_tpdf_get" "', argument " "1"" of type '" "lys_node_notif *""'"); 
  }
  arg1 = (lys_node_notif *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_notif(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_notif *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_notif.");
  result = (lys_node_notif *)new lys_node_notif();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_notif, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_notif(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_notif(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_notif(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_notif(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_notif * arg1 = (lys_node_notif *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_rpc_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_name_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_rpc_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_dsc_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_rpc_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_ref_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_flags_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_rpc_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_flags_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_nacm_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_rpc_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_nacm_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_module_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_module_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_nodetype_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_rpc_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_nodetype_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_parent_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_parent_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_child_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_child_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_next_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_next_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_next_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_prev_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_prev_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_prev_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_features_size_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_rpc_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_features_size_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_features_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_features_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_priv_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_priv_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_tpdf_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_tpdf_size_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_rpc_tpdf_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->tpdf_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_tpdf_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_tpdf_size_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result =  ((arg1)->tpdf_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_rpc_tpdf_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  lys_tpdf *arg2 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_tpdf_set" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_tpdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_rpc_tpdf_set" "', argument " "2"" of type '" "lys_tpdf *""'"); 
  }
  arg2 = (lys_tpdf *)(argp2);
  if (arg1) (arg1)->tpdf = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_rpc_tpdf_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_rpc *arg1 = (lys_node_rpc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_tpdf *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_rpc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_rpc_tpdf_get" "', argument " "1"" of type '" "lys_node_rpc *""'"); 
  }
  arg1 = (lys_node_rpc *)(argp1);
  result = (lys_tpdf *) ((arg1)->tpdf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_tpdf, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_rpc(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_rpc *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_rpc.");
  result = (lys_node_rpc *)new lys_node_rpc();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_rpc, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_rpc(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_rpc(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_rpc(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_rpc(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_rpc * arg1 = (lys_node_rpc *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_node_augment_target_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_target_name_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (char *) ((arg1)->target_name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_augment_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_dsc_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_node_augment_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_ref_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_flags_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_augment_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_flags_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_nacm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_nacm_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_nacm_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_augment_nacm_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->nacm = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_nacm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_nacm_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result =  ((arg1)->nacm);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_module_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_module_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_nodetype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  LYS_NODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_nodetype_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_node_augment_nodetype_set" "', argument " "2"" of type '" "LYS_NODE""'");
  } 
  arg2 = (LYS_NODE)(val2);
  if (arg1) (arg1)->nodetype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_nodetype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_NODE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_nodetype_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (LYS_NODE) ((arg1)->nodetype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_parent_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_parent_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_parent_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (lys_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_child_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_child_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_child_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (lys_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_when_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  lys_when *arg2 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_when_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_when, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_when_set" "', argument " "2"" of type '" "lys_when *""'"); 
  }
  arg2 = (lys_when *)(argp2);
  if (arg1) (arg1)->when = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_when_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_when *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_when_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (lys_when *) ((arg1)->when);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_when, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_target_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_target_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_target_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->target = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_target_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_target_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (lys_node *) ((arg1)->target);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_features_size_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_node_augment_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_features_size_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_features_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_features_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_node_augment_priv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_priv_set" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_node_augment_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->priv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_node_augment_priv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node_augment *arg1 = (lys_node_augment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_node_augment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_augment_priv_get" "', argument " "1"" of type '" "lys_node_augment *""'"); 
  }
  arg1 = (lys_node_augment *)(argp1);
  result = (void *) ((arg1)->priv);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_node_augment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_node_augment *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_node_augment.");
  result = (lys_node_augment *)new lys_node_augment();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_node_augment, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_node_augment(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_node_augment(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_node_augment(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_node_augment(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_node_augment * arg1 = (lys_node_augment *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_refine_mod_list_min_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine_mod_list *arg1 = (lys_refine_mod_list *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_list_min_set" "', argument " "1"" of type '" "lys_refine_mod_list *""'"); 
  }
  arg1 = (lys_refine_mod_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_mod_list_min_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_refine_mod_list_min_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->min = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_mod_list_min_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine_mod_list *arg1 = (lys_refine_mod_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_list_min_get" "', argument " "1"" of type '" "lys_refine_mod_list *""'"); 
  }
  arg1 = (lys_refine_mod_list *)(argp1);
  result =  ((arg1)->min);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_mod_list_max_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine_mod_list *arg1 = (lys_refine_mod_list *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_list_max_set" "', argument " "1"" of type '" "lys_refine_mod_list *""'"); 
  }
  arg1 = (lys_refine_mod_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_mod_list_max_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_refine_mod_list_max_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->max = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_mod_list_max_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine_mod_list *arg1 = (lys_refine_mod_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_list_max_get" "', argument " "1"" of type '" "lys_refine_mod_list *""'"); 
  }
  arg1 = (lys_refine_mod_list *)(argp1);
  result =  ((arg1)->max);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_refine_mod_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_refine_mod_list *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_refine_mod_list.");
  result = (lys_refine_mod_list *)new lys_refine_mod_list();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_refine_mod_list, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_refine_mod_list(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_refine_mod_list(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_refine_mod_list(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_refine_mod_list(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_refine_mod_list * arg1 = (lys_refine_mod_list *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_refine_mod_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine_mod *arg1 = (lys_refine_mod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_dflt_get" "', argument " "1"" of type '" "lys_refine_mod *""'"); 
  }
  arg1 = (lys_refine_mod *)(argp1);
  result = (char *) ((arg1)->dflt);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_refine_mod_presence_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine_mod *arg1 = (lys_refine_mod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_presence_get" "', argument " "1"" of type '" "lys_refine_mod *""'"); 
  }
  arg1 = (lys_refine_mod *)(argp1);
  result = (char *) ((arg1)->presence);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_mod_list_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine_mod *arg1 = (lys_refine_mod *) 0 ;
  lys_refine_mod_list *arg2 = (lys_refine_mod_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_list_set" "', argument " "1"" of type '" "lys_refine_mod *""'"); 
  }
  arg1 = (lys_refine_mod *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_refine_mod_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_mod_list_set" "', argument " "2"" of type '" "lys_refine_mod_list *""'"); 
  }
  arg2 = (lys_refine_mod_list *)(argp2);
  if (arg1) (arg1)->list = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_mod_list_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine_mod *arg1 = (lys_refine_mod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_refine_mod_list *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine_mod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_list_get" "', argument " "1"" of type '" "lys_refine_mod *""'"); 
  }
  arg1 = (lys_refine_mod *)(argp1);
  result = (lys_refine_mod_list *)& ((arg1)->list);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_refine_mod_list, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_refine_mod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_refine_mod *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_refine_mod.");
  result = (lys_refine_mod *)new lys_refine_mod();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_refine_mod, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_refine_mod(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_refine_mod(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_refine_mod(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_refine_mod(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_refine_mod * arg1 = (lys_refine_mod *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_refine_target_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_target_name_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result = (char *) ((arg1)->target_name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_refine_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_dsc_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_refine_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_ref_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine *arg1 = (lys_refine *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_flags_set" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_flags_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_refine_flags_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_flags_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_target_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine *arg1 = (lys_refine *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_target_type_set" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_target_type_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_refine_target_type_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->target_type = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_target_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_target_type_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result =  ((arg1)->target_type);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine *arg1 = (lys_refine *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_must_size_set" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_refine_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_must_size_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine *arg1 = (lys_refine *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_must_set" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_must_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_refine_mod_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_refine *arg1 = (lys_refine *) 0 ;
  lys_refine_mod *arg2 = (lys_refine_mod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_set" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_refine_mod, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_refine_mod_set" "', argument " "2"" of type '" "lys_refine_mod *""'"); 
  }
  arg2 = (lys_refine_mod *)(argp2);
  if (arg1) (arg1)->mod = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_refine_mod_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_refine *arg1 = (lys_refine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_refine_mod *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_refine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_refine_mod_get" "', argument " "1"" of type '" "lys_refine *""'"); 
  }
  arg1 = (lys_refine *)(argp1);
  result = (lys_refine_mod *)& ((arg1)->mod);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_refine_mod, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_refine(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_refine *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_refine.");
  result = (lys_refine *)new lys_refine();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_refine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_refine(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_refine(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_refine(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_refine(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_refine * arg1 = (lys_refine *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LY_DEVIATE_NO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_DEVIATE_NO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_DEVIATE_ADD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_DEVIATE_ADD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_DEVIATE_RPL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_DEVIATE_RPL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LY_DEVIATE_DEL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LY_DEVIATE_DEL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_mod_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  LYS_DEVIATE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_mod_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_deviate_mod_set" "', argument " "2"" of type '" "LYS_DEVIATE_TYPE""'");
  } 
  arg2 = (LYS_DEVIATE_TYPE)(val2);
  if (arg1) (arg1)->mod = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_mod_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYS_DEVIATE_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_mod_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result = (LYS_DEVIATE_TYPE) ((arg1)->mod);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_flags_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_flags_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_flags_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_flags_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_deviate_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_dflt_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result = (char *) ((arg1)->dflt);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_min_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_min_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_min_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_min_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->min = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_min_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_min_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->min);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_max_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_max_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_max_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_max_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->max = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_max_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_max_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->max);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_min_set_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_min_set_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_min_set_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_min_set_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->min_set = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_min_set_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_min_set_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->min_set);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_max_set_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_max_set_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_max_set_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_max_set_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->max_set = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_max_set_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_max_set_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->max_set);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_must_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_must_size_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_must_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_must_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->must_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_must_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_must_size_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->must_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_unique_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_unique_size_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_unique_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviate_unique_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->unique_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_unique_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_unique_size_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result =  ((arg1)->unique_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_must_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  lys_restr *arg2 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_must_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_restr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_must_set" "', argument " "2"" of type '" "lys_restr *""'"); 
  }
  arg2 = (lys_restr *)(argp2);
  if (arg1) (arg1)->must = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_must_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_restr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_must_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result = (lys_restr *) ((arg1)->must);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_restr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_unique_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  lys_unique *arg2 = (lys_unique *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_unique_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_unique, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_unique_set" "', argument " "2"" of type '" "lys_unique *""'"); 
  }
  arg2 = (lys_unique *)(argp2);
  if (arg1) (arg1)->unique = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_unique_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_unique *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_unique_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result = (lys_unique *) ((arg1)->unique);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_unique, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviate_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  lys_type *arg2 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_type_set" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviate_type_set" "', argument " "2"" of type '" "lys_type *""'"); 
  }
  arg2 = (lys_type *)(argp2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviate_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_type_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result = (lys_type *) ((arg1)->type);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_deviate_units_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviate *arg1 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviate_units_get" "', argument " "1"" of type '" "lys_deviate *""'"); 
  }
  arg1 = (lys_deviate *)(argp1);
  result = (char *) ((arg1)->units);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_deviate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_deviate *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_deviate.");
  result = (lys_deviate *)new lys_deviate();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_deviate, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_deviate(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_deviate(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_deviate(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_deviate(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_deviate * arg1 = (lys_deviate *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_deviation_target_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_target_name_get" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  result = (char *) ((arg1)->target_name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_deviation_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_dsc_get" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_deviation_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_ref_get" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviation_orig_node_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_orig_node_set" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviation_orig_node_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->orig_node = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviation_orig_node_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_orig_node_get" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  result = (lys_node *) ((arg1)->orig_node);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviation_deviate_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_deviate_size_set" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviation_deviate_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_deviation_deviate_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->deviate_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviation_deviate_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_deviate_size_get" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  result =  ((arg1)->deviate_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_deviation_deviate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  lys_deviate *arg2 = (lys_deviate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_deviate_set" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_deviate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_deviation_deviate_set" "', argument " "2"" of type '" "lys_deviate *""'"); 
  }
  arg2 = (lys_deviate *)(argp2);
  if (arg1) (arg1)->deviate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_deviation_deviate_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_deviation *arg1 = (lys_deviation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_deviate *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_deviation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_deviation_deviate_get" "', argument " "1"" of type '" "lys_deviation *""'"); 
  }
  arg1 = (lys_deviation *)(argp1);
  result = (lys_deviate *) ((arg1)->deviate);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_deviate, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_deviation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_deviation *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_deviation.");
  result = (lys_deviation *)new lys_deviation();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_deviation, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_deviation(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_deviation(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_deviation(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_deviation(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_deviation * arg1 = (lys_deviation *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_import_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_import *arg1 = (lys_import *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_module_set" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_import_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_import_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_import *arg1 = (lys_import *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_module_get" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_import_prefix_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_import *arg1 = (lys_import *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_prefix_get" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  result = (char *) ((arg1)->prefix);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_import_rev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_import *arg1 = (lys_import *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[11] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_rev_set" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 11);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_import_rev_set" "', argument " "2"" of type '" "char [11]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->rev,arg2,11*sizeof(char));
  else memset(arg1->rev,0,11*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_import_rev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_import *arg1 = (lys_import *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_rev_get" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  result = (char *)(char *) ((arg1)->rev);
  {
    size_t size = SWIG_strnlen(result, 11);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_import_external_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_import *arg1 = (lys_import *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_external_set" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_import_external_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_import_external_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->external = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_import_external_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_import *arg1 = (lys_import *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_import, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_import_external_get" "', argument " "1"" of type '" "lys_import *""'"); 
  }
  arg1 = (lys_import *)(argp1);
  result =  ((arg1)->external);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_import(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_import *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_import.");
  result = (lys_import *)new lys_import();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_import, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_import(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_import(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_import(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_import(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_import * arg1 = (lys_import *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_include_submodule_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_include *arg1 = (lys_include *) 0 ;
  lys_submodule *arg2 = (lys_submodule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_include, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_include_submodule_set" "', argument " "1"" of type '" "lys_include *""'"); 
  }
  arg1 = (lys_include *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_submodule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_include_submodule_set" "', argument " "2"" of type '" "lys_submodule *""'"); 
  }
  arg2 = (lys_submodule *)(argp2);
  if (arg1) (arg1)->submodule = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_include_submodule_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_include *arg1 = (lys_include *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_submodule *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_include, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_include_submodule_get" "', argument " "1"" of type '" "lys_include *""'"); 
  }
  arg1 = (lys_include *)(argp1);
  result = (lys_submodule *) ((arg1)->submodule);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_submodule, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_include_rev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_include *arg1 = (lys_include *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[11] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_include, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_include_rev_set" "', argument " "1"" of type '" "lys_include *""'"); 
  }
  arg1 = (lys_include *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 11);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_include_rev_set" "', argument " "2"" of type '" "char [11]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->rev,arg2,11*sizeof(char));
  else memset(arg1->rev,0,11*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_include_rev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_include *arg1 = (lys_include *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_include, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_include_rev_get" "', argument " "1"" of type '" "lys_include *""'"); 
  }
  arg1 = (lys_include *)(argp1);
  result = (char *)(char *) ((arg1)->rev);
  {
    size_t size = SWIG_strnlen(result, 11);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_include_external_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_include *arg1 = (lys_include *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_include, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_include_external_set" "', argument " "1"" of type '" "lys_include *""'"); 
  }
  arg1 = (lys_include *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_include_external_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_include_external_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->external = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_include_external_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_include *arg1 = (lys_include *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_include, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_include_external_get" "', argument " "1"" of type '" "lys_include *""'"); 
  }
  arg1 = (lys_include *)(argp1);
  result =  ((arg1)->external);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_include(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_include *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_include.");
  result = (lys_include *)new lys_include();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_include, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_include(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_include(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_include(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_include(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_include * arg1 = (lys_include *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lys_revision_date_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_revision *arg1 = (lys_revision *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[11] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_revision, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_revision_date_set" "', argument " "1"" of type '" "lys_revision *""'"); 
  }
  arg1 = (lys_revision *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 11);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_revision_date_set" "', argument " "2"" of type '" "char [11]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->date,arg2,11*sizeof(char));
  else memset(arg1->date,0,11*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_revision_date_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_revision *arg1 = (lys_revision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_revision, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_revision_date_get" "', argument " "1"" of type '" "lys_revision *""'"); 
  }
  arg1 = (lys_revision *)(argp1);
  result = (char *)(char *) ((arg1)->date);
  {
    size_t size = SWIG_strnlen(result, 11);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_revision_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_revision *arg1 = (lys_revision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_revision, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_revision_dsc_get" "', argument " "1"" of type '" "lys_revision *""'"); 
  }
  arg1 = (lys_revision *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_revision_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_revision *arg1 = (lys_revision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_revision, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_revision_ref_get" "', argument " "1"" of type '" "lys_revision *""'"); 
  }
  arg1 = (lys_revision *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_revision(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_revision *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_revision.");
  result = (lys_revision *)new lys_revision();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_revision, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_revision(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_revision(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_revision(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_revision(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_revision * arg1 = (lys_revision *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_tpdf_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_name_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_tpdf_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_dsc_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_tpdf_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_ref_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_tpdf_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_flags_set" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_tpdf_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_tpdf_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_tpdf_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_flags_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_tpdf_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_module_set" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_tpdf_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_tpdf_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_module_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_tpdf_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  lys_type *arg2 = (lys_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_type_set" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_tpdf_type_set" "', argument " "2"" of type '" "lys_type *""'"); 
  }
  arg2 = (lys_type *)(argp2);
  if (arg1) (arg1)->type = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_tpdf_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_type_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (lys_type *)& ((arg1)->type);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_tpdf_units_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_units_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (char *) ((arg1)->units);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_tpdf_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_tpdf *arg1 = (lys_tpdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_tpdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_tpdf_dflt_get" "', argument " "1"" of type '" "lys_tpdf *""'"); 
  }
  arg1 = (lys_tpdf *)(argp1);
  result = (char *) ((arg1)->dflt);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_tpdf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_tpdf *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_tpdf.");
  result = (lys_tpdf *)new lys_tpdf();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_tpdf, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_tpdf(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_tpdf(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_tpdf(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_tpdf(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_tpdf * arg1 = (lys_tpdf *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_unique_expr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_unique *arg1 = (lys_unique *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_unique, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_unique_expr_get" "', argument " "1"" of type '" "lys_unique *""'"); 
  }
  arg1 = (lys_unique *)(argp1);
  result = (char **) ((arg1)->expr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_unique_expr_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_unique *arg1 = (lys_unique *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_unique, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_unique_expr_size_set" "', argument " "1"" of type '" "lys_unique *""'"); 
  }
  arg1 = (lys_unique *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_unique_expr_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_unique_expr_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->expr_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_unique_expr_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_unique *arg1 = (lys_unique *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_unique, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_unique_expr_size_get" "', argument " "1"" of type '" "lys_unique *""'"); 
  }
  arg1 = (lys_unique *)(argp1);
  result =  ((arg1)->expr_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_unique(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_unique *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_unique.");
  result = (lys_unique *)new lys_unique();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_unique, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_unique(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_unique(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_unique(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_unique(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_unique * arg1 = (lys_unique *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_feature_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_name_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_feature_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_dsc_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_feature_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_ref_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_feature_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_feature *arg1 = (lys_feature *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_flags_set" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_feature_flags_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_feature_flags_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_feature_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_flags_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_feature_padding_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_feature *arg1 = (lys_feature *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_padding_set" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_feature_padding_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_feature_padding_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->padding = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_feature_padding_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_padding_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result =  ((arg1)->padding);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_feature_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_feature *arg1 = (lys_feature *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_module_set" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_feature_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_feature_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_module_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_feature_features_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_feature *arg1 = (lys_feature *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_features_size_set" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_feature_features_size_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_feature_features_size_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->features_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_feature_features_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_features_size_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result =  ((arg1)->features_size);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_feature_features_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_feature *arg1 = (lys_feature *) 0 ;
  lys_feature **arg2 = (lys_feature **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_features_set" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_feature_features_set" "', argument " "2"" of type '" "lys_feature **""'"); 
  }
  arg2 = (lys_feature **)(argp2);
  if (arg1) (arg1)->features = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_feature_features_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_feature *arg1 = (lys_feature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_feature **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_feature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_feature_features_get" "', argument " "1"" of type '" "lys_feature *""'"); 
  }
  arg1 = (lys_feature *)(argp1);
  result = (lys_feature **) ((arg1)->features);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_feature, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_feature(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_feature *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_feature.");
  result = (lys_feature *)new lys_feature();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_feature, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_feature(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_feature(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_feature(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_feature(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_feature * arg1 = (lys_feature *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_restr_expr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_restr *arg1 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_restr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_restr_expr_get" "', argument " "1"" of type '" "lys_restr *""'"); 
  }
  arg1 = (lys_restr *)(argp1);
  result = (char *) ((arg1)->expr);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_restr_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_restr *arg1 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_restr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_restr_dsc_get" "', argument " "1"" of type '" "lys_restr *""'"); 
  }
  arg1 = (lys_restr *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_restr_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_restr *arg1 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_restr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_restr_ref_get" "', argument " "1"" of type '" "lys_restr *""'"); 
  }
  arg1 = (lys_restr *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_restr_eapptag_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_restr *arg1 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_restr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_restr_eapptag_get" "', argument " "1"" of type '" "lys_restr *""'"); 
  }
  arg1 = (lys_restr *)(argp1);
  result = (char *) ((arg1)->eapptag);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_restr_emsg_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_restr *arg1 = (lys_restr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_restr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_restr_emsg_get" "', argument " "1"" of type '" "lys_restr *""'"); 
  }
  arg1 = (lys_restr *)(argp1);
  result = (char *) ((arg1)->emsg);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_restr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_restr *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_restr.");
  result = (lys_restr *)new lys_restr();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_restr, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_restr(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_restr(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_restr(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_restr(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_restr * arg1 = (lys_restr *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_when_cond_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_when *arg1 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_when, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_when_cond_get" "', argument " "1"" of type '" "lys_when *""'"); 
  }
  arg1 = (lys_when *)(argp1);
  result = (char *) ((arg1)->cond);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_when_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_when *arg1 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_when, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_when_dsc_get" "', argument " "1"" of type '" "lys_when *""'"); 
  }
  arg1 = (lys_when *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_when_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_when *arg1 = (lys_when *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_when, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_when_ref_get" "', argument " "1"" of type '" "lys_when *""'"); 
  }
  arg1 = (lys_when *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_when(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_when *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_when.");
  result = (lys_when *)new lys_when();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_when, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_when(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_when(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_when(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_when(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_when * arg1 = (lys_when *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_ident_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_name_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_ident_dsc_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_dsc_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result = (char *) ((arg1)->dsc);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_ident_ref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_ref_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result = (char *) ((arg1)->ref);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_ident_flags_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_ident *arg1 = (lys_ident *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_flags_set" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_ident_flags_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lys_ident_flags_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->flags = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_ident_flags_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_flags_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result =  ((arg1)->flags);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_ident_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_ident *arg1 = (lys_ident *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_module_set" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_ident_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_ident_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_module_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_ident_base_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_ident *arg1 = (lys_ident *) 0 ;
  lys_ident *arg2 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_base_set" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_ident, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_ident_base_set" "', argument " "2"" of type '" "lys_ident *""'"); 
  }
  arg2 = (lys_ident *)(argp2);
  if (arg1) (arg1)->base = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_ident_base_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_ident *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_base_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result = (lys_ident *) ((arg1)->base);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lys_ident_der_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lys_ident *arg1 = (lys_ident *) 0 ;
  lys_ident **arg2 = (lys_ident **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_der_set" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_ident_der_set" "', argument " "2"" of type '" "lys_ident **""'"); 
  }
  arg2 = (lys_ident **)(argp2);
  if (arg1) (arg1)->der = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lys_ident_der_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_ident *arg1 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_ident **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lys_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_ident_der_get" "', argument " "1"" of type '" "lys_ident *""'"); 
  }
  arg1 = (lys_ident *)(argp1);
  result = (lys_ident **) ((arg1)->der);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lys_ident(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lys_ident *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lys_ident.");
  result = (lys_ident *)new lys_ident();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lys_ident, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lys_ident(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lys_ident(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lys_ident(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lys_ident(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lys_ident * arg1 = (lys_ident *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lys_parse_mem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  LYS_INFORMAT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_parse_mem.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_parse_mem" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_parse_mem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lys_parse_mem" "', argument " "3"" of type '" "LYS_INFORMAT""'");
  } 
  arg3 = (LYS_INFORMAT)(val3);
  result = (lys_module *)lys_parse_mem(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_parse_fd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  int arg2 ;
  LYS_INFORMAT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_parse_fd.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_parse_fd" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_parse_fd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lys_parse_fd" "', argument " "3"" of type '" "LYS_INFORMAT""'");
  } 
  arg3 = (LYS_INFORMAT)(val3);
  result = (lys_module *)lys_parse_fd(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_parse_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  LYS_INFORMAT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_parse_path.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_parse_path" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_parse_path" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lys_parse_path" "', argument " "3"" of type '" "LYS_INFORMAT""'");
  } 
  arg3 = (LYS_INFORMAT)(val3);
  result = (lys_module *)lys_parse_path(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_features_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  uint8_t **arg2 = (uint8_t **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char **result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_features_list.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_features_list" "', argument " "1"" of type '" "lys_module const *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_features_list" "', argument " "2"" of type '" "uint8_t **""'"); 
  }
  arg2 = (uint8_t **)(argp2);
  result = (char **)lys_features_list((lys_module const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_features_enable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_features_enable.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_features_enable" "', argument " "1"" of type '" "lys_module const *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_features_enable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)lys_features_enable((lys_module const *)arg1,(char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_features_disable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_features_disable.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_features_disable" "', argument " "1"" of type '" "lys_module const *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_features_disable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)lys_features_disable((lys_module const *)arg1,(char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_features_state(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_features_state.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_features_state" "', argument " "1"" of type '" "lys_module const *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_features_state" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)lys_features_state((lys_module const *)arg1,(char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_is_disabled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  lys_feature *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_is_disabled.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_is_disabled" "', argument " "1"" of type '" "lys_node const *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lys_is_disabled" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (lys_feature *)lys_is_disabled((lys_node const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_feature, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_getnext(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  lys_module *arg3 = (lys_module *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  lys_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_getnext.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_getnext" "', argument " "1"" of type '" "lys_node const *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_getnext" "', argument " "2"" of type '" "lys_node const *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lys_getnext" "', argument " "3"" of type '" "lys_module const *""'"); 
  }
  arg3 = (lys_module *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lys_getnext" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (lys_node *)lys_getnext((lys_node const *)arg1,(lys_node const *)arg2,(lys_module const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYS_GETNEXT_WITHCHOICE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_GETNEXT_WITHCASE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_GETNEXT_WITHGROUPING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYS_GETNEXT_WITHINOUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lys_parent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_parent.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_parent" "', argument " "1"" of type '" "lys_node const *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_node *)lys_parent((lys_node const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_node_module(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_node_module.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_node_module" "', argument " "1"" of type '" "lys_node const *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  result = (lys_module *)lys_node_module((lys_node const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_main_module(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_module *arg1 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_main_module.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_main_module" "', argument " "1"" of type '" "lys_module const *""'"); 
  }
  arg1 = (lys_module *)(argp1);
  result = (lys_module *)lys_main_module((lys_module const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_set_private(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lys_node *arg1 = (lys_node *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_set_private.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_set_private" "', argument " "1"" of type '" "lys_node const *""'"); 
  }
  arg1 = (lys_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_set_private" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (void *)lys_set_private((lys_node const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_print_mem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  LYS_OUTFORMAT arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_print_mem.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_print_mem" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = (char **)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_print_mem" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lys_print_mem" "', argument " "3"" of type '" "LYS_OUTFORMAT""'");
  } 
  arg3 = (LYS_OUTFORMAT)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lys_print_mem" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (int)lys_print_mem(arg1,(lys_module const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_print_fd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  lys_module *arg2 = (lys_module *) 0 ;
  LYS_OUTFORMAT arg3 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_print_fd.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lys_print_fd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_print_fd" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lys_print_fd" "', argument " "3"" of type '" "LYS_OUTFORMAT""'");
  } 
  arg3 = (LYS_OUTFORMAT)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lys_print_fd" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (int)lys_print_fd(arg1,(lys_module const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_print_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FILE *arg1 = (FILE *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  LYS_OUTFORMAT arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_print_file.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lys_print_file" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = (FILE *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_print_file" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lys_print_file" "', argument " "3"" of type '" "LYS_OUTFORMAT""'");
  } 
  arg3 = (LYS_OUTFORMAT)(val3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lys_print_file" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (int)lys_print_file(arg1,(lys_module const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lys_print_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ssize_t (*arg1)(void *,void const *,size_t) = (ssize_t (*)(void *,void const *,size_t)) 0 ;
  void *arg2 = (void *) 0 ;
  lys_module *arg3 = (lys_module *) 0 ;
  LYS_OUTFORMAT arg4 ;
  char *arg5 = (char *) 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lys_print_clb.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p_void_p_q_const__void_size_t__ssize_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "lys_print_clb" "', argument " "1"" of type '" "ssize_t (*)(void *,void const *,size_t)""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lys_print_clb" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lys_print_clb" "', argument " "3"" of type '" "lys_module const *""'"); 
  }
  arg3 = (lys_module *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lys_print_clb" "', argument " "4"" of type '" "LYS_OUTFORMAT""'");
  } 
  arg4 = (LYS_OUTFORMAT)(val4);
  res5 = SWIG_AsCharPtrAndSize(args[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lys_print_clb" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (int)lys_print_clb(arg1,arg2,(lys_module const *)arg3,arg4,(char const *)arg5);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYD_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_XML(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_XML));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_JSON(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_JSON));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_attr_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_attr *arg1 = (lyd_attr *) 0 ;
  lyd_attr *arg2 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_attr_next_set" "', argument " "1"" of type '" "lyd_attr *""'"); 
  }
  arg1 = (lyd_attr *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_attr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_attr_next_set" "', argument " "2"" of type '" "lyd_attr *""'"); 
  }
  arg2 = (lyd_attr *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_attr_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_attr *arg1 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_attr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_attr_next_get" "', argument " "1"" of type '" "lyd_attr *""'"); 
  }
  arg1 = (lyd_attr *)(argp1);
  result = (lyd_attr *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_attr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_attr_module_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_attr *arg1 = (lyd_attr *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_attr_module_set" "', argument " "1"" of type '" "lyd_attr *""'"); 
  }
  arg1 = (lyd_attr *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_attr_module_set" "', argument " "2"" of type '" "lys_module *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  if (arg1) (arg1)->module = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_attr_module_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_attr *arg1 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_attr_module_get" "', argument " "1"" of type '" "lyd_attr *""'"); 
  }
  arg1 = (lyd_attr *)(argp1);
  result = (lys_module *) ((arg1)->module);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_attr_name_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_attr *arg1 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_attr_name_get" "', argument " "1"" of type '" "lyd_attr *""'"); 
  }
  arg1 = (lyd_attr *)(argp1);
  result = (char *) ((arg1)->name);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_attr_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_attr *arg1 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_attr_value_get" "', argument " "1"" of type '" "lyd_attr *""'"); 
  }
  arg1 = (lyd_attr *)(argp1);
  result = (char *) ((arg1)->value);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_attr *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_attr.");
  result = (lyd_attr *)new lyd_attr();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_attr, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_attr(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_attr(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_attr(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_attr(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_attr * arg1 = (lyd_attr *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lyd_val_binary_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_binary_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (char *) ((arg1)->binary);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_bit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  lys_type_bit **arg2 = (lys_type_bit **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_bit_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lys_type_bit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_bit_set" "', argument " "2"" of type '" "lys_type_bit **""'"); 
  }
  arg2 = (lys_type_bit **)(argp2);
  if (arg1) (arg1)->bit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_bit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_bit **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_bit_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (lys_type_bit **) ((arg1)->bit);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lys_type_bit, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_bln_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_bln_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_bln_set" "', argument " "2"" of type '" "int8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_bln_set" "', argument " "2"" of type '" "int8_t""'");
    } else {
      arg2 = *((int8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->bln = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_bln_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_bln_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->bln);
  jsresult = SWIG_NewPointerObj((new int8_t((const int8_t&)(result))), SWIGTYPE_p_int8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_dec64_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_dec64_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_dec64_set" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_dec64_set" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *((int64_t *)(argp2));
    }
  }
  if (arg1) (arg1)->dec64 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_dec64_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_dec64_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->dec64);
  jsresult = SWIG_NewPointerObj((new int64_t((const int64_t&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_enm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  lys_type_enum *arg2 = (lys_type_enum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_enm_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_type_enum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_enm_set" "', argument " "2"" of type '" "lys_type_enum *""'"); 
  }
  arg2 = (lys_type_enum *)(argp2);
  if (arg1) (arg1)->enm = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_enm_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_type_enum *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_enm_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (lys_type_enum *) ((arg1)->enm);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_type_enum, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_ident_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  lys_ident *arg2 = (lys_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_ident_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_ident, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_ident_set" "', argument " "2"" of type '" "lys_ident *""'"); 
  }
  arg2 = (lys_ident *)(argp2);
  if (arg1) (arg1)->ident = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_ident_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_ident *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_ident_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (lys_ident *) ((arg1)->ident);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_ident, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_instance_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_instance_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_instance_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->instance = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_instance_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_instance_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (lyd_node *) ((arg1)->instance);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_int8_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int8_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_int8_set" "', argument " "2"" of type '" "int8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_int8_set" "', argument " "2"" of type '" "int8_t""'");
    } else {
      arg2 = *((int8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->int8 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_int8_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int8_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->int8);
  jsresult = SWIG_NewPointerObj((new int8_t((const int8_t&)(result))), SWIGTYPE_p_int8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_int16_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int16_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_int16_set" "', argument " "2"" of type '" "int16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_int16_set" "', argument " "2"" of type '" "int16_t""'");
    } else {
      arg2 = *((int16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->int16 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_int16_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int16_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->int16);
  jsresult = SWIG_NewPointerObj((new int16_t((const int16_t&)(result))), SWIGTYPE_p_int16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_int32_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int32_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_int32_set" "', argument " "2"" of type '" "int32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_int32_set" "', argument " "2"" of type '" "int32_t""'");
    } else {
      arg2 = *((int32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->int32 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_int32_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int32_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->int32);
  jsresult = SWIG_NewPointerObj((new int32_t((const int32_t&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_int64_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int64_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_int64_set" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_int64_set" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *((int64_t *)(argp2));
    }
  }
  if (arg1) (arg1)->int64 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_int64_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_int64_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->int64);
  jsresult = SWIG_NewPointerObj((new int64_t((const int64_t&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_leafref_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_leafref_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_leafref_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->leafref = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_leafref_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_leafref_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (lyd_node *) ((arg1)->leafref);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_val_string_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_string_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result = (char *) ((arg1)->string);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_uint8_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint8_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_uint8_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_uint8_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->uint8 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_uint8_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint8_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->uint8);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_uint16_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint16_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_uint16_set" "', argument " "2"" of type '" "uint16_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_uint16_set" "', argument " "2"" of type '" "uint16_t""'");
    } else {
      arg2 = *((uint16_t *)(argp2));
    }
  }
  if (arg1) (arg1)->uint16 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_uint16_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint16_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->uint16);
  jsresult = SWIG_NewPointerObj((new uint16_t((const uint16_t&)(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_uint32_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint32_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_uint32_set" "', argument " "2"" of type '" "uint32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_uint32_set" "', argument " "2"" of type '" "uint32_t""'");
    } else {
      arg2 = *((uint32_t *)(argp2));
    }
  }
  if (arg1) (arg1)->uint32 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_uint32_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint32_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->uint32);
  jsresult = SWIG_NewPointerObj((new uint32_t((const uint32_t&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_val_uint64_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint64_set" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_val_uint64_set" "', argument " "2"" of type '" "uint64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_val_uint64_set" "', argument " "2"" of type '" "uint64_t""'");
    } else {
      arg2 = *((uint64_t *)(argp2));
    }
  }
  if (arg1) (arg1)->uint64 = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_val_uint64_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_value_u *arg1 = (lyd_value_u *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_value_u, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_val_uint64_get" "', argument " "1"" of type '" "lyd_value_u *""'"); 
  }
  arg1 = (lyd_value_u *)(argp1);
  result =  ((arg1)->uint64);
  jsresult = SWIG_NewPointerObj((new uint64_t((const uint64_t&)(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_value_u *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_val.");
  result = (lyd_value_u *)new lyd_value_u();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_value_u, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_val(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_val(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_val(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_val(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_value_u * arg1 = (lyd_value_u *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LYD_VAL_OK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_VAL_UNIQUE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_VAL_NOT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x07));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_VAL_INUSE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_schema_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_schema_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_schema_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->schema = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_schema_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_schema_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lys_node *) ((arg1)->schema);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_validity_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_validity_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_validity_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_validity_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->validity = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_validity_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_validity_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result =  ((arg1)->validity);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_node_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_dflt_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result =  ((arg1)->dflt);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_when_status_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_when_status_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_when_status_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_when_status_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->when_status = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_when_status_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_when_status_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result =  ((arg1)->when_status);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_attr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_attr *arg2 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_attr_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_attr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_attr_set" "', argument " "2"" of type '" "lyd_attr *""'"); 
  }
  arg2 = (lyd_attr *)(argp2);
  if (arg1) (arg1)->attr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_attr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_attr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_attr_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lyd_attr *) ((arg1)->attr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_attr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_next_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_next_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_next_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lyd_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_prev_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_prev_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_prev_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lyd_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_parent_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_parent_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_parent_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lyd_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_child_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_child_set" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_child_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->child = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_child_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_child_get" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lyd_node *) ((arg1)->child);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_node *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_node.");
  result = (lyd_node *)new lyd_node();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_node, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_node(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_node(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_node(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_node(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_node * arg1 = (lyd_node *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lyd_node_leaf_list_schema_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_schema_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_schema_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->schema = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_schema_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_schema_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (lys_node *) ((arg1)->schema);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_validity_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_validity_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_validity_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_leaf_list_validity_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->validity = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_validity_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_validity_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result =  ((arg1)->validity);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_dflt_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result =  ((arg1)->dflt);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_when_status_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_when_status_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_when_status_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_leaf_list_when_status_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->when_status = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_when_status_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_when_status_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result =  ((arg1)->when_status);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_attr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  lyd_attr *arg2 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_attr_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_attr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_attr_set" "', argument " "2"" of type '" "lyd_attr *""'"); 
  }
  arg2 = (lyd_attr *)(argp2);
  if (arg1) (arg1)->attr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_attr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_attr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_attr_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (lyd_attr *) ((arg1)->attr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_attr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_next_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_next_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_next_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (lyd_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_prev_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_prev_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_prev_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (lyd_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_parent_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_leaf_list_parent_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_parent_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (lyd_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_value_str_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_value_str_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (char *) ((arg1)->value_str);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_val *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_value_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (lyd_val *)& ((arg1)->value);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_value_u, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_leaf_list_value_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  LY_DATA_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_value_type_set" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyd_node_leaf_list_value_type_set" "', argument " "2"" of type '" "LY_DATA_TYPE""'");
  } 
  arg2 = (LY_DATA_TYPE)(val2);
  if (arg1) (arg1)->value_type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_leaf_list_value_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LY_DATA_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_leaf_list_value_type_get" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (LY_DATA_TYPE) ((arg1)->value_type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_node_leaf_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_node_leaf_list *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_node_leaf_list.");
  result = (lyd_node_leaf_list *)new lyd_node_leaf_list();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_node_leaf_list, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_node_leaf_list(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_node_leaf_list(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_node_leaf_list(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_node_leaf_list(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_node_leaf_list * arg1 = (lyd_node_leaf_list *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lyd_node_anyxml_value_str_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml_value *arg1 = (lyd_node_anyxml_value *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_value_str_set" "', argument " "1"" of type '" "lyd_node_anyxml_value *""'"); 
  }
  arg1 = (lyd_node_anyxml_value *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_value_str_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->str = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->str = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_value_str_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml_value *arg1 = (lyd_node_anyxml_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_value_str_get" "', argument " "1"" of type '" "lyd_node_anyxml_value *""'"); 
  }
  arg1 = (lyd_node_anyxml_value *)(argp1);
  result = (char *) ((arg1)->str);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_value_xml_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml_value *arg1 = (lyd_node_anyxml_value *) 0 ;
  lyxml_elem *arg2 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_value_xml_set" "', argument " "1"" of type '" "lyd_node_anyxml_value *""'"); 
  }
  arg1 = (lyd_node_anyxml_value *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyxml_elem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_value_xml_set" "', argument " "2"" of type '" "lyxml_elem *""'"); 
  }
  arg2 = (lyxml_elem *)(argp2);
  if (arg1) (arg1)->xml = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_value_xml_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml_value *arg1 = (lyd_node_anyxml_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyxml_elem *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_value_xml_get" "', argument " "1"" of type '" "lyd_node_anyxml_value *""'"); 
  }
  arg1 = (lyd_node_anyxml_value *)(argp1);
  result = (lyxml_elem *) ((arg1)->xml);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyxml_elem, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_node_anyxml_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_node_anyxml_value *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_node_anyxml_value.");
  result = (lyd_node_anyxml_value *)new lyd_node_anyxml_value();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_node_anyxml_value, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_node_anyxml_value(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_node_anyxml_value(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_node_anyxml_value(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_node_anyxml_value(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_node_anyxml_value * arg1 = (lyd_node_anyxml_value *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_lyd_node_anyxml_schema_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_schema_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lys_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_schema_set" "', argument " "2"" of type '" "lys_node *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  if (arg1) (arg1)->schema = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_schema_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_schema_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result = (lys_node *) ((arg1)->schema);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_validity_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_validity_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_validity_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_anyxml_validity_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->validity = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_validity_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_validity_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result =  ((arg1)->validity);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_dflt_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_dflt_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result =  ((arg1)->dflt);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_when_status_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_when_status_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_when_status_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_anyxml_when_status_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->when_status = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_when_status_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_when_status_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result =  ((arg1)->when_status);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_attr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  lyd_attr *arg2 = (lyd_attr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_attr_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_attr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_attr_set" "', argument " "2"" of type '" "lyd_attr *""'"); 
  }
  arg2 = (lyd_attr *)(argp2);
  if (arg1) (arg1)->attr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_attr_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_attr *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_attr_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result = (lyd_attr *) ((arg1)->attr);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_attr, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_next_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_next_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_next_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_next_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result = (lyd_node *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_prev_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_prev_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_prev_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->prev = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_prev_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_prev_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result = (lyd_node *) ((arg1)->prev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_parent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_parent_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_lyd_node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_parent_set" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  if (arg1) (arg1)->parent = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_parent_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_parent_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result = (lyd_node *) ((arg1)->parent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_node_anyxml_xml_struct_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_xml_struct_set" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_node_anyxml_xml_struct_set" "', argument " "2"" of type '" "uint8_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lyd_node_anyxml_xml_struct_set" "', argument " "2"" of type '" "uint8_t""'");
    } else {
      arg2 = *((uint8_t *)(argp2));
    }
  }
  if (arg1) (arg1)->xml_struct = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_xml_struct_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_xml_struct_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result =  ((arg1)->xml_struct);
  jsresult = SWIG_NewPointerObj((new uint8_t((const uint8_t&)(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_node_anyxml_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_anyxml *arg1 = (lyd_node_anyxml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node_anyxml_value *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_node_anyxml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_anyxml_value_get" "', argument " "1"" of type '" "lyd_node_anyxml *""'"); 
  }
  arg1 = (lyd_node_anyxml *)(argp1);
  result = (lyd_node_anyxml_value *)& ((arg1)->value);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node_anyxml_value, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_node_anyxml(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_node_anyxml *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_node_anyxml.");
  result = (lyd_node_anyxml *)new lyd_node_anyxml();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_node_anyxml, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_node_anyxml(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_node_anyxml(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_node_anyxml(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_node_anyxml(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_node_anyxml * arg1 = (lyd_node_anyxml *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_LYD_DIFF_END(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_DIFF_END));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_DIFF_DELETED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_DIFF_DELETED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_DIFF_CHANGED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_DIFF_CHANGED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_DIFF_MOVEDAFTER1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_DIFF_MOVEDAFTER1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_DIFF_CREATED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_DIFF_CREATED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_DIFF_MOVEDAFTER2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(LYD_DIFF_MOVEDAFTER2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_difflist_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  LYD_DIFFTYPE *arg2 = (LYD_DIFFTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_difflist_type_set" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_LYD_DIFFTYPE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_difflist_type_set" "', argument " "2"" of type '" "LYD_DIFFTYPE *""'"); 
  }
  arg2 = (LYD_DIFFTYPE *)(argp2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_difflist_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LYD_DIFFTYPE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_difflist_type_get" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  result = (LYD_DIFFTYPE *) ((arg1)->type);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LYD_DIFFTYPE, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_difflist_first_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  lyd_node **arg2 = (lyd_node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_difflist_first_set" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_difflist_first_set" "', argument " "2"" of type '" "lyd_node **""'"); 
  }
  arg2 = (lyd_node **)(argp2);
  if (arg1) (arg1)->first = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_difflist_first_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_difflist_first_get" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  result = (lyd_node **) ((arg1)->first);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_lyd_difflist_second_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  lyd_node **arg2 = (lyd_node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_difflist_second_set" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_difflist_second_set" "', argument " "2"" of type '" "lyd_node **""'"); 
  }
  arg2 = (lyd_node **)(argp2);
  if (arg1) (arg1)->second = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_lyd_difflist_second_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lyd_node **result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_difflist_second_get" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  result = (lyd_node **) ((arg1)->second);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_lyd_node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_lyd_difflist(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  lyd_difflist *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_lyd_difflist.");
  result = (lyd_difflist *)new lyd_difflist();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_lyd_difflist, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_lyd_difflist(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_lyd_difflist(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_lyd_difflist(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_lyd_difflist(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          lyd_difflist * arg1 = (lyd_difflist *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_lyd_free_diff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_difflist *arg1 = (lyd_difflist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_free_diff.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_difflist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_free_diff" "', argument " "1"" of type '" "lyd_difflist *""'"); 
  }
  arg1 = (lyd_difflist *)(argp1);
  lyd_free_diff(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_diff(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lyd_difflist *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_diff.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_diff" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_diff" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_diff" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (lyd_difflist *)lyd_diff(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_difflist, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_path.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_path" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (char *)lyd_path(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYD_OPT_DATA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x00));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_CONFIG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_GET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_GETCONFIG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_EDIT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x08));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_RPC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_RPCREPLY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_NOTIF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_TYPEMASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0xff));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_STRICT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0100));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_DESTRUCT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0200));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_OBSOLETE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0400));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_NOSIBLINGS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x0800));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_TRUSTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x1000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_NOAUTODEL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x2000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_OPT_KEEPEMPTYCONT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x4000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_WD_MASK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x1F0000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_WD_EXPLICIT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x100000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_WD_TRIM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x010000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_WD_ALL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x020000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_WD_ALL_TAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x040000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_WD_IMPL_TAG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x080000));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_parse_mem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  LYD_FORMAT arg3 ;
  int arg4 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_parse_mem.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_parse_mem" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_parse_mem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_parse_mem" "', argument " "3"" of type '" "LYD_FORMAT""'");
  } 
  arg3 = (LYD_FORMAT)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_parse_mem" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (lyd_node *)lyd_parse_mem(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_parse_fd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  int arg2 ;
  LYD_FORMAT arg3 ;
  int arg4 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_parse_fd.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_parse_fd" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyd_parse_fd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_parse_fd" "', argument " "3"" of type '" "LYD_FORMAT""'");
  } 
  arg3 = (LYD_FORMAT)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_parse_fd" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (lyd_node *)lyd_parse_fd(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_parse_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  LYD_FORMAT arg3 ;
  int arg4 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_parse_path.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_parse_path" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_parse_path" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_parse_path" "', argument " "3"" of type '" "LYD_FORMAT""'");
  } 
  arg3 = (LYD_FORMAT)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_parse_path" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (lyd_node *)lyd_parse_path(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_parse_xml(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lyxml_elem **arg2 = (lyxml_elem **) 0 ;
  int arg3 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_parse_xml.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_parse_xml" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_parse_xml" "', argument " "2"" of type '" "lyxml_elem **""'"); 
  }
  arg2 = (lyxml_elem **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_parse_xml" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (lyd_node *)lyd_parse_xml(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (lyd_node *)lyd_new(arg1,(lys_module const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_leaf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_leaf.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_leaf" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_leaf" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_leaf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_leaf" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (lyd_node *)lyd_new_leaf(arg1,(lys_module const *)arg2,(char const *)arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_change_leaf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_change_leaf.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_change_leaf" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_change_leaf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)lyd_change_leaf(arg1,(char const *)arg2);
  jsresult = SWIG_From_int((int)(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_anyxml_str(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_anyxml_str.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_anyxml_str" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_anyxml_str" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_anyxml_str" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_anyxml_str" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = (char *)(buf4);
  result = (lyd_node *)lyd_new_anyxml_str(arg1,(lys_module const *)arg2,(char const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_anyxml_xml(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  lyxml_elem *arg4 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_anyxml_xml.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_anyxml_xml" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_anyxml_xml" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_anyxml_xml" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_anyxml_xml" "', argument " "4"" of type '" "lyxml_elem *""'"); 
  }
  arg4 = (lyxml_elem *)(argp4);
  result = (lyd_node *)lyd_new_anyxml_xml(arg1,(lys_module const *)arg2,(char const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_output(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_output.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_output" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_output" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_output" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (lyd_node *)lyd_new_output(arg1,(lys_module const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_output_leaf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_output_leaf.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_output_leaf" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_output_leaf" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_output_leaf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_output_leaf" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (lyd_node *)lyd_new_output_leaf(arg1,(lys_module const *)arg2,(char const *)arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_output_anyxml_str(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_output_anyxml_str.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_output_anyxml_str" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_output_anyxml_str" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_output_anyxml_str" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_output_anyxml_str" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = (char *)(buf4);
  result = (lyd_node *)lyd_new_output_anyxml_str(arg1,(lys_module const *)arg2,(char const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_new_output_anyxml_xml(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  lyxml_elem *arg4 = (lyxml_elem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_output_anyxml_xml.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_output_anyxml_xml" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_output_anyxml_xml" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_output_anyxml_xml" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_lyxml_elem, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_output_anyxml_xml" "', argument " "4"" of type '" "lyxml_elem *""'"); 
  }
  arg4 = (lyxml_elem *)(argp4);
  result = (lyd_node *)lyd_new_output_anyxml_xml(arg1,(lys_module const *)arg2,(char const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LYD_PATH_OPT_UPDATE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x01));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_PATH_OPT_NOPARENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x02));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_LYD_PATH_OPT_OUTPUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0x04));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_lyd_new_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  ly_ctx *arg2 = (ly_ctx *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_new_path.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_new_path" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_new_path" "', argument " "2"" of type '" "ly_ctx *""'"); 
  }
  arg2 = (ly_ctx *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_new_path" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_new_path" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lyd_new_path" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  result = (lyd_node *)lyd_new_path(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_dup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  lyd_node *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_dup.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_dup" "', argument " "1"" of type '" "lyd_node const *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyd_dup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (lyd_node *)lyd_dup((lyd_node const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_node, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_merge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_merge.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_merge" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_merge" "', argument " "2"" of type '" "lyd_node const *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_merge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)lyd_merge(arg1,(lyd_node const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_insert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_insert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_insert" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_insert" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  result = (int)lyd_insert(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_insert_before(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_insert_before.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_insert_before" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_insert_before" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  result = (int)lyd_insert_before(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_insert_after(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_insert_after.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_insert_after" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_insert_after" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  result = (int)lyd_insert_after(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_schema_sort(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_schema_sort.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_schema_sort" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyd_schema_sort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)lyd_schema_sort(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_get_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ly_set *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_get_node.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_get_node" "', argument " "1"" of type '" "lyd_node const *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_get_node" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (ly_set *)lyd_get_node((lyd_node const *)arg1,(char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_set, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_get_node2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_node *arg2 = (lys_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ly_set *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_get_node2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_get_node2" "', argument " "1"" of type '" "lyd_node const *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_get_node2" "', argument " "2"" of type '" "lys_node const *""'"); 
  }
  arg2 = (lys_node *)(argp2);
  result = (ly_set *)lyd_get_node2((lyd_node const *)arg1,(lys_node const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ly_set, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_validate_leafref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node_leaf_list *arg1 = (lyd_node_leaf_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_validate_leafref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node_leaf_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_validate_leafref" "', argument " "1"" of type '" "lyd_node_leaf_list *""'"); 
  }
  arg1 = (lyd_node_leaf_list *)(argp1);
  result = (int)lyd_validate_leafref(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_validate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node **arg1 = (lyd_node **) 0 ;
  int arg2 ;
  void *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_validate.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_validate" "', argument " "1"" of type '" "lyd_node **""'"); 
  }
  arg1 = (lyd_node **)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyd_validate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)lyd_validate(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_wd_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lyd_node **arg2 = (lyd_node **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_wd_add.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_wd_add" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_wd_add" "', argument " "2"" of type '" "lyd_node **""'"); 
  }
  arg2 = (lyd_node **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_wd_add" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)lyd_wd_add(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_wd_cleanup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node **arg1 = (lyd_node **) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_wd_cleanup.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_wd_cleanup" "', argument " "1"" of type '" "lyd_node **""'"); 
  }
  arg1 = (lyd_node **)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lyd_wd_cleanup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)lyd_wd_cleanup(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_unlink(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_unlink.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_unlink" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (int)lyd_unlink(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_free(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_free.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_free" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  lyd_free(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_free_withsiblings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_free_withsiblings.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_free_withsiblings" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  lyd_free_withsiblings(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_insert_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  lys_module *arg2 = (lys_module *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  lyd_attr *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_insert_attr.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_insert_attr" "', argument " "1"" of type '" "lyd_node *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lys_module, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_insert_attr" "', argument " "2"" of type '" "lys_module const *""'"); 
  }
  arg2 = (lys_module *)(argp2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_insert_attr" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lyd_insert_attr" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (lyd_attr *)lyd_insert_attr(arg1,(lys_module const *)arg2,(char const *)arg3,(char const *)arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lyd_attr, 0 |  0 );
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_free_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  lyd_attr *arg3 = (lyd_attr *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_free_attr.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_free_attr" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_free_attr" "', argument " "2"" of type '" "lyd_node *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_lyd_attr, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_free_attr" "', argument " "3"" of type '" "lyd_attr *""'"); 
  }
  arg3 = (lyd_attr *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_free_attr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  lyd_free_attr(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_node_module(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  lyd_node *arg1 = (lyd_node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  lys_module *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_node_module.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_node_module" "', argument " "1"" of type '" "lyd_node const *""'"); 
  }
  arg1 = (lyd_node *)(argp1);
  result = (lys_module *)lyd_node_module((lyd_node const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lys_module, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_print_mem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  LYD_FORMAT arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_print_mem.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_print_mem" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = (char **)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_print_mem" "', argument " "2"" of type '" "lyd_node const *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_print_mem" "', argument " "3"" of type '" "LYD_FORMAT""'");
  } 
  arg3 = (LYD_FORMAT)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_print_mem" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)lyd_print_mem(arg1,(lyd_node const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_print_fd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  LYD_FORMAT arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_print_fd.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lyd_print_fd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_print_fd" "', argument " "2"" of type '" "lyd_node const *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_print_fd" "', argument " "3"" of type '" "LYD_FORMAT""'");
  } 
  arg3 = (LYD_FORMAT)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_print_fd" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)lyd_print_fd(arg1,(lyd_node const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_print_file(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FILE *arg1 = (FILE *) 0 ;
  lyd_node *arg2 = (lyd_node *) 0 ;
  LYD_FORMAT arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_print_file.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lyd_print_file" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = (FILE *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_print_file" "', argument " "2"" of type '" "lyd_node const *""'"); 
  }
  arg2 = (lyd_node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lyd_print_file" "', argument " "3"" of type '" "LYD_FORMAT""'");
  } 
  arg3 = (LYD_FORMAT)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_print_file" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)lyd_print_file(arg1,(lyd_node const *)arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lyd_print_clb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ssize_t (*arg1)(void *,void const *,size_t) = (ssize_t (*)(void *,void const *,size_t)) 0 ;
  void *arg2 = (void *) 0 ;
  lyd_node *arg3 = (lyd_node *) 0 ;
  LYD_FORMAT arg4 ;
  int arg5 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lyd_print_clb.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p_void_p_q_const__void_size_t__ssize_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "lyd_print_clb" "', argument " "1"" of type '" "ssize_t (*)(void *,void const *,size_t)""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lyd_print_clb" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_lyd_node, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lyd_print_clb" "', argument " "3"" of type '" "lyd_node const *""'"); 
  }
  arg3 = (lyd_node *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lyd_print_clb" "', argument " "4"" of type '" "LYD_FORMAT""'");
  } 
  arg4 = (LYD_FORMAT)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lyd_print_clb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  result = (int)lyd_print_clb(arg1,arg2,(lyd_node const *)arg3,arg4,arg5);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lydict_insert(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lydict_insert.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lydict_insert" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lydict_insert" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lydict_insert" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = (char *)lydict_insert(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lydict_insert_zc(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lydict_insert_zc.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lydict_insert_zc" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lydict_insert_zc" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  result = (char *)lydict_insert_zc(arg1,arg2);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lydict_remove(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lydict_remove.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lydict_remove" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lydict_remove" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  lydict_remove(arg1,(char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ly_ctx_destroy__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ly_ctx *arg1 = (ly_ctx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ly_ctx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ly_ctx_destroy" "', argument " "1"" of type '" "ly_ctx *""'"); 
  }
  arg1 = (ly_ctx *)(argp1);
  ly_ctx_destroy(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap___wrap_ly_ctx_destroy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ly_ctx_destroy__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ly_ctx_destroy__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ly_ctx_destroy__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ly_ctx_destroy__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ly_ctx_destroy.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LYD_DIFFTYPE = {"_p_LYD_DIFFTYPE", "enum LYD_DIFFTYPE *|LYD_DIFFTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LYD_FORMAT = {"_p_LYD_FORMAT", "enum LYD_FORMAT *|LYD_FORMAT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LYS_INFORMAT = {"_p_LYS_INFORMAT", "enum LYS_INFORMAT *|LYS_INFORMAT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LYS_OUTFORMAT = {"_p_LYS_OUTFORMAT", "enum LYS_OUTFORMAT *|LYS_OUTFORMAT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LY_DATA_TYPE = {"_p_LY_DATA_TYPE", "enum LY_DATA_TYPE *|LY_DATA_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LY_ERR = {"_p_LY_ERR", "enum LY_ERR *|LY_ERR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LY_LOG_LEVEL = {"_p_LY_LOG_LEVEL", "enum LY_LOG_LEVEL *|LY_LOG_LEVEL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LY_VECODE = {"_p_LY_VECODE", "enum LY_VECODE *|LY_VECODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void = {"_p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void", "void (*)(enum LY_LOG_LEVEL,char const *,char const *)|void (*)(LY_LOG_LEVEL,char const *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char = {"_p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char", "char *(*)(char const *,char const *,void *,enum LYS_INFORMAT *,void (**)(void *))|ly_module_clb", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__lys_node_p_void__void = {"_p_f_p_q_const__lys_node_p_void__void", "void (*)(lys_node const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__void_size_t__ssize_t = {"_p_f_p_void_p_q_const__void_size_t__ssize_t", "ssize_t (*)(void *,void const *,size_t)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ly_ctx = {"_p_ly_ctx", "ly_ctx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ly_set = {"_p_ly_set", "p_ly_set|ly_set *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ly_set_set = {"_p_ly_set_set", "ly_set_set *|p_ly_set_set", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_attr = {"_p_lyd_attr", "lyd_attr *|p_lyd_attr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_difflist = {"_p_lyd_difflist", "lyd_difflist *|p_lyd_difflist", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_node = {"_p_lyd_node", "p_lyd_node|lyd_node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_node_anyxml = {"_p_lyd_node_anyxml", "p_lyd_node_anyxml|lyd_node_anyxml *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_node_anyxml_value = {"_p_lyd_node_anyxml_value", "lyd_node_anyxml_value *|p_lyd_node_anyxml_value", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_node_leaf_list = {"_p_lyd_node_leaf_list", "lyd_node_leaf_list *|p_lyd_node_leaf_list", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyd_value_u = {"_p_lyd_value_u", "lyd_value_u *|lyd_val *|p_lyd_value_u", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_deviate = {"_p_lys_deviate", "p_lys_deviate|lys_deviate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_deviate_type = {"_p_lys_deviate_type", "enum lys_deviate_type *|LYS_DEVIATE_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_deviation = {"_p_lys_deviation", "lys_deviation *|p_lys_deviation", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_feature = {"_p_lys_feature", "lys_feature *|p_lys_feature", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_ident = {"_p_lys_ident", "lys_ident *|p_lys_ident", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_import = {"_p_lys_import", "p_lys_import|lys_import *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_include = {"_p_lys_include", "p_lys_include|lys_include *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_module = {"_p_lys_module", "p_lys_module|lys_module *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node = {"_p_lys_node", "p_lys_node|lys_node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_anyxml = {"_p_lys_node_anyxml", "p_lys_node_anyxml|lys_node_anyxml *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_augment = {"_p_lys_node_augment", "lys_node_augment *|p_lys_node_augment", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_case = {"_p_lys_node_case", "lys_node_case *|p_lys_node_case", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_choice = {"_p_lys_node_choice", "p_lys_node_choice|lys_node_choice *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_container = {"_p_lys_node_container", "lys_node_container *|p_lys_node_container", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_grp = {"_p_lys_node_grp", "p_lys_node_grp|lys_node_grp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_leaf = {"_p_lys_node_leaf", "p_lys_node_leaf|lys_node_leaf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_leaflist = {"_p_lys_node_leaflist", "p_lys_node_leaflist|lys_node_leaflist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_list = {"_p_lys_node_list", "lys_node_list *|p_lys_node_list", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_notif = {"_p_lys_node_notif", "lys_node_notif *|p_lys_node_notif", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_rpc = {"_p_lys_node_rpc", "p_lys_node_rpc|lys_node_rpc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_rpc_inout = {"_p_lys_node_rpc_inout", "lys_node_rpc_inout *|p_lys_node_rpc_inout", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_node_uses = {"_p_lys_node_uses", "lys_node_uses *|p_lys_node_uses", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_nodetype = {"_p_lys_nodetype", "enum lys_nodetype *|LYS_NODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_refine = {"_p_lys_refine", "lys_refine *|p_lys_refine", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_refine_mod = {"_p_lys_refine_mod", "p_lys_refine_mod|lys_refine_mod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_refine_mod_list = {"_p_lys_refine_mod_list", "p_lys_refine_mod_list|lys_refine_mod_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_restr = {"_p_lys_restr", "lys_restr *|p_lys_restr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_revision = {"_p_lys_revision", "lys_revision *|p_lys_revision", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_submodule = {"_p_lys_submodule", "p_lys_submodule|lys_submodule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_tpdf = {"_p_lys_tpdf", "p_lys_tpdf|lys_tpdf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type = {"_p_lys_type", "lys_type *|p_lys_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_bit = {"_p_lys_type_bit", "lys_type_bit *|p_lys_type_bit", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_enum = {"_p_lys_type_enum", "p_lys_type_enum|lys_type_enum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info = {"_p_lys_type_info", "lys_type_info *|p_lys_type_info", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_binary = {"_p_lys_type_info_binary", "p_lys_type_info_binary|lys_type_info_binary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_bits = {"_p_lys_type_info_bits", "lys_type_info_bits *|p_lys_type_info_bits", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_dec64 = {"_p_lys_type_info_dec64", "lys_type_info_dec64 *|p_lys_type_info_dec64", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_enums = {"_p_lys_type_info_enums", "p_lys_type_info_enums|lys_type_info_enums *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_ident = {"_p_lys_type_info_ident", "lys_type_info_ident *|p_lys_type_info_ident", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_inst = {"_p_lys_type_info_inst", "lys_type_info_inst *|p_lys_type_info_inst", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_lref = {"_p_lys_type_info_lref", "p_lys_type_info_lref|lys_type_info_lref *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_num = {"_p_lys_type_info_num", "lys_type_info_num *|p_lys_type_info_num", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_str = {"_p_lys_type_info_str", "p_lys_type_info_str|lys_type_info_str *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_type_info_union = {"_p_lys_type_info_union", "p_lys_type_info_union|lys_type_info_union *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_unique = {"_p_lys_unique", "lys_unique *|p_lys_unique", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lys_when = {"_p_lys_when", "lys_when *|p_lys_when", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyxml_attr = {"_p_lyxml_attr", "lyxml_attr *|p_lyxml_attr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyxml_attr_type = {"_p_lyxml_attr_type", "enum lyxml_attr_type *|LYXML_ATTR_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyxml_elem = {"_p_lyxml_elem", "lyxml_elem *|p_lyxml_elem", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lyxml_ns = {"_p_lyxml_ns", "p_lyxml_ns|lyxml_ns *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lyd_node = {"_p_p_lyd_node", "lyd_node **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lys_feature = {"_p_p_lys_feature", "lys_feature **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lys_ident = {"_p_p_lys_ident", "lys_ident **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lys_node = {"_p_p_lys_node", "lys_node **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lys_node_leaf = {"_p_p_lys_node_leaf", "lys_node_leaf **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lys_type_bit = {"_p_p_lys_type_bit", "lys_type_bit **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_lyxml_elem = {"_p_p_lyxml_elem", "lyxml_elem **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_uint8_t = {"_p_p_uint8_t", "uint8_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_LYD_DIFFTYPE,
  &_swigt__p_LYD_FORMAT,
  &_swigt__p_LYS_INFORMAT,
  &_swigt__p_LYS_OUTFORMAT,
  &_swigt__p_LY_DATA_TYPE,
  &_swigt__p_LY_ERR,
  &_swigt__p_LY_LOG_LEVEL,
  &_swigt__p_LY_VECODE,
  &_swigt__p_char,
  &_swigt__p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void,
  &_swigt__p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char,
  &_swigt__p_f_p_q_const__lys_node_p_void__void,
  &_swigt__p_f_p_void_p_q_const__void_size_t__ssize_t,
  &_swigt__p_int16_t,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_int8_t,
  &_swigt__p_ly_ctx,
  &_swigt__p_ly_set,
  &_swigt__p_ly_set_set,
  &_swigt__p_lyd_attr,
  &_swigt__p_lyd_difflist,
  &_swigt__p_lyd_node,
  &_swigt__p_lyd_node_anyxml,
  &_swigt__p_lyd_node_anyxml_value,
  &_swigt__p_lyd_node_leaf_list,
  &_swigt__p_lyd_value_u,
  &_swigt__p_lys_deviate,
  &_swigt__p_lys_deviate_type,
  &_swigt__p_lys_deviation,
  &_swigt__p_lys_feature,
  &_swigt__p_lys_ident,
  &_swigt__p_lys_import,
  &_swigt__p_lys_include,
  &_swigt__p_lys_module,
  &_swigt__p_lys_node,
  &_swigt__p_lys_node_anyxml,
  &_swigt__p_lys_node_augment,
  &_swigt__p_lys_node_case,
  &_swigt__p_lys_node_choice,
  &_swigt__p_lys_node_container,
  &_swigt__p_lys_node_grp,
  &_swigt__p_lys_node_leaf,
  &_swigt__p_lys_node_leaflist,
  &_swigt__p_lys_node_list,
  &_swigt__p_lys_node_notif,
  &_swigt__p_lys_node_rpc,
  &_swigt__p_lys_node_rpc_inout,
  &_swigt__p_lys_node_uses,
  &_swigt__p_lys_nodetype,
  &_swigt__p_lys_refine,
  &_swigt__p_lys_refine_mod,
  &_swigt__p_lys_refine_mod_list,
  &_swigt__p_lys_restr,
  &_swigt__p_lys_revision,
  &_swigt__p_lys_submodule,
  &_swigt__p_lys_tpdf,
  &_swigt__p_lys_type,
  &_swigt__p_lys_type_bit,
  &_swigt__p_lys_type_enum,
  &_swigt__p_lys_type_info,
  &_swigt__p_lys_type_info_binary,
  &_swigt__p_lys_type_info_bits,
  &_swigt__p_lys_type_info_dec64,
  &_swigt__p_lys_type_info_enums,
  &_swigt__p_lys_type_info_ident,
  &_swigt__p_lys_type_info_inst,
  &_swigt__p_lys_type_info_lref,
  &_swigt__p_lys_type_info_num,
  &_swigt__p_lys_type_info_str,
  &_swigt__p_lys_type_info_union,
  &_swigt__p_lys_unique,
  &_swigt__p_lys_when,
  &_swigt__p_lyxml_attr,
  &_swigt__p_lyxml_attr_type,
  &_swigt__p_lyxml_elem,
  &_swigt__p_lyxml_ns,
  &_swigt__p_p_char,
  &_swigt__p_p_lyd_node,
  &_swigt__p_p_lys_feature,
  &_swigt__p_p_lys_ident,
  &_swigt__p_p_lys_node,
  &_swigt__p_p_lys_node_leaf,
  &_swigt__p_p_lys_type_bit,
  &_swigt__p_p_lyxml_elem,
  &_swigt__p_p_uint8_t,
  &_swigt__p_p_void,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LYD_DIFFTYPE[] = {  {&_swigt__p_LYD_DIFFTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LYD_FORMAT[] = {  {&_swigt__p_LYD_FORMAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LYS_INFORMAT[] = {  {&_swigt__p_LYS_INFORMAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LYS_OUTFORMAT[] = {  {&_swigt__p_LYS_OUTFORMAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LY_DATA_TYPE[] = {  {&_swigt__p_LY_DATA_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LY_ERR[] = {  {&_swigt__p_LY_ERR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LY_LOG_LEVEL[] = {  {&_swigt__p_LY_LOG_LEVEL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LY_VECODE[] = {  {&_swigt__p_LY_VECODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void[] = {  {&_swigt__p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char[] = {  {&_swigt__p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__lys_node_p_void__void[] = {  {&_swigt__p_f_p_q_const__lys_node_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__void_size_t__ssize_t[] = {  {&_swigt__p_f_p_void_p_q_const__void_size_t__ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ly_ctx[] = {  {&_swigt__p_ly_ctx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ly_set[] = {  {&_swigt__p_ly_set, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ly_set_set[] = {  {&_swigt__p_ly_set_set, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_attr[] = {  {&_swigt__p_lyd_attr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_difflist[] = {  {&_swigt__p_lyd_difflist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_node[] = {  {&_swigt__p_lyd_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_node_anyxml[] = {  {&_swigt__p_lyd_node_anyxml, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_node_anyxml_value[] = {  {&_swigt__p_lyd_node_anyxml_value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_node_leaf_list[] = {  {&_swigt__p_lyd_node_leaf_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyd_value_u[] = {  {&_swigt__p_lyd_value_u, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_deviate[] = {  {&_swigt__p_lys_deviate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_deviate_type[] = {  {&_swigt__p_lys_deviate_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_deviation[] = {  {&_swigt__p_lys_deviation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_feature[] = {  {&_swigt__p_lys_feature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_ident[] = {  {&_swigt__p_lys_ident, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_import[] = {  {&_swigt__p_lys_import, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_include[] = {  {&_swigt__p_lys_include, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_module[] = {  {&_swigt__p_lys_module, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node[] = {  {&_swigt__p_lys_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_anyxml[] = {  {&_swigt__p_lys_node_anyxml, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_augment[] = {  {&_swigt__p_lys_node_augment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_case[] = {  {&_swigt__p_lys_node_case, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_choice[] = {  {&_swigt__p_lys_node_choice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_container[] = {  {&_swigt__p_lys_node_container, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_grp[] = {  {&_swigt__p_lys_node_grp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_leaf[] = {  {&_swigt__p_lys_node_leaf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_leaflist[] = {  {&_swigt__p_lys_node_leaflist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_list[] = {  {&_swigt__p_lys_node_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_notif[] = {  {&_swigt__p_lys_node_notif, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_rpc[] = {  {&_swigt__p_lys_node_rpc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_rpc_inout[] = {  {&_swigt__p_lys_node_rpc_inout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_node_uses[] = {  {&_swigt__p_lys_node_uses, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_nodetype[] = {  {&_swigt__p_lys_nodetype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_refine[] = {  {&_swigt__p_lys_refine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_refine_mod[] = {  {&_swigt__p_lys_refine_mod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_refine_mod_list[] = {  {&_swigt__p_lys_refine_mod_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_restr[] = {  {&_swigt__p_lys_restr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_revision[] = {  {&_swigt__p_lys_revision, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_submodule[] = {  {&_swigt__p_lys_submodule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_tpdf[] = {  {&_swigt__p_lys_tpdf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type[] = {  {&_swigt__p_lys_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_bit[] = {  {&_swigt__p_lys_type_bit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_enum[] = {  {&_swigt__p_lys_type_enum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info[] = {  {&_swigt__p_lys_type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_binary[] = {  {&_swigt__p_lys_type_info_binary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_bits[] = {  {&_swigt__p_lys_type_info_bits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_dec64[] = {  {&_swigt__p_lys_type_info_dec64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_enums[] = {  {&_swigt__p_lys_type_info_enums, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_ident[] = {  {&_swigt__p_lys_type_info_ident, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_inst[] = {  {&_swigt__p_lys_type_info_inst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_lref[] = {  {&_swigt__p_lys_type_info_lref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_num[] = {  {&_swigt__p_lys_type_info_num, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_str[] = {  {&_swigt__p_lys_type_info_str, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_type_info_union[] = {  {&_swigt__p_lys_type_info_union, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_unique[] = {  {&_swigt__p_lys_unique, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lys_when[] = {  {&_swigt__p_lys_when, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyxml_attr[] = {  {&_swigt__p_lyxml_attr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyxml_attr_type[] = {  {&_swigt__p_lyxml_attr_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyxml_elem[] = {  {&_swigt__p_lyxml_elem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lyxml_ns[] = {  {&_swigt__p_lyxml_ns, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lyd_node[] = {  {&_swigt__p_p_lyd_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lys_feature[] = {  {&_swigt__p_p_lys_feature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lys_ident[] = {  {&_swigt__p_p_lys_ident, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lys_node[] = {  {&_swigt__p_p_lys_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lys_node_leaf[] = {  {&_swigt__p_p_lys_node_leaf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lys_type_bit[] = {  {&_swigt__p_p_lys_type_bit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_lyxml_elem[] = {  {&_swigt__p_p_lyxml_elem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_uint8_t[] = {  {&_swigt__p_p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_LYD_DIFFTYPE,
  _swigc__p_LYD_FORMAT,
  _swigc__p_LYS_INFORMAT,
  _swigc__p_LYS_OUTFORMAT,
  _swigc__p_LY_DATA_TYPE,
  _swigc__p_LY_ERR,
  _swigc__p_LY_LOG_LEVEL,
  _swigc__p_LY_VECODE,
  _swigc__p_char,
  _swigc__p_f_enum_LY_LOG_LEVEL_p_q_const__char_p_q_const__char__void,
  _swigc__p_f_p_q_const__char_p_q_const__char_p_void_p_enum_LYS_INFORMAT_p_p_f_p_void__void__p_char,
  _swigc__p_f_p_q_const__lys_node_p_void__void,
  _swigc__p_f_p_void_p_q_const__void_size_t__ssize_t,
  _swigc__p_int16_t,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_int8_t,
  _swigc__p_ly_ctx,
  _swigc__p_ly_set,
  _swigc__p_ly_set_set,
  _swigc__p_lyd_attr,
  _swigc__p_lyd_difflist,
  _swigc__p_lyd_node,
  _swigc__p_lyd_node_anyxml,
  _swigc__p_lyd_node_anyxml_value,
  _swigc__p_lyd_node_leaf_list,
  _swigc__p_lyd_value_u,
  _swigc__p_lys_deviate,
  _swigc__p_lys_deviate_type,
  _swigc__p_lys_deviation,
  _swigc__p_lys_feature,
  _swigc__p_lys_ident,
  _swigc__p_lys_import,
  _swigc__p_lys_include,
  _swigc__p_lys_module,
  _swigc__p_lys_node,
  _swigc__p_lys_node_anyxml,
  _swigc__p_lys_node_augment,
  _swigc__p_lys_node_case,
  _swigc__p_lys_node_choice,
  _swigc__p_lys_node_container,
  _swigc__p_lys_node_grp,
  _swigc__p_lys_node_leaf,
  _swigc__p_lys_node_leaflist,
  _swigc__p_lys_node_list,
  _swigc__p_lys_node_notif,
  _swigc__p_lys_node_rpc,
  _swigc__p_lys_node_rpc_inout,
  _swigc__p_lys_node_uses,
  _swigc__p_lys_nodetype,
  _swigc__p_lys_refine,
  _swigc__p_lys_refine_mod,
  _swigc__p_lys_refine_mod_list,
  _swigc__p_lys_restr,
  _swigc__p_lys_revision,
  _swigc__p_lys_submodule,
  _swigc__p_lys_tpdf,
  _swigc__p_lys_type,
  _swigc__p_lys_type_bit,
  _swigc__p_lys_type_enum,
  _swigc__p_lys_type_info,
  _swigc__p_lys_type_info_binary,
  _swigc__p_lys_type_info_bits,
  _swigc__p_lys_type_info_dec64,
  _swigc__p_lys_type_info_enums,
  _swigc__p_lys_type_info_ident,
  _swigc__p_lys_type_info_inst,
  _swigc__p_lys_type_info_lref,
  _swigc__p_lys_type_info_num,
  _swigc__p_lys_type_info_str,
  _swigc__p_lys_type_info_union,
  _swigc__p_lys_unique,
  _swigc__p_lys_when,
  _swigc__p_lyxml_attr,
  _swigc__p_lyxml_attr_type,
  _swigc__p_lyxml_elem,
  _swigc__p_lyxml_ns,
  _swigc__p_p_char,
  _swigc__p_p_lyd_node,
  _swigc__p_p_lys_feature,
  _swigc__p_p_lys_ident,
  _swigc__p_p_lys_node,
  _swigc__p_p_lys_node_leaf,
  _swigc__p_p_lys_type_bit,
  _swigc__p_p_lyxml_elem,
  _swigc__p_p_uint8_t,
  _swigc__p_p_void,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_uint8_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_ly_set_set, Type: p_ly_set_set, Dtor: _wrap_delete_ly_set_set */
v8::Handle<v8::FunctionTemplate> _exports_ly_set_set_class = SWIGV8_CreateClassTemplate("_exports_ly_set_set");
SWIGV8_SET_CLASS_TEMPL(_exports_ly_set_set_clientData.class_templ, _exports_ly_set_set_class);
_exports_ly_set_set_clientData.dtor = _wrap_delete_ly_set_set;
if (SWIGTYPE_p_ly_set_set->clientdata == 0) {
  SWIGTYPE_p_ly_set_set->clientdata = &_exports_ly_set_set_clientData;
}
/* Name: _exports_ly_set, Type: p_ly_set, Dtor: _wrap_delete_ly_set */
v8::Handle<v8::FunctionTemplate> _exports_ly_set_class = SWIGV8_CreateClassTemplate("_exports_ly_set");
SWIGV8_SET_CLASS_TEMPL(_exports_ly_set_clientData.class_templ, _exports_ly_set_class);
_exports_ly_set_clientData.dtor = _wrap_delete_ly_set;
if (SWIGTYPE_p_ly_set->clientdata == 0) {
  SWIGTYPE_p_ly_set->clientdata = &_exports_ly_set_clientData;
}
/* Name: _exports_lyxml_ns, Type: p_lyxml_ns, Dtor: _wrap_delete_lyxml_ns */
v8::Handle<v8::FunctionTemplate> _exports_lyxml_ns_class = SWIGV8_CreateClassTemplate("_exports_lyxml_ns");
SWIGV8_SET_CLASS_TEMPL(_exports_lyxml_ns_clientData.class_templ, _exports_lyxml_ns_class);
_exports_lyxml_ns_clientData.dtor = _wrap_delete_lyxml_ns;
if (SWIGTYPE_p_lyxml_ns->clientdata == 0) {
  SWIGTYPE_p_lyxml_ns->clientdata = &_exports_lyxml_ns_clientData;
}
/* Name: _exports_lyxml_attr, Type: p_lyxml_attr, Dtor: _wrap_delete_lyxml_attr */
v8::Handle<v8::FunctionTemplate> _exports_lyxml_attr_class = SWIGV8_CreateClassTemplate("_exports_lyxml_attr");
SWIGV8_SET_CLASS_TEMPL(_exports_lyxml_attr_clientData.class_templ, _exports_lyxml_attr_class);
_exports_lyxml_attr_clientData.dtor = _wrap_delete_lyxml_attr;
if (SWIGTYPE_p_lyxml_attr->clientdata == 0) {
  SWIGTYPE_p_lyxml_attr->clientdata = &_exports_lyxml_attr_clientData;
}
/* Name: _exports_lyxml_elem, Type: p_lyxml_elem, Dtor: _wrap_delete_lyxml_elem */
v8::Handle<v8::FunctionTemplate> _exports_lyxml_elem_class = SWIGV8_CreateClassTemplate("_exports_lyxml_elem");
SWIGV8_SET_CLASS_TEMPL(_exports_lyxml_elem_clientData.class_templ, _exports_lyxml_elem_class);
_exports_lyxml_elem_clientData.dtor = _wrap_delete_lyxml_elem;
if (SWIGTYPE_p_lyxml_elem->clientdata == 0) {
  SWIGTYPE_p_lyxml_elem->clientdata = &_exports_lyxml_elem_clientData;
}
/* Name: _exports_lys_module, Type: p_lys_module, Dtor: _wrap_delete_lys_module */
v8::Handle<v8::FunctionTemplate> _exports_lys_module_class = SWIGV8_CreateClassTemplate("_exports_lys_module");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_module_clientData.class_templ, _exports_lys_module_class);
_exports_lys_module_clientData.dtor = _wrap_delete_lys_module;
if (SWIGTYPE_p_lys_module->clientdata == 0) {
  SWIGTYPE_p_lys_module->clientdata = &_exports_lys_module_clientData;
}
/* Name: _exports_lys_submodule, Type: p_lys_submodule, Dtor: _wrap_delete_lys_submodule */
v8::Handle<v8::FunctionTemplate> _exports_lys_submodule_class = SWIGV8_CreateClassTemplate("_exports_lys_submodule");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_submodule_clientData.class_templ, _exports_lys_submodule_class);
_exports_lys_submodule_clientData.dtor = _wrap_delete_lys_submodule;
if (SWIGTYPE_p_lys_submodule->clientdata == 0) {
  SWIGTYPE_p_lys_submodule->clientdata = &_exports_lys_submodule_clientData;
}
/* Name: _exports_lys_type_info_binary, Type: p_lys_type_info_binary, Dtor: _wrap_delete_lys_type_info_binary */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_binary_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_binary");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_binary_clientData.class_templ, _exports_lys_type_info_binary_class);
_exports_lys_type_info_binary_clientData.dtor = _wrap_delete_lys_type_info_binary;
if (SWIGTYPE_p_lys_type_info_binary->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_binary->clientdata = &_exports_lys_type_info_binary_clientData;
}
/* Name: _exports_lys_type_bit, Type: p_lys_type_bit, Dtor: _wrap_delete_lys_type_bit */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_bit_class = SWIGV8_CreateClassTemplate("_exports_lys_type_bit");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_bit_clientData.class_templ, _exports_lys_type_bit_class);
_exports_lys_type_bit_clientData.dtor = _wrap_delete_lys_type_bit;
if (SWIGTYPE_p_lys_type_bit->clientdata == 0) {
  SWIGTYPE_p_lys_type_bit->clientdata = &_exports_lys_type_bit_clientData;
}
/* Name: _exports_lys_type_info_bits, Type: p_lys_type_info_bits, Dtor: _wrap_delete_lys_type_info_bits */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_bits_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_bits");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_bits_clientData.class_templ, _exports_lys_type_info_bits_class);
_exports_lys_type_info_bits_clientData.dtor = _wrap_delete_lys_type_info_bits;
if (SWIGTYPE_p_lys_type_info_bits->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_bits->clientdata = &_exports_lys_type_info_bits_clientData;
}
/* Name: _exports_lys_type_info_dec64, Type: p_lys_type_info_dec64, Dtor: _wrap_delete_lys_type_info_dec64 */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_dec64_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_dec64");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_dec64_clientData.class_templ, _exports_lys_type_info_dec64_class);
_exports_lys_type_info_dec64_clientData.dtor = _wrap_delete_lys_type_info_dec64;
if (SWIGTYPE_p_lys_type_info_dec64->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_dec64->clientdata = &_exports_lys_type_info_dec64_clientData;
}
/* Name: _exports_lys_type_enum, Type: p_lys_type_enum, Dtor: _wrap_delete_lys_type_enum */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_enum_class = SWIGV8_CreateClassTemplate("_exports_lys_type_enum");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_enum_clientData.class_templ, _exports_lys_type_enum_class);
_exports_lys_type_enum_clientData.dtor = _wrap_delete_lys_type_enum;
if (SWIGTYPE_p_lys_type_enum->clientdata == 0) {
  SWIGTYPE_p_lys_type_enum->clientdata = &_exports_lys_type_enum_clientData;
}
/* Name: _exports_lys_type_info_enums, Type: p_lys_type_info_enums, Dtor: _wrap_delete_lys_type_info_enums */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_enums_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_enums");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_enums_clientData.class_templ, _exports_lys_type_info_enums_class);
_exports_lys_type_info_enums_clientData.dtor = _wrap_delete_lys_type_info_enums;
if (SWIGTYPE_p_lys_type_info_enums->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_enums->clientdata = &_exports_lys_type_info_enums_clientData;
}
/* Name: _exports_lys_type_info_ident, Type: p_lys_type_info_ident, Dtor: _wrap_delete_lys_type_info_ident */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_ident_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_ident");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_ident_clientData.class_templ, _exports_lys_type_info_ident_class);
_exports_lys_type_info_ident_clientData.dtor = _wrap_delete_lys_type_info_ident;
if (SWIGTYPE_p_lys_type_info_ident->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_ident->clientdata = &_exports_lys_type_info_ident_clientData;
}
/* Name: _exports_lys_type_info_inst, Type: p_lys_type_info_inst, Dtor: _wrap_delete_lys_type_info_inst */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_inst_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_inst");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_inst_clientData.class_templ, _exports_lys_type_info_inst_class);
_exports_lys_type_info_inst_clientData.dtor = _wrap_delete_lys_type_info_inst;
if (SWIGTYPE_p_lys_type_info_inst->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_inst->clientdata = &_exports_lys_type_info_inst_clientData;
}
/* Name: _exports_lys_type_info_num, Type: p_lys_type_info_num, Dtor: _wrap_delete_lys_type_info_num */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_num_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_num");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_num_clientData.class_templ, _exports_lys_type_info_num_class);
_exports_lys_type_info_num_clientData.dtor = _wrap_delete_lys_type_info_num;
if (SWIGTYPE_p_lys_type_info_num->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_num->clientdata = &_exports_lys_type_info_num_clientData;
}
/* Name: _exports_lys_type_info_lref, Type: p_lys_type_info_lref, Dtor: _wrap_delete_lys_type_info_lref */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_lref_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_lref");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_lref_clientData.class_templ, _exports_lys_type_info_lref_class);
_exports_lys_type_info_lref_clientData.dtor = _wrap_delete_lys_type_info_lref;
if (SWIGTYPE_p_lys_type_info_lref->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_lref->clientdata = &_exports_lys_type_info_lref_clientData;
}
/* Name: _exports_lys_type_info_str, Type: p_lys_type_info_str, Dtor: _wrap_delete_lys_type_info_str */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_str_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_str");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_str_clientData.class_templ, _exports_lys_type_info_str_class);
_exports_lys_type_info_str_clientData.dtor = _wrap_delete_lys_type_info_str;
if (SWIGTYPE_p_lys_type_info_str->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_str->clientdata = &_exports_lys_type_info_str_clientData;
}
/* Name: _exports_lys_type_info_union, Type: p_lys_type_info_union, Dtor: _wrap_delete_lys_type_info_union */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_union_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info_union");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_union_clientData.class_templ, _exports_lys_type_info_union_class);
_exports_lys_type_info_union_clientData.dtor = _wrap_delete_lys_type_info_union;
if (SWIGTYPE_p_lys_type_info_union->clientdata == 0) {
  SWIGTYPE_p_lys_type_info_union->clientdata = &_exports_lys_type_info_union_clientData;
}
/* Name: _exports_lys_type_info, Type: p_lys_type_info, Dtor: _wrap_delete_lys_type_info */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_class = SWIGV8_CreateClassTemplate("_exports_lys_type_info");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_info_clientData.class_templ, _exports_lys_type_info_class);
_exports_lys_type_info_clientData.dtor = _wrap_delete_lys_type_info;
if (SWIGTYPE_p_lys_type_info->clientdata == 0) {
  SWIGTYPE_p_lys_type_info->clientdata = &_exports_lys_type_info_clientData;
}
/* Name: _exports_lys_type, Type: p_lys_type, Dtor: _wrap_delete_lys_type */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_class = SWIGV8_CreateClassTemplate("_exports_lys_type");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_type_clientData.class_templ, _exports_lys_type_class);
_exports_lys_type_clientData.dtor = _wrap_delete_lys_type;
if (SWIGTYPE_p_lys_type->clientdata == 0) {
  SWIGTYPE_p_lys_type->clientdata = &_exports_lys_type_clientData;
}
/* Name: _exports_lys_node, Type: p_lys_node, Dtor: _wrap_delete_lys_node */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_class = SWIGV8_CreateClassTemplate("_exports_lys_node");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_clientData.class_templ, _exports_lys_node_class);
_exports_lys_node_clientData.dtor = _wrap_delete_lys_node;
if (SWIGTYPE_p_lys_node->clientdata == 0) {
  SWIGTYPE_p_lys_node->clientdata = &_exports_lys_node_clientData;
}
/* Name: _exports_lys_node_container, Type: p_lys_node_container, Dtor: _wrap_delete_lys_node_container */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_container_class = SWIGV8_CreateClassTemplate("_exports_lys_node_container");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_container_clientData.class_templ, _exports_lys_node_container_class);
_exports_lys_node_container_clientData.dtor = _wrap_delete_lys_node_container;
if (SWIGTYPE_p_lys_node_container->clientdata == 0) {
  SWIGTYPE_p_lys_node_container->clientdata = &_exports_lys_node_container_clientData;
}
/* Name: _exports_lys_node_choice, Type: p_lys_node_choice, Dtor: _wrap_delete_lys_node_choice */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_choice_class = SWIGV8_CreateClassTemplate("_exports_lys_node_choice");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_choice_clientData.class_templ, _exports_lys_node_choice_class);
_exports_lys_node_choice_clientData.dtor = _wrap_delete_lys_node_choice;
if (SWIGTYPE_p_lys_node_choice->clientdata == 0) {
  SWIGTYPE_p_lys_node_choice->clientdata = &_exports_lys_node_choice_clientData;
}
/* Name: _exports_lys_node_leaf, Type: p_lys_node_leaf, Dtor: _wrap_delete_lys_node_leaf */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_leaf_class = SWIGV8_CreateClassTemplate("_exports_lys_node_leaf");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_leaf_clientData.class_templ, _exports_lys_node_leaf_class);
_exports_lys_node_leaf_clientData.dtor = _wrap_delete_lys_node_leaf;
if (SWIGTYPE_p_lys_node_leaf->clientdata == 0) {
  SWIGTYPE_p_lys_node_leaf->clientdata = &_exports_lys_node_leaf_clientData;
}
/* Name: _exports_lys_node_leaflist, Type: p_lys_node_leaflist, Dtor: _wrap_delete_lys_node_leaflist */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_leaflist_class = SWIGV8_CreateClassTemplate("_exports_lys_node_leaflist");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_leaflist_clientData.class_templ, _exports_lys_node_leaflist_class);
_exports_lys_node_leaflist_clientData.dtor = _wrap_delete_lys_node_leaflist;
if (SWIGTYPE_p_lys_node_leaflist->clientdata == 0) {
  SWIGTYPE_p_lys_node_leaflist->clientdata = &_exports_lys_node_leaflist_clientData;
}
/* Name: _exports_lys_node_list, Type: p_lys_node_list, Dtor: _wrap_delete_lys_node_list */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_list_class = SWIGV8_CreateClassTemplate("_exports_lys_node_list");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_list_clientData.class_templ, _exports_lys_node_list_class);
_exports_lys_node_list_clientData.dtor = _wrap_delete_lys_node_list;
if (SWIGTYPE_p_lys_node_list->clientdata == 0) {
  SWIGTYPE_p_lys_node_list->clientdata = &_exports_lys_node_list_clientData;
}
/* Name: _exports_lys_node_anyxml, Type: p_lys_node_anyxml, Dtor: _wrap_delete_lys_node_anyxml */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_anyxml_class = SWIGV8_CreateClassTemplate("_exports_lys_node_anyxml");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_anyxml_clientData.class_templ, _exports_lys_node_anyxml_class);
_exports_lys_node_anyxml_clientData.dtor = _wrap_delete_lys_node_anyxml;
if (SWIGTYPE_p_lys_node_anyxml->clientdata == 0) {
  SWIGTYPE_p_lys_node_anyxml->clientdata = &_exports_lys_node_anyxml_clientData;
}
/* Name: _exports_lys_node_uses, Type: p_lys_node_uses, Dtor: _wrap_delete_lys_node_uses */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_uses_class = SWIGV8_CreateClassTemplate("_exports_lys_node_uses");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_uses_clientData.class_templ, _exports_lys_node_uses_class);
_exports_lys_node_uses_clientData.dtor = _wrap_delete_lys_node_uses;
if (SWIGTYPE_p_lys_node_uses->clientdata == 0) {
  SWIGTYPE_p_lys_node_uses->clientdata = &_exports_lys_node_uses_clientData;
}
/* Name: _exports_lys_node_grp, Type: p_lys_node_grp, Dtor: _wrap_delete_lys_node_grp */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_grp_class = SWIGV8_CreateClassTemplate("_exports_lys_node_grp");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_grp_clientData.class_templ, _exports_lys_node_grp_class);
_exports_lys_node_grp_clientData.dtor = _wrap_delete_lys_node_grp;
if (SWIGTYPE_p_lys_node_grp->clientdata == 0) {
  SWIGTYPE_p_lys_node_grp->clientdata = &_exports_lys_node_grp_clientData;
}
/* Name: _exports_lys_node_case, Type: p_lys_node_case, Dtor: _wrap_delete_lys_node_case */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_case_class = SWIGV8_CreateClassTemplate("_exports_lys_node_case");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_case_clientData.class_templ, _exports_lys_node_case_class);
_exports_lys_node_case_clientData.dtor = _wrap_delete_lys_node_case;
if (SWIGTYPE_p_lys_node_case->clientdata == 0) {
  SWIGTYPE_p_lys_node_case->clientdata = &_exports_lys_node_case_clientData;
}
/* Name: _exports_lys_node_rpc_inout, Type: p_lys_node_rpc_inout, Dtor: _wrap_delete_lys_node_rpc_inout */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_rpc_inout_class = SWIGV8_CreateClassTemplate("_exports_lys_node_rpc_inout");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_rpc_inout_clientData.class_templ, _exports_lys_node_rpc_inout_class);
_exports_lys_node_rpc_inout_clientData.dtor = _wrap_delete_lys_node_rpc_inout;
if (SWIGTYPE_p_lys_node_rpc_inout->clientdata == 0) {
  SWIGTYPE_p_lys_node_rpc_inout->clientdata = &_exports_lys_node_rpc_inout_clientData;
}
/* Name: _exports_lys_node_notif, Type: p_lys_node_notif, Dtor: _wrap_delete_lys_node_notif */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_notif_class = SWIGV8_CreateClassTemplate("_exports_lys_node_notif");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_notif_clientData.class_templ, _exports_lys_node_notif_class);
_exports_lys_node_notif_clientData.dtor = _wrap_delete_lys_node_notif;
if (SWIGTYPE_p_lys_node_notif->clientdata == 0) {
  SWIGTYPE_p_lys_node_notif->clientdata = &_exports_lys_node_notif_clientData;
}
/* Name: _exports_lys_node_rpc, Type: p_lys_node_rpc, Dtor: _wrap_delete_lys_node_rpc */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_rpc_class = SWIGV8_CreateClassTemplate("_exports_lys_node_rpc");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_rpc_clientData.class_templ, _exports_lys_node_rpc_class);
_exports_lys_node_rpc_clientData.dtor = _wrap_delete_lys_node_rpc;
if (SWIGTYPE_p_lys_node_rpc->clientdata == 0) {
  SWIGTYPE_p_lys_node_rpc->clientdata = &_exports_lys_node_rpc_clientData;
}
/* Name: _exports_lys_node_augment, Type: p_lys_node_augment, Dtor: _wrap_delete_lys_node_augment */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_augment_class = SWIGV8_CreateClassTemplate("_exports_lys_node_augment");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_node_augment_clientData.class_templ, _exports_lys_node_augment_class);
_exports_lys_node_augment_clientData.dtor = _wrap_delete_lys_node_augment;
if (SWIGTYPE_p_lys_node_augment->clientdata == 0) {
  SWIGTYPE_p_lys_node_augment->clientdata = &_exports_lys_node_augment_clientData;
}
/* Name: _exports_lys_refine_mod_list, Type: p_lys_refine_mod_list, Dtor: _wrap_delete_lys_refine_mod_list */
v8::Handle<v8::FunctionTemplate> _exports_lys_refine_mod_list_class = SWIGV8_CreateClassTemplate("_exports_lys_refine_mod_list");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_refine_mod_list_clientData.class_templ, _exports_lys_refine_mod_list_class);
_exports_lys_refine_mod_list_clientData.dtor = _wrap_delete_lys_refine_mod_list;
if (SWIGTYPE_p_lys_refine_mod_list->clientdata == 0) {
  SWIGTYPE_p_lys_refine_mod_list->clientdata = &_exports_lys_refine_mod_list_clientData;
}
/* Name: _exports_lys_refine_mod, Type: p_lys_refine_mod, Dtor: _wrap_delete_lys_refine_mod */
v8::Handle<v8::FunctionTemplate> _exports_lys_refine_mod_class = SWIGV8_CreateClassTemplate("_exports_lys_refine_mod");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_refine_mod_clientData.class_templ, _exports_lys_refine_mod_class);
_exports_lys_refine_mod_clientData.dtor = _wrap_delete_lys_refine_mod;
if (SWIGTYPE_p_lys_refine_mod->clientdata == 0) {
  SWIGTYPE_p_lys_refine_mod->clientdata = &_exports_lys_refine_mod_clientData;
}
/* Name: _exports_lys_refine, Type: p_lys_refine, Dtor: _wrap_delete_lys_refine */
v8::Handle<v8::FunctionTemplate> _exports_lys_refine_class = SWIGV8_CreateClassTemplate("_exports_lys_refine");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_refine_clientData.class_templ, _exports_lys_refine_class);
_exports_lys_refine_clientData.dtor = _wrap_delete_lys_refine;
if (SWIGTYPE_p_lys_refine->clientdata == 0) {
  SWIGTYPE_p_lys_refine->clientdata = &_exports_lys_refine_clientData;
}
/* Name: _exports_lys_deviate, Type: p_lys_deviate, Dtor: _wrap_delete_lys_deviate */
v8::Handle<v8::FunctionTemplate> _exports_lys_deviate_class = SWIGV8_CreateClassTemplate("_exports_lys_deviate");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_deviate_clientData.class_templ, _exports_lys_deviate_class);
_exports_lys_deviate_clientData.dtor = _wrap_delete_lys_deviate;
if (SWIGTYPE_p_lys_deviate->clientdata == 0) {
  SWIGTYPE_p_lys_deviate->clientdata = &_exports_lys_deviate_clientData;
}
/* Name: _exports_lys_deviation, Type: p_lys_deviation, Dtor: _wrap_delete_lys_deviation */
v8::Handle<v8::FunctionTemplate> _exports_lys_deviation_class = SWIGV8_CreateClassTemplate("_exports_lys_deviation");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_deviation_clientData.class_templ, _exports_lys_deviation_class);
_exports_lys_deviation_clientData.dtor = _wrap_delete_lys_deviation;
if (SWIGTYPE_p_lys_deviation->clientdata == 0) {
  SWIGTYPE_p_lys_deviation->clientdata = &_exports_lys_deviation_clientData;
}
/* Name: _exports_lys_import, Type: p_lys_import, Dtor: _wrap_delete_lys_import */
v8::Handle<v8::FunctionTemplate> _exports_lys_import_class = SWIGV8_CreateClassTemplate("_exports_lys_import");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_import_clientData.class_templ, _exports_lys_import_class);
_exports_lys_import_clientData.dtor = _wrap_delete_lys_import;
if (SWIGTYPE_p_lys_import->clientdata == 0) {
  SWIGTYPE_p_lys_import->clientdata = &_exports_lys_import_clientData;
}
/* Name: _exports_lys_include, Type: p_lys_include, Dtor: _wrap_delete_lys_include */
v8::Handle<v8::FunctionTemplate> _exports_lys_include_class = SWIGV8_CreateClassTemplate("_exports_lys_include");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_include_clientData.class_templ, _exports_lys_include_class);
_exports_lys_include_clientData.dtor = _wrap_delete_lys_include;
if (SWIGTYPE_p_lys_include->clientdata == 0) {
  SWIGTYPE_p_lys_include->clientdata = &_exports_lys_include_clientData;
}
/* Name: _exports_lys_revision, Type: p_lys_revision, Dtor: _wrap_delete_lys_revision */
v8::Handle<v8::FunctionTemplate> _exports_lys_revision_class = SWIGV8_CreateClassTemplate("_exports_lys_revision");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_revision_clientData.class_templ, _exports_lys_revision_class);
_exports_lys_revision_clientData.dtor = _wrap_delete_lys_revision;
if (SWIGTYPE_p_lys_revision->clientdata == 0) {
  SWIGTYPE_p_lys_revision->clientdata = &_exports_lys_revision_clientData;
}
/* Name: _exports_lys_tpdf, Type: p_lys_tpdf, Dtor: _wrap_delete_lys_tpdf */
v8::Handle<v8::FunctionTemplate> _exports_lys_tpdf_class = SWIGV8_CreateClassTemplate("_exports_lys_tpdf");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_tpdf_clientData.class_templ, _exports_lys_tpdf_class);
_exports_lys_tpdf_clientData.dtor = _wrap_delete_lys_tpdf;
if (SWIGTYPE_p_lys_tpdf->clientdata == 0) {
  SWIGTYPE_p_lys_tpdf->clientdata = &_exports_lys_tpdf_clientData;
}
/* Name: _exports_lys_unique, Type: p_lys_unique, Dtor: _wrap_delete_lys_unique */
v8::Handle<v8::FunctionTemplate> _exports_lys_unique_class = SWIGV8_CreateClassTemplate("_exports_lys_unique");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_unique_clientData.class_templ, _exports_lys_unique_class);
_exports_lys_unique_clientData.dtor = _wrap_delete_lys_unique;
if (SWIGTYPE_p_lys_unique->clientdata == 0) {
  SWIGTYPE_p_lys_unique->clientdata = &_exports_lys_unique_clientData;
}
/* Name: _exports_lys_feature, Type: p_lys_feature, Dtor: _wrap_delete_lys_feature */
v8::Handle<v8::FunctionTemplate> _exports_lys_feature_class = SWIGV8_CreateClassTemplate("_exports_lys_feature");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_feature_clientData.class_templ, _exports_lys_feature_class);
_exports_lys_feature_clientData.dtor = _wrap_delete_lys_feature;
if (SWIGTYPE_p_lys_feature->clientdata == 0) {
  SWIGTYPE_p_lys_feature->clientdata = &_exports_lys_feature_clientData;
}
/* Name: _exports_lys_restr, Type: p_lys_restr, Dtor: _wrap_delete_lys_restr */
v8::Handle<v8::FunctionTemplate> _exports_lys_restr_class = SWIGV8_CreateClassTemplate("_exports_lys_restr");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_restr_clientData.class_templ, _exports_lys_restr_class);
_exports_lys_restr_clientData.dtor = _wrap_delete_lys_restr;
if (SWIGTYPE_p_lys_restr->clientdata == 0) {
  SWIGTYPE_p_lys_restr->clientdata = &_exports_lys_restr_clientData;
}
/* Name: _exports_lys_when, Type: p_lys_when, Dtor: _wrap_delete_lys_when */
v8::Handle<v8::FunctionTemplate> _exports_lys_when_class = SWIGV8_CreateClassTemplate("_exports_lys_when");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_when_clientData.class_templ, _exports_lys_when_class);
_exports_lys_when_clientData.dtor = _wrap_delete_lys_when;
if (SWIGTYPE_p_lys_when->clientdata == 0) {
  SWIGTYPE_p_lys_when->clientdata = &_exports_lys_when_clientData;
}
/* Name: _exports_lys_ident, Type: p_lys_ident, Dtor: _wrap_delete_lys_ident */
v8::Handle<v8::FunctionTemplate> _exports_lys_ident_class = SWIGV8_CreateClassTemplate("_exports_lys_ident");
SWIGV8_SET_CLASS_TEMPL(_exports_lys_ident_clientData.class_templ, _exports_lys_ident_class);
_exports_lys_ident_clientData.dtor = _wrap_delete_lys_ident;
if (SWIGTYPE_p_lys_ident->clientdata == 0) {
  SWIGTYPE_p_lys_ident->clientdata = &_exports_lys_ident_clientData;
}
/* Name: _exports_lyd_attr, Type: p_lyd_attr, Dtor: _wrap_delete_lyd_attr */
v8::Handle<v8::FunctionTemplate> _exports_lyd_attr_class = SWIGV8_CreateClassTemplate("_exports_lyd_attr");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_attr_clientData.class_templ, _exports_lyd_attr_class);
_exports_lyd_attr_clientData.dtor = _wrap_delete_lyd_attr;
if (SWIGTYPE_p_lyd_attr->clientdata == 0) {
  SWIGTYPE_p_lyd_attr->clientdata = &_exports_lyd_attr_clientData;
}
/* Name: _exports_lyd_val, Type: p_lyd_value_u, Dtor: _wrap_delete_lyd_val */
v8::Handle<v8::FunctionTemplate> _exports_lyd_val_class = SWIGV8_CreateClassTemplate("_exports_lyd_val");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_val_clientData.class_templ, _exports_lyd_val_class);
_exports_lyd_val_clientData.dtor = _wrap_delete_lyd_val;
if (SWIGTYPE_p_lyd_value_u->clientdata == 0) {
  SWIGTYPE_p_lyd_value_u->clientdata = &_exports_lyd_val_clientData;
}
/* Name: _exports_lyd_node, Type: p_lyd_node, Dtor: _wrap_delete_lyd_node */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_class = SWIGV8_CreateClassTemplate("_exports_lyd_node");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_node_clientData.class_templ, _exports_lyd_node_class);
_exports_lyd_node_clientData.dtor = _wrap_delete_lyd_node;
if (SWIGTYPE_p_lyd_node->clientdata == 0) {
  SWIGTYPE_p_lyd_node->clientdata = &_exports_lyd_node_clientData;
}
/* Name: _exports_lyd_node_leaf_list, Type: p_lyd_node_leaf_list, Dtor: _wrap_delete_lyd_node_leaf_list */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_leaf_list_class = SWIGV8_CreateClassTemplate("_exports_lyd_node_leaf_list");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_node_leaf_list_clientData.class_templ, _exports_lyd_node_leaf_list_class);
_exports_lyd_node_leaf_list_clientData.dtor = _wrap_delete_lyd_node_leaf_list;
if (SWIGTYPE_p_lyd_node_leaf_list->clientdata == 0) {
  SWIGTYPE_p_lyd_node_leaf_list->clientdata = &_exports_lyd_node_leaf_list_clientData;
}
/* Name: _exports_lyd_node_anyxml_value, Type: p_lyd_node_anyxml_value, Dtor: _wrap_delete_lyd_node_anyxml_value */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_anyxml_value_class = SWIGV8_CreateClassTemplate("_exports_lyd_node_anyxml_value");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_node_anyxml_value_clientData.class_templ, _exports_lyd_node_anyxml_value_class);
_exports_lyd_node_anyxml_value_clientData.dtor = _wrap_delete_lyd_node_anyxml_value;
if (SWIGTYPE_p_lyd_node_anyxml_value->clientdata == 0) {
  SWIGTYPE_p_lyd_node_anyxml_value->clientdata = &_exports_lyd_node_anyxml_value_clientData;
}
/* Name: _exports_lyd_node_anyxml, Type: p_lyd_node_anyxml, Dtor: _wrap_delete_lyd_node_anyxml */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_anyxml_class = SWIGV8_CreateClassTemplate("_exports_lyd_node_anyxml");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_node_anyxml_clientData.class_templ, _exports_lyd_node_anyxml_class);
_exports_lyd_node_anyxml_clientData.dtor = _wrap_delete_lyd_node_anyxml;
if (SWIGTYPE_p_lyd_node_anyxml->clientdata == 0) {
  SWIGTYPE_p_lyd_node_anyxml->clientdata = &_exports_lyd_node_anyxml_clientData;
}
/* Name: _exports_lyd_difflist, Type: p_lyd_difflist, Dtor: _wrap_delete_lyd_difflist */
v8::Handle<v8::FunctionTemplate> _exports_lyd_difflist_class = SWIGV8_CreateClassTemplate("_exports_lyd_difflist");
SWIGV8_SET_CLASS_TEMPL(_exports_lyd_difflist_clientData.class_templ, _exports_lyd_difflist_class);
_exports_lyd_difflist_clientData.dtor = _wrap_delete_lyd_difflist;
if (SWIGTYPE_p_lyd_difflist->clientdata == 0) {
  SWIGTYPE_p_lyd_difflist->clientdata = &_exports_lyd_difflist_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberVariable(_exports_ly_set_set_class, "s", _wrap_ly_set_set_s_get, _wrap_ly_set_set_s_set);
SWIGV8_AddMemberVariable(_exports_ly_set_set_class, "d", _wrap_ly_set_set_d_get, _wrap_ly_set_set_d_set);
SWIGV8_AddMemberVariable(_exports_ly_set_set_class, "g", _wrap_ly_set_set_g_get, _wrap_ly_set_set_g_set);
SWIGV8_AddMemberVariable(_exports_ly_set_class, "size", _wrap_ly_set_size_get, _wrap_ly_set_size_set);
SWIGV8_AddMemberVariable(_exports_ly_set_class, "number", _wrap_ly_set_number_get, _wrap_ly_set_number_set);
SWIGV8_AddMemberVariable(_exports_ly_set_class, "set", _wrap_ly_set_set_get, _wrap_ly_set_set_set);
SWIGV8_AddStaticVariable(exports_obj, "LYP_WITHSIBLINGS", _wrap_LYP_WITHSIBLINGS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYP_FORMAT", _wrap_LYP_FORMAT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_LLERR", _wrap_LY_LLERR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_LLWRN", _wrap_LY_LLWRN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_LLVRB", _wrap_LY_LLVRB, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_LLDBG", _wrap_LY_LLDBG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_SUCCESS", _wrap_LY_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_EMEM", _wrap_LY_EMEM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_ESYS", _wrap_LY_ESYS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_EINVAL", _wrap_LY_EINVAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_EINT", _wrap_LY_EINT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_EVALID", _wrap_LY_EVALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_SUCCESS", _wrap_LYVE_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XML_MISS", _wrap_LYVE_XML_MISS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XML_INVAL", _wrap_LYVE_XML_INVAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XML_INCHAR", _wrap_LYVE_XML_INCHAR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_EOF", _wrap_LYVE_EOF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INSTMT", _wrap_LYVE_INSTMT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INID", _wrap_LYVE_INID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INDATE", _wrap_LYVE_INDATE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INARG", _wrap_LYVE_INARG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_MISSSTMT", _wrap_LYVE_MISSSTMT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_MISSARG", _wrap_LYVE_MISSARG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_TOOMANY", _wrap_LYVE_TOOMANY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_DUPID", _wrap_LYVE_DUPID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_DUPLEAFLIST", _wrap_LYVE_DUPLEAFLIST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_DUPLIST", _wrap_LYVE_DUPLIST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOUNIQ", _wrap_LYVE_NOUNIQ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_ENUM_DUPVAL", _wrap_LYVE_ENUM_DUPVAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_ENUM_DUPNAME", _wrap_LYVE_ENUM_DUPNAME, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_ENUM_WS", _wrap_LYVE_ENUM_WS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_BITS_DUPVAL", _wrap_LYVE_BITS_DUPVAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_BITS_DUPNAME", _wrap_LYVE_BITS_DUPNAME, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INMOD", _wrap_LYVE_INMOD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_KEY_NLEAF", _wrap_LYVE_KEY_NLEAF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_KEY_TYPE", _wrap_LYVE_KEY_TYPE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_KEY_CONFIG", _wrap_LYVE_KEY_CONFIG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_KEY_MISS", _wrap_LYVE_KEY_MISS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_KEY_DUP", _wrap_LYVE_KEY_DUP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INREGEX", _wrap_LYVE_INREGEX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INRESOLV", _wrap_LYVE_INRESOLV, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INSTATUS", _wrap_LYVE_INSTATUS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_CIRC_LEAFREFS", _wrap_LYVE_CIRC_LEAFREFS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_OBSDATA", _wrap_LYVE_OBSDATA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NORESOLV", _wrap_LYVE_NORESOLV, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INELEM", _wrap_LYVE_INELEM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_MISSELEM", _wrap_LYVE_MISSELEM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INVAL", _wrap_LYVE_INVAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INVALATTR", _wrap_LYVE_INVALATTR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INATTR", _wrap_LYVE_INATTR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_MISSATTR", _wrap_LYVE_MISSATTR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOCONSTR", _wrap_LYVE_NOCONSTR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INCHAR", _wrap_LYVE_INCHAR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INPRED", _wrap_LYVE_INPRED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_MCASEDATA", _wrap_LYVE_MCASEDATA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOMUST", _wrap_LYVE_NOMUST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOWHEN", _wrap_LYVE_NOWHEN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INORDER", _wrap_LYVE_INORDER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_INWHEN", _wrap_LYVE_INWHEN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOMIN", _wrap_LYVE_NOMIN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOMAX", _wrap_LYVE_NOMAX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOREQINS", _wrap_LYVE_NOREQINS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOLEAFREF", _wrap_LYVE_NOLEAFREF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_NOMANDCHOICE", _wrap_LYVE_NOMANDCHOICE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XPATH_INTOK", _wrap_LYVE_XPATH_INTOK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XPATH_EOF", _wrap_LYVE_XPATH_EOF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XPATH_INOP", _wrap_LYVE_XPATH_INOP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XPATH_INCTX", _wrap_LYVE_XPATH_INCTX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XPATH_INARGCOUNT", _wrap_LYVE_XPATH_INARGCOUNT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_XPATH_INARGTYPE", _wrap_LYVE_XPATH_INARGTYPE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_INCHAR", _wrap_LYVE_PATH_INCHAR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_INMOD", _wrap_LYVE_PATH_INMOD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_MISSMOD", _wrap_LYVE_PATH_MISSMOD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_INNODE", _wrap_LYVE_PATH_INNODE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_INKEY", _wrap_LYVE_PATH_INKEY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_MISSKEY", _wrap_LYVE_PATH_MISSKEY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_EXISTS", _wrap_LYVE_PATH_EXISTS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYVE_PATH_MISSPAR", _wrap_LYVE_PATH_MISSPAR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_ATTR_STD", _wrap_LYXML_ATTR_STD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_ATTR_NS", _wrap_LYXML_ATTR_NS, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_ns_class, "type", _wrap_lyxml_ns_type_get, _wrap_lyxml_ns_type_set);
SWIGV8_AddMemberVariable(_exports_lyxml_ns_class, "next", _wrap_lyxml_ns_next_get, _wrap_lyxml_ns_next_set);
SWIGV8_AddMemberVariable(_exports_lyxml_ns_class, "parent", _wrap_lyxml_ns_parent_get, _wrap_lyxml_ns_parent_set);
SWIGV8_AddMemberVariable(_exports_lyxml_ns_class, "prefix", _wrap_lyxml_ns_prefix_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_ns_class, "value", _wrap_lyxml_ns_value_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_attr_class, "type", _wrap_lyxml_attr_type_get, _wrap_lyxml_attr_type_set);
SWIGV8_AddMemberVariable(_exports_lyxml_attr_class, "next", _wrap_lyxml_attr_next_get, _wrap_lyxml_attr_next_set);
SWIGV8_AddMemberVariable(_exports_lyxml_attr_class, "ns", _wrap_lyxml_attr_ns_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_attr_class, "name", _wrap_lyxml_attr_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_attr_class, "value", _wrap_lyxml_attr_value_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "flags", _wrap_lyxml_elem_flags_get, _wrap_lyxml_elem_flags_set);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "LYXML_ELEM_MIXED", _wrap_LYXML_ELEM_MIXED, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "parent", _wrap_lyxml_elem_parent_get, _wrap_lyxml_elem_parent_set);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "attr", _wrap_lyxml_elem_attr_get, _wrap_lyxml_elem_attr_set);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "child", _wrap_lyxml_elem_child_get, _wrap_lyxml_elem_child_set);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "next", _wrap_lyxml_elem_next_get, _wrap_lyxml_elem_next_set);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "prev", _wrap_lyxml_elem_prev_get, _wrap_lyxml_elem_prev_set);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "name", _wrap_lyxml_elem_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "ns", _wrap_lyxml_elem_ns_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyxml_elem_class, "content", _wrap_lyxml_elem_content_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_PARSE_MULTIROOT", _wrap_LYXML_PARSE_MULTIROOT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_PRINT_OPEN", _wrap_LYXML_PRINT_OPEN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_PRINT_FORMAT", _wrap_LYXML_PRINT_FORMAT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_PRINT_CLOSE", _wrap_LYXML_PRINT_CLOSE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_PRINT_ATTRS", _wrap_LYXML_PRINT_ATTRS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYXML_PRINT_SIBLINGS", _wrap_LYXML_PRINT_SIBLINGS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_REV_SIZE", _wrap_LY_REV_SIZE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_IN_UNKNOWN", _wrap_LYS_IN_UNKNOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_IN_YANG", _wrap_LYS_IN_YANG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_IN_YIN", _wrap_LYS_IN_YIN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_OUT_UNKNOWN", _wrap_LYS_OUT_UNKNOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_OUT_YANG", _wrap_LYS_OUT_YANG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_OUT_YIN", _wrap_LYS_OUT_YIN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_OUT_TREE", _wrap_LYS_OUT_TREE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_OUT_INFO", _wrap_LYS_OUT_INFO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_YANG", _wrap_LYS_YANG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_YIN", _wrap_LY_YIN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_UNKNOWN", _wrap_LYS_UNKNOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CONTAINER", _wrap_LYS_CONTAINER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CHOICE", _wrap_LYS_CHOICE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_LEAF", _wrap_LYS_LEAF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_LEAFLIST", _wrap_LYS_LEAFLIST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_LIST", _wrap_LYS_LIST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_ANYXML", _wrap_LYS_ANYXML, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CASE", _wrap_LYS_CASE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_NOTIF", _wrap_LYS_NOTIF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_RPC", _wrap_LYS_RPC, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_INPUT", _wrap_LYS_INPUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_OUTPUT", _wrap_LYS_OUTPUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_GROUPING", _wrap_LYS_GROUPING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_USES", _wrap_LYS_USES, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_AUGMENT", _wrap_LYS_AUGMENT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_NO_RPC_NOTIF_NODE", _wrap_LYS_NO_RPC_NOTIF_NODE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_ANY", _wrap_LYS_ANY, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "ctx", _wrap_lys_module_ctx_get, _wrap_lys_module_ctx_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "name", _wrap_lys_module_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "prefix", _wrap_lys_module_prefix_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "dsc", _wrap_lys_module_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "ref", _wrap_lys_module_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "org", _wrap_lys_module_org_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "contact", _wrap_lys_module_contact_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "filepath", _wrap_lys_module_filepath_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "type", _wrap_lys_module_type_get, _wrap_lys_module_type_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "version", _wrap_lys_module_version_get, _wrap_lys_module_version_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "deviated", _wrap_lys_module_deviated_get, _wrap_lys_module_deviated_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "implemented", _wrap_lys_module_implemented_get, _wrap_lys_module_implemented_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "rev_size", _wrap_lys_module_rev_size_get, _wrap_lys_module_rev_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "imp_size", _wrap_lys_module_imp_size_get, _wrap_lys_module_imp_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "inc_size", _wrap_lys_module_inc_size_get, _wrap_lys_module_inc_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "tpdf_size", _wrap_lys_module_tpdf_size_get, _wrap_lys_module_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "ident_size", _wrap_lys_module_ident_size_get, _wrap_lys_module_ident_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "features_size", _wrap_lys_module_features_size_get, _wrap_lys_module_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "augment_size", _wrap_lys_module_augment_size_get, _wrap_lys_module_augment_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "deviation_size", _wrap_lys_module_deviation_size_get, _wrap_lys_module_deviation_size_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "rev", _wrap_lys_module_rev_get, _wrap_lys_module_rev_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "imp", _wrap_lys_module_imp_get, _wrap_lys_module_imp_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "inc", _wrap_lys_module_inc_get, _wrap_lys_module_inc_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "tpdf", _wrap_lys_module_tpdf_get, _wrap_lys_module_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "ident", _wrap_lys_module_ident_get, _wrap_lys_module_ident_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "features", _wrap_lys_module_features_get, _wrap_lys_module_features_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "augment", _wrap_lys_module_augment_get, _wrap_lys_module_augment_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "deviation", _wrap_lys_module_deviation_get, _wrap_lys_module_deviation_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "data", _wrap_lys_module_data_get, _wrap_lys_module_data_set);
SWIGV8_AddMemberVariable(_exports_lys_module_class, "ns", _wrap_lys_module_ns_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "ctx", _wrap_lys_submodule_ctx_get, _wrap_lys_submodule_ctx_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "name", _wrap_lys_submodule_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "prefix", _wrap_lys_submodule_prefix_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "dsc", _wrap_lys_submodule_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "ref", _wrap_lys_submodule_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "org", _wrap_lys_submodule_org_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "contact", _wrap_lys_submodule_contact_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "filepath", _wrap_lys_submodule_filepath_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "type", _wrap_lys_submodule_type_get, _wrap_lys_submodule_type_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "padding", _wrap_lys_submodule_padding_get, _wrap_lys_submodule_padding_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "rev_size", _wrap_lys_submodule_rev_size_get, _wrap_lys_submodule_rev_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "imp_size", _wrap_lys_submodule_imp_size_get, _wrap_lys_submodule_imp_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "inc_size", _wrap_lys_submodule_inc_size_get, _wrap_lys_submodule_inc_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "tpdf_size", _wrap_lys_submodule_tpdf_size_get, _wrap_lys_submodule_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "ident_size", _wrap_lys_submodule_ident_size_get, _wrap_lys_submodule_ident_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "features_size", _wrap_lys_submodule_features_size_get, _wrap_lys_submodule_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "augment_size", _wrap_lys_submodule_augment_size_get, _wrap_lys_submodule_augment_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "deviation_size", _wrap_lys_submodule_deviation_size_get, _wrap_lys_submodule_deviation_size_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "rev", _wrap_lys_submodule_rev_get, _wrap_lys_submodule_rev_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "imp", _wrap_lys_submodule_imp_get, _wrap_lys_submodule_imp_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "inc", _wrap_lys_submodule_inc_get, _wrap_lys_submodule_inc_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "tpdf", _wrap_lys_submodule_tpdf_get, _wrap_lys_submodule_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "ident", _wrap_lys_submodule_ident_get, _wrap_lys_submodule_ident_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "features", _wrap_lys_submodule_features_get, _wrap_lys_submodule_features_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "augment", _wrap_lys_submodule_augment_get, _wrap_lys_submodule_augment_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "deviation", _wrap_lys_submodule_deviation_get, _wrap_lys_submodule_deviation_set);
SWIGV8_AddMemberVariable(_exports_lys_submodule_class, "belongsto", _wrap_lys_submodule_belongsto_get, _wrap_lys_submodule_belongsto_set);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_DER", _wrap_LY_TYPE_DER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_BINARY", _wrap_LY_TYPE_BINARY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_BITS", _wrap_LY_TYPE_BITS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_BOOL", _wrap_LY_TYPE_BOOL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_DEC64", _wrap_LY_TYPE_DEC64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_EMPTY", _wrap_LY_TYPE_EMPTY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_ENUM", _wrap_LY_TYPE_ENUM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_IDENT", _wrap_LY_TYPE_IDENT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_INST", _wrap_LY_TYPE_INST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_LEAFREF", _wrap_LY_TYPE_LEAFREF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_STRING", _wrap_LY_TYPE_STRING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_UNION", _wrap_LY_TYPE_UNION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_INT8", _wrap_LY_TYPE_INT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_UINT8", _wrap_LY_TYPE_UINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_INT16", _wrap_LY_TYPE_INT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_UINT16", _wrap_LY_TYPE_UINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_INT32", _wrap_LY_TYPE_INT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_UINT32", _wrap_LY_TYPE_UINT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_INT64", _wrap_LY_TYPE_INT64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_UINT64", _wrap_LY_TYPE_UINT64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_DATA_TYPE_COUNT", _wrap_LY_DATA_TYPE_COUNT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_DATA_TYPE_MASK", _wrap_LY_DATA_TYPE_MASK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_LEAFREF_UNRES", _wrap_LY_TYPE_LEAFREF_UNRES, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_TYPE_INST_UNRES", _wrap_LY_TYPE_INST_UNRES, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_info_binary_class, "length", _wrap_lys_type_info_binary_length_get, _wrap_lys_type_info_binary_length_set);
SWIGV8_AddMemberVariable(_exports_lys_type_bit_class, "name", _wrap_lys_type_bit_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_bit_class, "dsc", _wrap_lys_type_bit_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_bit_class, "ref", _wrap_lys_type_bit_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_bit_class, "flags", _wrap_lys_type_bit_flags_get, _wrap_lys_type_bit_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_type_bit_class, "pos", _wrap_lys_type_bit_pos_get, _wrap_lys_type_bit_pos_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_bits_class, "bit", _wrap_lys_type_info_bits_bit_get, _wrap_lys_type_info_bits_bit_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_bits_class, "count", _wrap_lys_type_info_bits_count_get, _wrap_lys_type_info_bits_count_set);
SWIGV8_AddStaticVariable(exports_obj, "bits", _wrap_bits_get, _wrap_bits_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_dec64_class, "range", _wrap_lys_type_info_dec64_range_get, _wrap_lys_type_info_dec64_range_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_dec64_class, "dig", _wrap_lys_type_info_dec64_dig_get, _wrap_lys_type_info_dec64_dig_set);
SWIGV8_AddMemberVariable(_exports_lys_type_enum_class, "name", _wrap_lys_type_enum_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_enum_class, "dsc", _wrap_lys_type_enum_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_enum_class, "ref", _wrap_lys_type_enum_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_enum_class, "flags", _wrap_lys_type_enum_flags_get, _wrap_lys_type_enum_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_type_enum_class, "value", _wrap_lys_type_enum_value_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_info_enums_class, "enm", _wrap_lys_type_info_enums_enm_get, _wrap_lys_type_info_enums_enm_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_enums_class, "count", _wrap_lys_type_info_enums_count_get, _wrap_lys_type_info_enums_count_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_ident_class, "ref", _wrap_lys_type_info_ident_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_info_inst_class, "req", _wrap_lys_type_info_inst_req_get, _wrap_lys_type_info_inst_req_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_num_class, "range", _wrap_lys_type_info_num_range_get, _wrap_lys_type_info_num_range_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_lref_class, "path", _wrap_lys_type_info_lref_path_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_info_lref_class, "target", _wrap_lys_type_info_lref_target_get, _wrap_lys_type_info_lref_target_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_str_class, "length", _wrap_lys_type_info_str_length_get, _wrap_lys_type_info_str_length_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_str_class, "patterns", _wrap_lys_type_info_str_patterns_get, _wrap_lys_type_info_str_patterns_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_str_class, "pat_count", _wrap_lys_type_info_str_pat_count_get, _wrap_lys_type_info_str_pat_count_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_union_class, "types", _wrap_lys_type_info_union_types_get, _wrap_lys_type_info_union_types_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_union_class, "count", _wrap_lys_type_info_union_count_get, _wrap_lys_type_info_union_count_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "binary", _wrap_lys_type_info_binary_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "bits", _wrap_lys_type_info_bits_get, _wrap_lys_type_info_bits_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "dec64", _wrap_lys_type_info_dec64_get, _wrap_lys_type_info_dec64_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "enums", _wrap_lys_type_info_enums_get, _wrap_lys_type_info_enums_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "ident", _wrap_lys_type_info_ident_get, _wrap_lys_type_info_ident_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "inst", _wrap_lys_type_info_inst_get, _wrap_lys_type_info_inst_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "num", _wrap_lys_type_info_num_get, _wrap_lys_type_info_num_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "lref", _wrap_lys_type_info_lref_get, _wrap_lys_type_info_lref_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "str", _wrap_lys_type_info_str_get, _wrap_lys_type_info_str_set);
SWIGV8_AddMemberVariable(_exports_lys_type_info_class, "uni", _wrap_lys_type_info_uni_get, _wrap_lys_type_info_uni_set);
SWIGV8_AddMemberVariable(_exports_lys_type_class, "module_name", _wrap_lys_type_module_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_type_class, "base", _wrap_lys_type_base_get, _wrap_lys_type_base_set);
SWIGV8_AddMemberVariable(_exports_lys_type_class, "der", _wrap_lys_type_der_get, _wrap_lys_type_der_set);
SWIGV8_AddMemberVariable(_exports_lys_type_class, "parent", _wrap_lys_type_parent_get, _wrap_lys_type_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_type_class, "info", _wrap_lys_type_info_get, _wrap_lys_type_info_set);
SWIGV8_AddStaticVariable(exports_obj, "LYS_NACM_DENYW", _wrap_LYS_NACM_DENYW, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_NACM_DENYA", _wrap_LYS_NACM_DENYA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CONFIG_W", _wrap_LYS_CONFIG_W, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CONFIG_R", _wrap_LYS_CONFIG_R, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CONFIG_SET", _wrap_LYS_CONFIG_SET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_CONFIG_MASK", _wrap_LYS_CONFIG_MASK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_STATUS_CURR", _wrap_LYS_STATUS_CURR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_STATUS_DEPRC", _wrap_LYS_STATUS_DEPRC, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_STATUS_OBSLT", _wrap_LYS_STATUS_OBSLT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_STATUS_MASK", _wrap_LYS_STATUS_MASK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_RFN_MAXSET", _wrap_LYS_RFN_MAXSET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_RFN_MINSET", _wrap_LYS_RFN_MINSET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_MAND_TRUE", _wrap_LYS_MAND_TRUE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_MAND_FALSE", _wrap_LYS_MAND_FALSE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_INCL_STATUS", _wrap_LYS_INCL_STATUS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_MAND_MASK", _wrap_LYS_MAND_MASK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_USERORDERED", _wrap_LYS_USERORDERED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_FENABLED", _wrap_LYS_FENABLED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_UNIQUE", _wrap_LYS_UNIQUE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_AUTOASSIGNED", _wrap_LYS_AUTOASSIGNED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_USESGRP", _wrap_LYS_USESGRP, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "name", _wrap_lys_node_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "dsc", _wrap_lys_node_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "ref", _wrap_lys_node_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "flags", _wrap_lys_node_flags_get, _wrap_lys_node_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "nacm", _wrap_lys_node_nacm_get, _wrap_lys_node_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "module", _wrap_lys_node_module_get, _wrap_lys_node_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "nodetype", _wrap_lys_node_nodetype_get, _wrap_lys_node_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "parent", _wrap_lys_node_parent_get, _wrap_lys_node_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "child", _wrap_lys_node_child_get, _wrap_lys_node_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "next", _wrap_lys_node_next_get, _wrap_lys_node_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "prev", _wrap_lys_node_prev_get, _wrap_lys_node_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "features_size", _wrap_lys_node_features_size_get, _wrap_lys_node_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "features", _wrap_lys_node_features_get, _wrap_lys_node_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_class, "priv", _wrap_lys_node_priv_get, _wrap_lys_node_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "name", _wrap_lys_node_container_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "dsc", _wrap_lys_node_container_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "ref", _wrap_lys_node_container_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "flags", _wrap_lys_node_container_flags_get, _wrap_lys_node_container_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "nacm", _wrap_lys_node_container_nacm_get, _wrap_lys_node_container_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "module", _wrap_lys_node_container_module_get, _wrap_lys_node_container_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "nodetype", _wrap_lys_node_container_nodetype_get, _wrap_lys_node_container_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "parent", _wrap_lys_node_container_parent_get, _wrap_lys_node_container_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "child", _wrap_lys_node_container_child_get, _wrap_lys_node_container_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "next", _wrap_lys_node_container_next_get, _wrap_lys_node_container_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "prev", _wrap_lys_node_container_prev_get, _wrap_lys_node_container_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "features_size", _wrap_lys_node_container_features_size_get, _wrap_lys_node_container_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "features", _wrap_lys_node_container_features_get, _wrap_lys_node_container_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "priv", _wrap_lys_node_container_priv_get, _wrap_lys_node_container_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "when", _wrap_lys_node_container_when_get, _wrap_lys_node_container_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "presence", _wrap_lys_node_container_presence_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "must_size", _wrap_lys_node_container_must_size_get, _wrap_lys_node_container_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "tpdf_size", _wrap_lys_node_container_tpdf_size_get, _wrap_lys_node_container_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "must", _wrap_lys_node_container_must_get, _wrap_lys_node_container_must_set);
SWIGV8_AddMemberVariable(_exports_lys_node_container_class, "tpdf", _wrap_lys_node_container_tpdf_get, _wrap_lys_node_container_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "name", _wrap_lys_node_choice_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "dsc", _wrap_lys_node_choice_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "ref", _wrap_lys_node_choice_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "flags", _wrap_lys_node_choice_flags_get, _wrap_lys_node_choice_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "nacm", _wrap_lys_node_choice_nacm_get, _wrap_lys_node_choice_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "module", _wrap_lys_node_choice_module_get, _wrap_lys_node_choice_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "nodetype", _wrap_lys_node_choice_nodetype_get, _wrap_lys_node_choice_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "parent", _wrap_lys_node_choice_parent_get, _wrap_lys_node_choice_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "child", _wrap_lys_node_choice_child_get, _wrap_lys_node_choice_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "next", _wrap_lys_node_choice_next_get, _wrap_lys_node_choice_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "prev", _wrap_lys_node_choice_prev_get, _wrap_lys_node_choice_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "features_size", _wrap_lys_node_choice_features_size_get, _wrap_lys_node_choice_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "features", _wrap_lys_node_choice_features_get, _wrap_lys_node_choice_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "priv", _wrap_lys_node_choice_priv_get, _wrap_lys_node_choice_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "when", _wrap_lys_node_choice_when_get, _wrap_lys_node_choice_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_choice_class, "dflt", _wrap_lys_node_choice_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "name", _wrap_lys_node_leaf_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "dsc", _wrap_lys_node_leaf_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "ref", _wrap_lys_node_leaf_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "flags", _wrap_lys_node_leaf_flags_get, _wrap_lys_node_leaf_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "nacm", _wrap_lys_node_leaf_nacm_get, _wrap_lys_node_leaf_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "module", _wrap_lys_node_leaf_module_get, _wrap_lys_node_leaf_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "nodetype", _wrap_lys_node_leaf_nodetype_get, _wrap_lys_node_leaf_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "parent", _wrap_lys_node_leaf_parent_get, _wrap_lys_node_leaf_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "child", _wrap_lys_node_leaf_child_get, _wrap_lys_node_leaf_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "next", _wrap_lys_node_leaf_next_get, _wrap_lys_node_leaf_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "prev", _wrap_lys_node_leaf_prev_get, _wrap_lys_node_leaf_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "features_size", _wrap_lys_node_leaf_features_size_get, _wrap_lys_node_leaf_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "features", _wrap_lys_node_leaf_features_get, _wrap_lys_node_leaf_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "priv", _wrap_lys_node_leaf_priv_get, _wrap_lys_node_leaf_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "when", _wrap_lys_node_leaf_when_get, _wrap_lys_node_leaf_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "type", _wrap_lys_node_leaf_type_get, _wrap_lys_node_leaf_type_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "units", _wrap_lys_node_leaf_units_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "must_size", _wrap_lys_node_leaf_must_size_get, _wrap_lys_node_leaf_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "must", _wrap_lys_node_leaf_must_get, _wrap_lys_node_leaf_must_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaf_class, "dflt", _wrap_lys_node_leaf_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "name", _wrap_lys_node_leaflist_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "dsc", _wrap_lys_node_leaflist_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "ref", _wrap_lys_node_leaflist_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "flags", _wrap_lys_node_leaflist_flags_get, _wrap_lys_node_leaflist_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "nacm", _wrap_lys_node_leaflist_nacm_get, _wrap_lys_node_leaflist_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "module", _wrap_lys_node_leaflist_module_get, _wrap_lys_node_leaflist_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "nodetype", _wrap_lys_node_leaflist_nodetype_get, _wrap_lys_node_leaflist_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "parent", _wrap_lys_node_leaflist_parent_get, _wrap_lys_node_leaflist_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "child", _wrap_lys_node_leaflist_child_get, _wrap_lys_node_leaflist_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "next", _wrap_lys_node_leaflist_next_get, _wrap_lys_node_leaflist_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "prev", _wrap_lys_node_leaflist_prev_get, _wrap_lys_node_leaflist_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "features_size", _wrap_lys_node_leaflist_features_size_get, _wrap_lys_node_leaflist_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "features", _wrap_lys_node_leaflist_features_get, _wrap_lys_node_leaflist_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "priv", _wrap_lys_node_leaflist_priv_get, _wrap_lys_node_leaflist_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "when", _wrap_lys_node_leaflist_when_get, _wrap_lys_node_leaflist_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "type", _wrap_lys_node_leaflist_type_get, _wrap_lys_node_leaflist_type_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "units", _wrap_lys_node_leaflist_units_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "must_size", _wrap_lys_node_leaflist_must_size_get, _wrap_lys_node_leaflist_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "must", _wrap_lys_node_leaflist_must_get, _wrap_lys_node_leaflist_must_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "min", _wrap_lys_node_leaflist_min_get, _wrap_lys_node_leaflist_min_set);
SWIGV8_AddMemberVariable(_exports_lys_node_leaflist_class, "max", _wrap_lys_node_leaflist_max_get, _wrap_lys_node_leaflist_max_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "name", _wrap_lys_node_list_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "dsc", _wrap_lys_node_list_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "ref", _wrap_lys_node_list_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "flags", _wrap_lys_node_list_flags_get, _wrap_lys_node_list_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "nacm", _wrap_lys_node_list_nacm_get, _wrap_lys_node_list_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "module", _wrap_lys_node_list_module_get, _wrap_lys_node_list_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "nodetype", _wrap_lys_node_list_nodetype_get, _wrap_lys_node_list_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "parent", _wrap_lys_node_list_parent_get, _wrap_lys_node_list_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "child", _wrap_lys_node_list_child_get, _wrap_lys_node_list_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "next", _wrap_lys_node_list_next_get, _wrap_lys_node_list_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "prev", _wrap_lys_node_list_prev_get, _wrap_lys_node_list_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "features_size", _wrap_lys_node_list_features_size_get, _wrap_lys_node_list_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "features", _wrap_lys_node_list_features_get, _wrap_lys_node_list_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "priv", _wrap_lys_node_list_priv_get, _wrap_lys_node_list_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "when", _wrap_lys_node_list_when_get, _wrap_lys_node_list_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "min", _wrap_lys_node_list_min_get, _wrap_lys_node_list_min_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "max", _wrap_lys_node_list_max_get, _wrap_lys_node_list_max_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "must_size", _wrap_lys_node_list_must_size_get, _wrap_lys_node_list_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "tpdf_size", _wrap_lys_node_list_tpdf_size_get, _wrap_lys_node_list_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "keys_size", _wrap_lys_node_list_keys_size_get, _wrap_lys_node_list_keys_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "unique_size", _wrap_lys_node_list_unique_size_get, _wrap_lys_node_list_unique_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "must", _wrap_lys_node_list_must_get, _wrap_lys_node_list_must_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "tpdf", _wrap_lys_node_list_tpdf_get, _wrap_lys_node_list_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "keys", _wrap_lys_node_list_keys_get, _wrap_lys_node_list_keys_set);
SWIGV8_AddMemberVariable(_exports_lys_node_list_class, "unique", _wrap_lys_node_list_unique_get, _wrap_lys_node_list_unique_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "name", _wrap_lys_node_anyxml_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "dsc", _wrap_lys_node_anyxml_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "ref", _wrap_lys_node_anyxml_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "flags", _wrap_lys_node_anyxml_flags_get, _wrap_lys_node_anyxml_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "nacm", _wrap_lys_node_anyxml_nacm_get, _wrap_lys_node_anyxml_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "module", _wrap_lys_node_anyxml_module_get, _wrap_lys_node_anyxml_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "nodetype", _wrap_lys_node_anyxml_nodetype_get, _wrap_lys_node_anyxml_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "parent", _wrap_lys_node_anyxml_parent_get, _wrap_lys_node_anyxml_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "child", _wrap_lys_node_anyxml_child_get, _wrap_lys_node_anyxml_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "next", _wrap_lys_node_anyxml_next_get, _wrap_lys_node_anyxml_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "prev", _wrap_lys_node_anyxml_prev_get, _wrap_lys_node_anyxml_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "features_size", _wrap_lys_node_anyxml_features_size_get, _wrap_lys_node_anyxml_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "features", _wrap_lys_node_anyxml_features_get, _wrap_lys_node_anyxml_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "priv", _wrap_lys_node_anyxml_priv_get, _wrap_lys_node_anyxml_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "when", _wrap_lys_node_anyxml_when_get, _wrap_lys_node_anyxml_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "must_size", _wrap_lys_node_anyxml_must_size_get, _wrap_lys_node_anyxml_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_anyxml_class, "must", _wrap_lys_node_anyxml_must_get, _wrap_lys_node_anyxml_must_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "name", _wrap_lys_node_uses_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "dsc", _wrap_lys_node_uses_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "ref", _wrap_lys_node_uses_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "flags", _wrap_lys_node_uses_flags_get, _wrap_lys_node_uses_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "nacm", _wrap_lys_node_uses_nacm_get, _wrap_lys_node_uses_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "module", _wrap_lys_node_uses_module_get, _wrap_lys_node_uses_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "nodetype", _wrap_lys_node_uses_nodetype_get, _wrap_lys_node_uses_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "parent", _wrap_lys_node_uses_parent_get, _wrap_lys_node_uses_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "child", _wrap_lys_node_uses_child_get, _wrap_lys_node_uses_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "next", _wrap_lys_node_uses_next_get, _wrap_lys_node_uses_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "prev", _wrap_lys_node_uses_prev_get, _wrap_lys_node_uses_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "features_size", _wrap_lys_node_uses_features_size_get, _wrap_lys_node_uses_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "features", _wrap_lys_node_uses_features_get, _wrap_lys_node_uses_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "priv", _wrap_lys_node_uses_priv_get, _wrap_lys_node_uses_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "when", _wrap_lys_node_uses_when_get, _wrap_lys_node_uses_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "grp", _wrap_lys_node_uses_grp_get, _wrap_lys_node_uses_grp_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "refine_size", _wrap_lys_node_uses_refine_size_get, _wrap_lys_node_uses_refine_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "augment_size", _wrap_lys_node_uses_augment_size_get, _wrap_lys_node_uses_augment_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "refine", _wrap_lys_node_uses_refine_get, _wrap_lys_node_uses_refine_set);
SWIGV8_AddMemberVariable(_exports_lys_node_uses_class, "augment", _wrap_lys_node_uses_augment_get, _wrap_lys_node_uses_augment_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "name", _wrap_lys_node_grp_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "dsc", _wrap_lys_node_grp_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "ref", _wrap_lys_node_grp_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "flags", _wrap_lys_node_grp_flags_get, _wrap_lys_node_grp_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "nacm", _wrap_lys_node_grp_nacm_get, _wrap_lys_node_grp_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "module", _wrap_lys_node_grp_module_get, _wrap_lys_node_grp_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "nodetype", _wrap_lys_node_grp_nodetype_get, _wrap_lys_node_grp_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "parent", _wrap_lys_node_grp_parent_get, _wrap_lys_node_grp_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "child", _wrap_lys_node_grp_child_get, _wrap_lys_node_grp_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "next", _wrap_lys_node_grp_next_get, _wrap_lys_node_grp_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "prev", _wrap_lys_node_grp_prev_get, _wrap_lys_node_grp_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "features_size", _wrap_lys_node_grp_features_size_get, _wrap_lys_node_grp_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "features", _wrap_lys_node_grp_features_get, _wrap_lys_node_grp_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "priv", _wrap_lys_node_grp_priv_get, _wrap_lys_node_grp_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "tpdf_size", _wrap_lys_node_grp_tpdf_size_get, _wrap_lys_node_grp_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_grp_class, "tpdf", _wrap_lys_node_grp_tpdf_get, _wrap_lys_node_grp_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "name", _wrap_lys_node_case_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "dsc", _wrap_lys_node_case_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "ref", _wrap_lys_node_case_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "flags", _wrap_lys_node_case_flags_get, _wrap_lys_node_case_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "nacm", _wrap_lys_node_case_nacm_get, _wrap_lys_node_case_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "module", _wrap_lys_node_case_module_get, _wrap_lys_node_case_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "nodetype", _wrap_lys_node_case_nodetype_get, _wrap_lys_node_case_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "parent", _wrap_lys_node_case_parent_get, _wrap_lys_node_case_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "child", _wrap_lys_node_case_child_get, _wrap_lys_node_case_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "next", _wrap_lys_node_case_next_get, _wrap_lys_node_case_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "prev", _wrap_lys_node_case_prev_get, _wrap_lys_node_case_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "features_size", _wrap_lys_node_case_features_size_get, _wrap_lys_node_case_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "features", _wrap_lys_node_case_features_get, _wrap_lys_node_case_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "priv", _wrap_lys_node_case_priv_get, _wrap_lys_node_case_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_case_class, "when", _wrap_lys_node_case_when_get, _wrap_lys_node_case_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "name", _wrap_lys_node_rpc_inout_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "fill1", _wrap_lys_node_rpc_inout_fill1_get, _wrap_lys_node_rpc_inout_fill1_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "fill2", _wrap_lys_node_rpc_inout_fill2_get, _wrap_lys_node_rpc_inout_fill2_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "module", _wrap_lys_node_rpc_inout_module_get, _wrap_lys_node_rpc_inout_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "nodetype", _wrap_lys_node_rpc_inout_nodetype_get, _wrap_lys_node_rpc_inout_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "parent", _wrap_lys_node_rpc_inout_parent_get, _wrap_lys_node_rpc_inout_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "child", _wrap_lys_node_rpc_inout_child_get, _wrap_lys_node_rpc_inout_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "next", _wrap_lys_node_rpc_inout_next_get, _wrap_lys_node_rpc_inout_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "prev", _wrap_lys_node_rpc_inout_prev_get, _wrap_lys_node_rpc_inout_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "tpdf_size", _wrap_lys_node_rpc_inout_tpdf_size_get, _wrap_lys_node_rpc_inout_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "tpdf", _wrap_lys_node_rpc_inout_tpdf_get, _wrap_lys_node_rpc_inout_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_inout_class, "priv", _wrap_lys_node_rpc_inout_priv_get, _wrap_lys_node_rpc_inout_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "name", _wrap_lys_node_notif_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "dsc", _wrap_lys_node_notif_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "ref", _wrap_lys_node_notif_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "flags", _wrap_lys_node_notif_flags_get, _wrap_lys_node_notif_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "nacm", _wrap_lys_node_notif_nacm_get, _wrap_lys_node_notif_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "module", _wrap_lys_node_notif_module_get, _wrap_lys_node_notif_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "nodetype", _wrap_lys_node_notif_nodetype_get, _wrap_lys_node_notif_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "parent", _wrap_lys_node_notif_parent_get, _wrap_lys_node_notif_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "child", _wrap_lys_node_notif_child_get, _wrap_lys_node_notif_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "next", _wrap_lys_node_notif_next_get, _wrap_lys_node_notif_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "prev", _wrap_lys_node_notif_prev_get, _wrap_lys_node_notif_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "features_size", _wrap_lys_node_notif_features_size_get, _wrap_lys_node_notif_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "features", _wrap_lys_node_notif_features_get, _wrap_lys_node_notif_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "priv", _wrap_lys_node_notif_priv_get, _wrap_lys_node_notif_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "tpdf_size", _wrap_lys_node_notif_tpdf_size_get, _wrap_lys_node_notif_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_notif_class, "tpdf", _wrap_lys_node_notif_tpdf_get, _wrap_lys_node_notif_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "name", _wrap_lys_node_rpc_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "dsc", _wrap_lys_node_rpc_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "ref", _wrap_lys_node_rpc_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "flags", _wrap_lys_node_rpc_flags_get, _wrap_lys_node_rpc_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "nacm", _wrap_lys_node_rpc_nacm_get, _wrap_lys_node_rpc_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "module", _wrap_lys_node_rpc_module_get, _wrap_lys_node_rpc_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "nodetype", _wrap_lys_node_rpc_nodetype_get, _wrap_lys_node_rpc_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "parent", _wrap_lys_node_rpc_parent_get, _wrap_lys_node_rpc_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "child", _wrap_lys_node_rpc_child_get, _wrap_lys_node_rpc_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "next", _wrap_lys_node_rpc_next_get, _wrap_lys_node_rpc_next_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "prev", _wrap_lys_node_rpc_prev_get, _wrap_lys_node_rpc_prev_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "features_size", _wrap_lys_node_rpc_features_size_get, _wrap_lys_node_rpc_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "features", _wrap_lys_node_rpc_features_get, _wrap_lys_node_rpc_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "priv", _wrap_lys_node_rpc_priv_get, _wrap_lys_node_rpc_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "tpdf_size", _wrap_lys_node_rpc_tpdf_size_get, _wrap_lys_node_rpc_tpdf_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_rpc_class, "tpdf", _wrap_lys_node_rpc_tpdf_get, _wrap_lys_node_rpc_tpdf_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "target_name", _wrap_lys_node_augment_target_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "dsc", _wrap_lys_node_augment_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "ref", _wrap_lys_node_augment_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "flags", _wrap_lys_node_augment_flags_get, _wrap_lys_node_augment_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "nacm", _wrap_lys_node_augment_nacm_get, _wrap_lys_node_augment_nacm_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "module", _wrap_lys_node_augment_module_get, _wrap_lys_node_augment_module_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "nodetype", _wrap_lys_node_augment_nodetype_get, _wrap_lys_node_augment_nodetype_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "parent", _wrap_lys_node_augment_parent_get, _wrap_lys_node_augment_parent_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "child", _wrap_lys_node_augment_child_get, _wrap_lys_node_augment_child_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "when", _wrap_lys_node_augment_when_get, _wrap_lys_node_augment_when_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "target", _wrap_lys_node_augment_target_get, _wrap_lys_node_augment_target_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "features_size", _wrap_lys_node_augment_features_size_get, _wrap_lys_node_augment_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "features", _wrap_lys_node_augment_features_get, _wrap_lys_node_augment_features_set);
SWIGV8_AddMemberVariable(_exports_lys_node_augment_class, "priv", _wrap_lys_node_augment_priv_get, _wrap_lys_node_augment_priv_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_mod_list_class, "min", _wrap_lys_refine_mod_list_min_get, _wrap_lys_refine_mod_list_min_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_mod_list_class, "max", _wrap_lys_refine_mod_list_max_get, _wrap_lys_refine_mod_list_max_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_mod_class, "dflt", _wrap_lys_refine_mod_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_refine_mod_class, "presence", _wrap_lys_refine_mod_presence_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_refine_mod_class, "list", _wrap_lys_refine_mod_list_get, _wrap_lys_refine_mod_list_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "target_name", _wrap_lys_refine_target_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "dsc", _wrap_lys_refine_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "ref", _wrap_lys_refine_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "flags", _wrap_lys_refine_flags_get, _wrap_lys_refine_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "target_type", _wrap_lys_refine_target_type_get, _wrap_lys_refine_target_type_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "must_size", _wrap_lys_refine_must_size_get, _wrap_lys_refine_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "must", _wrap_lys_refine_must_get, _wrap_lys_refine_must_set);
SWIGV8_AddMemberVariable(_exports_lys_refine_class, "mod", _wrap_lys_refine_mod_get, _wrap_lys_refine_mod_set);
SWIGV8_AddStaticVariable(exports_obj, "LY_DEVIATE_NO", _wrap_LY_DEVIATE_NO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_DEVIATE_ADD", _wrap_LY_DEVIATE_ADD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_DEVIATE_RPL", _wrap_LY_DEVIATE_RPL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LY_DEVIATE_DEL", _wrap_LY_DEVIATE_DEL, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "mod", _wrap_lys_deviate_mod_get, _wrap_lys_deviate_mod_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "flags", _wrap_lys_deviate_flags_get, _wrap_lys_deviate_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "dflt", _wrap_lys_deviate_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "min", _wrap_lys_deviate_min_get, _wrap_lys_deviate_min_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "max", _wrap_lys_deviate_max_get, _wrap_lys_deviate_max_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "min_set", _wrap_lys_deviate_min_set_get, _wrap_lys_deviate_min_set_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "max_set", _wrap_lys_deviate_max_set_get, _wrap_lys_deviate_max_set_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "must_size", _wrap_lys_deviate_must_size_get, _wrap_lys_deviate_must_size_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "unique_size", _wrap_lys_deviate_unique_size_get, _wrap_lys_deviate_unique_size_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "must", _wrap_lys_deviate_must_get, _wrap_lys_deviate_must_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "unique", _wrap_lys_deviate_unique_get, _wrap_lys_deviate_unique_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "type", _wrap_lys_deviate_type_get, _wrap_lys_deviate_type_set);
SWIGV8_AddMemberVariable(_exports_lys_deviate_class, "units", _wrap_lys_deviate_units_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_deviation_class, "target_name", _wrap_lys_deviation_target_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_deviation_class, "dsc", _wrap_lys_deviation_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_deviation_class, "ref", _wrap_lys_deviation_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_deviation_class, "orig_node", _wrap_lys_deviation_orig_node_get, _wrap_lys_deviation_orig_node_set);
SWIGV8_AddMemberVariable(_exports_lys_deviation_class, "deviate_size", _wrap_lys_deviation_deviate_size_get, _wrap_lys_deviation_deviate_size_set);
SWIGV8_AddMemberVariable(_exports_lys_deviation_class, "deviate", _wrap_lys_deviation_deviate_get, _wrap_lys_deviation_deviate_set);
SWIGV8_AddMemberVariable(_exports_lys_import_class, "module", _wrap_lys_import_module_get, _wrap_lys_import_module_set);
SWIGV8_AddMemberVariable(_exports_lys_import_class, "prefix", _wrap_lys_import_prefix_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_import_class, "rev", _wrap_lys_import_rev_get, _wrap_lys_import_rev_set);
SWIGV8_AddMemberVariable(_exports_lys_import_class, "external", _wrap_lys_import_external_get, _wrap_lys_import_external_set);
SWIGV8_AddMemberVariable(_exports_lys_include_class, "submodule", _wrap_lys_include_submodule_get, _wrap_lys_include_submodule_set);
SWIGV8_AddMemberVariable(_exports_lys_include_class, "rev", _wrap_lys_include_rev_get, _wrap_lys_include_rev_set);
SWIGV8_AddMemberVariable(_exports_lys_include_class, "external", _wrap_lys_include_external_get, _wrap_lys_include_external_set);
SWIGV8_AddMemberVariable(_exports_lys_revision_class, "date", _wrap_lys_revision_date_get, _wrap_lys_revision_date_set);
SWIGV8_AddMemberVariable(_exports_lys_revision_class, "dsc", _wrap_lys_revision_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_revision_class, "ref", _wrap_lys_revision_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "name", _wrap_lys_tpdf_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "dsc", _wrap_lys_tpdf_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "ref", _wrap_lys_tpdf_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "flags", _wrap_lys_tpdf_flags_get, _wrap_lys_tpdf_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "module", _wrap_lys_tpdf_module_get, _wrap_lys_tpdf_module_set);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "type", _wrap_lys_tpdf_type_get, _wrap_lys_tpdf_type_set);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "units", _wrap_lys_tpdf_units_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_tpdf_class, "dflt", _wrap_lys_tpdf_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_unique_class, "expr", _wrap_lys_unique_expr_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_unique_class, "expr_size", _wrap_lys_unique_expr_size_get, _wrap_lys_unique_expr_size_set);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "name", _wrap_lys_feature_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "dsc", _wrap_lys_feature_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "ref", _wrap_lys_feature_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "flags", _wrap_lys_feature_flags_get, _wrap_lys_feature_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "padding", _wrap_lys_feature_padding_get, _wrap_lys_feature_padding_set);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "module", _wrap_lys_feature_module_get, _wrap_lys_feature_module_set);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "features_size", _wrap_lys_feature_features_size_get, _wrap_lys_feature_features_size_set);
SWIGV8_AddMemberVariable(_exports_lys_feature_class, "features", _wrap_lys_feature_features_get, _wrap_lys_feature_features_set);
SWIGV8_AddMemberVariable(_exports_lys_restr_class, "expr", _wrap_lys_restr_expr_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_restr_class, "dsc", _wrap_lys_restr_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_restr_class, "ref", _wrap_lys_restr_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_restr_class, "eapptag", _wrap_lys_restr_eapptag_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_restr_class, "emsg", _wrap_lys_restr_emsg_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_when_class, "cond", _wrap_lys_when_cond_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_when_class, "dsc", _wrap_lys_when_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_when_class, "ref", _wrap_lys_when_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "name", _wrap_lys_ident_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "dsc", _wrap_lys_ident_dsc_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "ref", _wrap_lys_ident_ref_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "flags", _wrap_lys_ident_flags_get, _wrap_lys_ident_flags_set);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "module", _wrap_lys_ident_module_get, _wrap_lys_ident_module_set);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "base", _wrap_lys_ident_base_get, _wrap_lys_ident_base_set);
SWIGV8_AddMemberVariable(_exports_lys_ident_class, "der", _wrap_lys_ident_der_get, _wrap_lys_ident_der_set);
SWIGV8_AddStaticVariable(exports_obj, "LYS_GETNEXT_WITHCHOICE", _wrap_LYS_GETNEXT_WITHCHOICE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_GETNEXT_WITHCASE", _wrap_LYS_GETNEXT_WITHCASE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_GETNEXT_WITHGROUPING", _wrap_LYS_GETNEXT_WITHGROUPING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYS_GETNEXT_WITHINOUT", _wrap_LYS_GETNEXT_WITHINOUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_UNKNOWN", _wrap_LYD_UNKNOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_XML", _wrap_LYD_XML, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_JSON", _wrap_LYD_JSON, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_attr_class, "next", _wrap_lyd_attr_next_get, _wrap_lyd_attr_next_set);
SWIGV8_AddMemberVariable(_exports_lyd_attr_class, "module", _wrap_lyd_attr_module_get, _wrap_lyd_attr_module_set);
SWIGV8_AddMemberVariable(_exports_lyd_attr_class, "name", _wrap_lyd_attr_name_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_attr_class, "value", _wrap_lyd_attr_value_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "binary", _wrap_lyd_val_binary_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "bit", _wrap_lyd_val_bit_get, _wrap_lyd_val_bit_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "bln", _wrap_lyd_val_bln_get, _wrap_lyd_val_bln_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "dec64", _wrap_lyd_val_dec64_get, _wrap_lyd_val_dec64_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "enm", _wrap_lyd_val_enm_get, _wrap_lyd_val_enm_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "ident", _wrap_lyd_val_ident_get, _wrap_lyd_val_ident_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "instance", _wrap_lyd_val_instance_get, _wrap_lyd_val_instance_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "int8", _wrap_lyd_val_int8_get, _wrap_lyd_val_int8_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "int16", _wrap_lyd_val_int16_get, _wrap_lyd_val_int16_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "int32", _wrap_lyd_val_int32_get, _wrap_lyd_val_int32_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "int64", _wrap_lyd_val_int64_get, _wrap_lyd_val_int64_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "leafref", _wrap_lyd_val_leafref_get, _wrap_lyd_val_leafref_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "string", _wrap_lyd_val_string_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "uint8", _wrap_lyd_val_uint8_get, _wrap_lyd_val_uint8_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "uint16", _wrap_lyd_val_uint16_get, _wrap_lyd_val_uint16_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "uint32", _wrap_lyd_val_uint32_get, _wrap_lyd_val_uint32_set);
SWIGV8_AddMemberVariable(_exports_lyd_val_class, "uint64", _wrap_lyd_val_uint64_get, _wrap_lyd_val_uint64_set);
SWIGV8_AddStaticVariable(exports_obj, "LYD_VAL_OK", _wrap_LYD_VAL_OK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_VAL_UNIQUE", _wrap_LYD_VAL_UNIQUE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_VAL_NOT", _wrap_LYD_VAL_NOT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_VAL_INUSE", _wrap_LYD_VAL_INUSE, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "schema", _wrap_lyd_node_schema_get, _wrap_lyd_node_schema_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "validity", _wrap_lyd_node_validity_get, _wrap_lyd_node_validity_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "dflt", _wrap_lyd_node_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "when_status", _wrap_lyd_node_when_status_get, _wrap_lyd_node_when_status_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "attr", _wrap_lyd_node_attr_get, _wrap_lyd_node_attr_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "next", _wrap_lyd_node_next_get, _wrap_lyd_node_next_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "prev", _wrap_lyd_node_prev_get, _wrap_lyd_node_prev_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "parent", _wrap_lyd_node_parent_get, _wrap_lyd_node_parent_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_class, "child", _wrap_lyd_node_child_get, _wrap_lyd_node_child_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "schema", _wrap_lyd_node_leaf_list_schema_get, _wrap_lyd_node_leaf_list_schema_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "validity", _wrap_lyd_node_leaf_list_validity_get, _wrap_lyd_node_leaf_list_validity_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "dflt", _wrap_lyd_node_leaf_list_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "when_status", _wrap_lyd_node_leaf_list_when_status_get, _wrap_lyd_node_leaf_list_when_status_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "attr", _wrap_lyd_node_leaf_list_attr_get, _wrap_lyd_node_leaf_list_attr_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "next", _wrap_lyd_node_leaf_list_next_get, _wrap_lyd_node_leaf_list_next_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "prev", _wrap_lyd_node_leaf_list_prev_get, _wrap_lyd_node_leaf_list_prev_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "parent", _wrap_lyd_node_leaf_list_parent_get, _wrap_lyd_node_leaf_list_parent_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "value_str", _wrap_lyd_node_leaf_list_value_str_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "value", _wrap_lyd_node_leaf_list_value_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_node_leaf_list_class, "value_type", _wrap_lyd_node_leaf_list_value_type_get, _wrap_lyd_node_leaf_list_value_type_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_value_class, "str", _wrap_lyd_node_anyxml_value_str_get, _wrap_lyd_node_anyxml_value_str_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_value_class, "xml", _wrap_lyd_node_anyxml_value_xml_get, _wrap_lyd_node_anyxml_value_xml_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "schema", _wrap_lyd_node_anyxml_schema_get, _wrap_lyd_node_anyxml_schema_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "validity", _wrap_lyd_node_anyxml_validity_get, _wrap_lyd_node_anyxml_validity_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "dflt", _wrap_lyd_node_anyxml_dflt_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "when_status", _wrap_lyd_node_anyxml_when_status_get, _wrap_lyd_node_anyxml_when_status_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "attr", _wrap_lyd_node_anyxml_attr_get, _wrap_lyd_node_anyxml_attr_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "next", _wrap_lyd_node_anyxml_next_get, _wrap_lyd_node_anyxml_next_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "prev", _wrap_lyd_node_anyxml_prev_get, _wrap_lyd_node_anyxml_prev_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "parent", _wrap_lyd_node_anyxml_parent_get, _wrap_lyd_node_anyxml_parent_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "xml_struct", _wrap_lyd_node_anyxml_xml_struct_get, _wrap_lyd_node_anyxml_xml_struct_set);
SWIGV8_AddMemberVariable(_exports_lyd_node_anyxml_class, "value", _wrap_lyd_node_anyxml_value_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_DIFF_END", _wrap_LYD_DIFF_END, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_DIFF_DELETED", _wrap_LYD_DIFF_DELETED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_DIFF_CHANGED", _wrap_LYD_DIFF_CHANGED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_DIFF_MOVEDAFTER1", _wrap_LYD_DIFF_MOVEDAFTER1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_DIFF_CREATED", _wrap_LYD_DIFF_CREATED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_DIFF_MOVEDAFTER2", _wrap_LYD_DIFF_MOVEDAFTER2, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_lyd_difflist_class, "type", _wrap_lyd_difflist_type_get, _wrap_lyd_difflist_type_set);
SWIGV8_AddMemberVariable(_exports_lyd_difflist_class, "first", _wrap_lyd_difflist_first_get, _wrap_lyd_difflist_first_set);
SWIGV8_AddMemberVariable(_exports_lyd_difflist_class, "second", _wrap_lyd_difflist_second_get, _wrap_lyd_difflist_second_set);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_DATA", _wrap_LYD_OPT_DATA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_CONFIG", _wrap_LYD_OPT_CONFIG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_GET", _wrap_LYD_OPT_GET, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_GETCONFIG", _wrap_LYD_OPT_GETCONFIG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_EDIT", _wrap_LYD_OPT_EDIT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_RPC", _wrap_LYD_OPT_RPC, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_RPCREPLY", _wrap_LYD_OPT_RPCREPLY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_NOTIF", _wrap_LYD_OPT_NOTIF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_TYPEMASK", _wrap_LYD_OPT_TYPEMASK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_STRICT", _wrap_LYD_OPT_STRICT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_DESTRUCT", _wrap_LYD_OPT_DESTRUCT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_OBSOLETE", _wrap_LYD_OPT_OBSOLETE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_NOSIBLINGS", _wrap_LYD_OPT_NOSIBLINGS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_TRUSTED", _wrap_LYD_OPT_TRUSTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_NOAUTODEL", _wrap_LYD_OPT_NOAUTODEL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_OPT_KEEPEMPTYCONT", _wrap_LYD_OPT_KEEPEMPTYCONT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_WD_MASK", _wrap_LYD_WD_MASK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_WD_EXPLICIT", _wrap_LYD_WD_EXPLICIT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_WD_TRIM", _wrap_LYD_WD_TRIM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_WD_ALL", _wrap_LYD_WD_ALL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_WD_ALL_TAG", _wrap_LYD_WD_ALL_TAG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_WD_IMPL_TAG", _wrap_LYD_WD_IMPL_TAG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_PATH_OPT_UPDATE", _wrap_LYD_PATH_OPT_UPDATE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_PATH_OPT_NOPARENT", _wrap_LYD_PATH_OPT_NOPARENT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "LYD_PATH_OPT_OUTPUT", _wrap_LYD_PATH_OPT_OUTPUT, JS_veto_set_variable);


  /* setup inheritances */
  

  /* class instances */
  /* Class: ly_set_set (_exports_ly_set_set) */
v8::Handle<v8::FunctionTemplate> _exports_ly_set_set_class_0 = SWIGV8_CreateClassTemplate("ly_set_set");
_exports_ly_set_set_class_0->SetCallHandler(_wrap_new_ly_set_set);
_exports_ly_set_set_class_0->Inherit(_exports_ly_set_set_class);
_exports_ly_set_set_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ly_set_set_obj = _exports_ly_set_set_class_0->GetFunction();
/* Class: ly_set (_exports_ly_set) */
v8::Handle<v8::FunctionTemplate> _exports_ly_set_class_0 = SWIGV8_CreateClassTemplate("ly_set");
_exports_ly_set_class_0->SetCallHandler(_wrap_new_ly_set);
_exports_ly_set_class_0->Inherit(_exports_ly_set_class);
_exports_ly_set_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ly_set_obj = _exports_ly_set_class_0->GetFunction();
/* Class: lyxml_ns (_exports_lyxml_ns) */
v8::Handle<v8::FunctionTemplate> _exports_lyxml_ns_class_0 = SWIGV8_CreateClassTemplate("lyxml_ns");
_exports_lyxml_ns_class_0->SetCallHandler(_wrap_new_lyxml_ns);
_exports_lyxml_ns_class_0->Inherit(_exports_lyxml_ns_class);
_exports_lyxml_ns_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyxml_ns_obj = _exports_lyxml_ns_class_0->GetFunction();
/* Class: lyxml_attr (_exports_lyxml_attr) */
v8::Handle<v8::FunctionTemplate> _exports_lyxml_attr_class_0 = SWIGV8_CreateClassTemplate("lyxml_attr");
_exports_lyxml_attr_class_0->SetCallHandler(_wrap_new_lyxml_attr);
_exports_lyxml_attr_class_0->Inherit(_exports_lyxml_attr_class);
_exports_lyxml_attr_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyxml_attr_obj = _exports_lyxml_attr_class_0->GetFunction();
/* Class: lyxml_elem (_exports_lyxml_elem) */
v8::Handle<v8::FunctionTemplate> _exports_lyxml_elem_class_0 = SWIGV8_CreateClassTemplate("lyxml_elem");
_exports_lyxml_elem_class_0->SetCallHandler(_wrap_new_lyxml_elem);
_exports_lyxml_elem_class_0->Inherit(_exports_lyxml_elem_class);
_exports_lyxml_elem_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyxml_elem_obj = _exports_lyxml_elem_class_0->GetFunction();
/* Class: lys_module (_exports_lys_module) */
v8::Handle<v8::FunctionTemplate> _exports_lys_module_class_0 = SWIGV8_CreateClassTemplate("lys_module");
_exports_lys_module_class_0->SetCallHandler(_wrap_new_lys_module);
_exports_lys_module_class_0->Inherit(_exports_lys_module_class);
_exports_lys_module_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_module_obj = _exports_lys_module_class_0->GetFunction();
/* Class: lys_submodule (_exports_lys_submodule) */
v8::Handle<v8::FunctionTemplate> _exports_lys_submodule_class_0 = SWIGV8_CreateClassTemplate("lys_submodule");
_exports_lys_submodule_class_0->SetCallHandler(_wrap_new_lys_submodule);
_exports_lys_submodule_class_0->Inherit(_exports_lys_submodule_class);
_exports_lys_submodule_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_submodule_obj = _exports_lys_submodule_class_0->GetFunction();
/* Class: lys_type_info_binary (_exports_lys_type_info_binary) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_binary_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_binary");
_exports_lys_type_info_binary_class_0->SetCallHandler(_wrap_new_lys_type_info_binary);
_exports_lys_type_info_binary_class_0->Inherit(_exports_lys_type_info_binary_class);
_exports_lys_type_info_binary_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_binary_obj = _exports_lys_type_info_binary_class_0->GetFunction();
/* Class: lys_type_bit (_exports_lys_type_bit) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_bit_class_0 = SWIGV8_CreateClassTemplate("lys_type_bit");
_exports_lys_type_bit_class_0->SetCallHandler(_wrap_new_lys_type_bit);
_exports_lys_type_bit_class_0->Inherit(_exports_lys_type_bit_class);
_exports_lys_type_bit_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_bit_obj = _exports_lys_type_bit_class_0->GetFunction();
/* Class: lys_type_info_bits (_exports_lys_type_info_bits) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_bits_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_bits");
_exports_lys_type_info_bits_class_0->SetCallHandler(_wrap_new_lys_type_info_bits);
_exports_lys_type_info_bits_class_0->Inherit(_exports_lys_type_info_bits_class);
_exports_lys_type_info_bits_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_bits_obj = _exports_lys_type_info_bits_class_0->GetFunction();
/* Class: lys_type_info_dec64 (_exports_lys_type_info_dec64) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_dec64_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_dec64");
_exports_lys_type_info_dec64_class_0->SetCallHandler(_wrap_new_lys_type_info_dec64);
_exports_lys_type_info_dec64_class_0->Inherit(_exports_lys_type_info_dec64_class);
_exports_lys_type_info_dec64_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_dec64_obj = _exports_lys_type_info_dec64_class_0->GetFunction();
/* Class: lys_type_enum (_exports_lys_type_enum) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_enum_class_0 = SWIGV8_CreateClassTemplate("lys_type_enum");
_exports_lys_type_enum_class_0->SetCallHandler(_wrap_new_lys_type_enum);
_exports_lys_type_enum_class_0->Inherit(_exports_lys_type_enum_class);
_exports_lys_type_enum_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_enum_obj = _exports_lys_type_enum_class_0->GetFunction();
/* Class: lys_type_info_enums (_exports_lys_type_info_enums) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_enums_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_enums");
_exports_lys_type_info_enums_class_0->SetCallHandler(_wrap_new_lys_type_info_enums);
_exports_lys_type_info_enums_class_0->Inherit(_exports_lys_type_info_enums_class);
_exports_lys_type_info_enums_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_enums_obj = _exports_lys_type_info_enums_class_0->GetFunction();
/* Class: lys_type_info_ident (_exports_lys_type_info_ident) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_ident_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_ident");
_exports_lys_type_info_ident_class_0->SetCallHandler(_wrap_new_lys_type_info_ident);
_exports_lys_type_info_ident_class_0->Inherit(_exports_lys_type_info_ident_class);
_exports_lys_type_info_ident_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_ident_obj = _exports_lys_type_info_ident_class_0->GetFunction();
/* Class: lys_type_info_inst (_exports_lys_type_info_inst) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_inst_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_inst");
_exports_lys_type_info_inst_class_0->SetCallHandler(_wrap_new_lys_type_info_inst);
_exports_lys_type_info_inst_class_0->Inherit(_exports_lys_type_info_inst_class);
_exports_lys_type_info_inst_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_inst_obj = _exports_lys_type_info_inst_class_0->GetFunction();
/* Class: lys_type_info_num (_exports_lys_type_info_num) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_num_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_num");
_exports_lys_type_info_num_class_0->SetCallHandler(_wrap_new_lys_type_info_num);
_exports_lys_type_info_num_class_0->Inherit(_exports_lys_type_info_num_class);
_exports_lys_type_info_num_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_num_obj = _exports_lys_type_info_num_class_0->GetFunction();
/* Class: lys_type_info_lref (_exports_lys_type_info_lref) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_lref_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_lref");
_exports_lys_type_info_lref_class_0->SetCallHandler(_wrap_new_lys_type_info_lref);
_exports_lys_type_info_lref_class_0->Inherit(_exports_lys_type_info_lref_class);
_exports_lys_type_info_lref_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_lref_obj = _exports_lys_type_info_lref_class_0->GetFunction();
/* Class: lys_type_info_str (_exports_lys_type_info_str) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_str_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_str");
_exports_lys_type_info_str_class_0->SetCallHandler(_wrap_new_lys_type_info_str);
_exports_lys_type_info_str_class_0->Inherit(_exports_lys_type_info_str_class);
_exports_lys_type_info_str_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_str_obj = _exports_lys_type_info_str_class_0->GetFunction();
/* Class: lys_type_info_union (_exports_lys_type_info_union) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_union_class_0 = SWIGV8_CreateClassTemplate("lys_type_info_union");
_exports_lys_type_info_union_class_0->SetCallHandler(_wrap_new_lys_type_info_union);
_exports_lys_type_info_union_class_0->Inherit(_exports_lys_type_info_union_class);
_exports_lys_type_info_union_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_union_obj = _exports_lys_type_info_union_class_0->GetFunction();
/* Class: lys_type_info (_exports_lys_type_info) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_info_class_0 = SWIGV8_CreateClassTemplate("lys_type_info");
_exports_lys_type_info_class_0->SetCallHandler(_wrap_new_lys_type_info);
_exports_lys_type_info_class_0->Inherit(_exports_lys_type_info_class);
_exports_lys_type_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_info_obj = _exports_lys_type_info_class_0->GetFunction();
/* Class: lys_type (_exports_lys_type) */
v8::Handle<v8::FunctionTemplate> _exports_lys_type_class_0 = SWIGV8_CreateClassTemplate("lys_type");
_exports_lys_type_class_0->SetCallHandler(_wrap_new_lys_type);
_exports_lys_type_class_0->Inherit(_exports_lys_type_class);
_exports_lys_type_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_type_obj = _exports_lys_type_class_0->GetFunction();
/* Class: lys_node (_exports_lys_node) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_class_0 = SWIGV8_CreateClassTemplate("lys_node");
_exports_lys_node_class_0->SetCallHandler(_wrap_new_lys_node);
_exports_lys_node_class_0->Inherit(_exports_lys_node_class);
_exports_lys_node_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_obj = _exports_lys_node_class_0->GetFunction();
/* Class: lys_node_container (_exports_lys_node_container) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_container_class_0 = SWIGV8_CreateClassTemplate("lys_node_container");
_exports_lys_node_container_class_0->SetCallHandler(_wrap_new_lys_node_container);
_exports_lys_node_container_class_0->Inherit(_exports_lys_node_container_class);
_exports_lys_node_container_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_container_obj = _exports_lys_node_container_class_0->GetFunction();
/* Class: lys_node_choice (_exports_lys_node_choice) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_choice_class_0 = SWIGV8_CreateClassTemplate("lys_node_choice");
_exports_lys_node_choice_class_0->SetCallHandler(_wrap_new_lys_node_choice);
_exports_lys_node_choice_class_0->Inherit(_exports_lys_node_choice_class);
_exports_lys_node_choice_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_choice_obj = _exports_lys_node_choice_class_0->GetFunction();
/* Class: lys_node_leaf (_exports_lys_node_leaf) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_leaf_class_0 = SWIGV8_CreateClassTemplate("lys_node_leaf");
_exports_lys_node_leaf_class_0->SetCallHandler(_wrap_new_lys_node_leaf);
_exports_lys_node_leaf_class_0->Inherit(_exports_lys_node_leaf_class);
_exports_lys_node_leaf_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_leaf_obj = _exports_lys_node_leaf_class_0->GetFunction();
/* Class: lys_node_leaflist (_exports_lys_node_leaflist) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_leaflist_class_0 = SWIGV8_CreateClassTemplate("lys_node_leaflist");
_exports_lys_node_leaflist_class_0->SetCallHandler(_wrap_new_lys_node_leaflist);
_exports_lys_node_leaflist_class_0->Inherit(_exports_lys_node_leaflist_class);
_exports_lys_node_leaflist_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_leaflist_obj = _exports_lys_node_leaflist_class_0->GetFunction();
/* Class: lys_node_list (_exports_lys_node_list) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_list_class_0 = SWIGV8_CreateClassTemplate("lys_node_list");
_exports_lys_node_list_class_0->SetCallHandler(_wrap_new_lys_node_list);
_exports_lys_node_list_class_0->Inherit(_exports_lys_node_list_class);
_exports_lys_node_list_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_list_obj = _exports_lys_node_list_class_0->GetFunction();
/* Class: lys_node_anyxml (_exports_lys_node_anyxml) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_anyxml_class_0 = SWIGV8_CreateClassTemplate("lys_node_anyxml");
_exports_lys_node_anyxml_class_0->SetCallHandler(_wrap_new_lys_node_anyxml);
_exports_lys_node_anyxml_class_0->Inherit(_exports_lys_node_anyxml_class);
_exports_lys_node_anyxml_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_anyxml_obj = _exports_lys_node_anyxml_class_0->GetFunction();
/* Class: lys_node_uses (_exports_lys_node_uses) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_uses_class_0 = SWIGV8_CreateClassTemplate("lys_node_uses");
_exports_lys_node_uses_class_0->SetCallHandler(_wrap_new_lys_node_uses);
_exports_lys_node_uses_class_0->Inherit(_exports_lys_node_uses_class);
_exports_lys_node_uses_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_uses_obj = _exports_lys_node_uses_class_0->GetFunction();
/* Class: lys_node_grp (_exports_lys_node_grp) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_grp_class_0 = SWIGV8_CreateClassTemplate("lys_node_grp");
_exports_lys_node_grp_class_0->SetCallHandler(_wrap_new_lys_node_grp);
_exports_lys_node_grp_class_0->Inherit(_exports_lys_node_grp_class);
_exports_lys_node_grp_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_grp_obj = _exports_lys_node_grp_class_0->GetFunction();
/* Class: lys_node_case (_exports_lys_node_case) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_case_class_0 = SWIGV8_CreateClassTemplate("lys_node_case");
_exports_lys_node_case_class_0->SetCallHandler(_wrap_new_lys_node_case);
_exports_lys_node_case_class_0->Inherit(_exports_lys_node_case_class);
_exports_lys_node_case_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_case_obj = _exports_lys_node_case_class_0->GetFunction();
/* Class: lys_node_rpc_inout (_exports_lys_node_rpc_inout) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_rpc_inout_class_0 = SWIGV8_CreateClassTemplate("lys_node_rpc_inout");
_exports_lys_node_rpc_inout_class_0->SetCallHandler(_wrap_new_lys_node_rpc_inout);
_exports_lys_node_rpc_inout_class_0->Inherit(_exports_lys_node_rpc_inout_class);
_exports_lys_node_rpc_inout_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_rpc_inout_obj = _exports_lys_node_rpc_inout_class_0->GetFunction();
/* Class: lys_node_notif (_exports_lys_node_notif) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_notif_class_0 = SWIGV8_CreateClassTemplate("lys_node_notif");
_exports_lys_node_notif_class_0->SetCallHandler(_wrap_new_lys_node_notif);
_exports_lys_node_notif_class_0->Inherit(_exports_lys_node_notif_class);
_exports_lys_node_notif_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_notif_obj = _exports_lys_node_notif_class_0->GetFunction();
/* Class: lys_node_rpc (_exports_lys_node_rpc) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_rpc_class_0 = SWIGV8_CreateClassTemplate("lys_node_rpc");
_exports_lys_node_rpc_class_0->SetCallHandler(_wrap_new_lys_node_rpc);
_exports_lys_node_rpc_class_0->Inherit(_exports_lys_node_rpc_class);
_exports_lys_node_rpc_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_rpc_obj = _exports_lys_node_rpc_class_0->GetFunction();
/* Class: lys_node_augment (_exports_lys_node_augment) */
v8::Handle<v8::FunctionTemplate> _exports_lys_node_augment_class_0 = SWIGV8_CreateClassTemplate("lys_node_augment");
_exports_lys_node_augment_class_0->SetCallHandler(_wrap_new_lys_node_augment);
_exports_lys_node_augment_class_0->Inherit(_exports_lys_node_augment_class);
_exports_lys_node_augment_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_node_augment_obj = _exports_lys_node_augment_class_0->GetFunction();
/* Class: lys_refine_mod_list (_exports_lys_refine_mod_list) */
v8::Handle<v8::FunctionTemplate> _exports_lys_refine_mod_list_class_0 = SWIGV8_CreateClassTemplate("lys_refine_mod_list");
_exports_lys_refine_mod_list_class_0->SetCallHandler(_wrap_new_lys_refine_mod_list);
_exports_lys_refine_mod_list_class_0->Inherit(_exports_lys_refine_mod_list_class);
_exports_lys_refine_mod_list_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_refine_mod_list_obj = _exports_lys_refine_mod_list_class_0->GetFunction();
/* Class: lys_refine_mod (_exports_lys_refine_mod) */
v8::Handle<v8::FunctionTemplate> _exports_lys_refine_mod_class_0 = SWIGV8_CreateClassTemplate("lys_refine_mod");
_exports_lys_refine_mod_class_0->SetCallHandler(_wrap_new_lys_refine_mod);
_exports_lys_refine_mod_class_0->Inherit(_exports_lys_refine_mod_class);
_exports_lys_refine_mod_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_refine_mod_obj = _exports_lys_refine_mod_class_0->GetFunction();
/* Class: lys_refine (_exports_lys_refine) */
v8::Handle<v8::FunctionTemplate> _exports_lys_refine_class_0 = SWIGV8_CreateClassTemplate("lys_refine");
_exports_lys_refine_class_0->SetCallHandler(_wrap_new_lys_refine);
_exports_lys_refine_class_0->Inherit(_exports_lys_refine_class);
_exports_lys_refine_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_refine_obj = _exports_lys_refine_class_0->GetFunction();
/* Class: lys_deviate (_exports_lys_deviate) */
v8::Handle<v8::FunctionTemplate> _exports_lys_deviate_class_0 = SWIGV8_CreateClassTemplate("lys_deviate");
_exports_lys_deviate_class_0->SetCallHandler(_wrap_new_lys_deviate);
_exports_lys_deviate_class_0->Inherit(_exports_lys_deviate_class);
_exports_lys_deviate_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_deviate_obj = _exports_lys_deviate_class_0->GetFunction();
/* Class: lys_deviation (_exports_lys_deviation) */
v8::Handle<v8::FunctionTemplate> _exports_lys_deviation_class_0 = SWIGV8_CreateClassTemplate("lys_deviation");
_exports_lys_deviation_class_0->SetCallHandler(_wrap_new_lys_deviation);
_exports_lys_deviation_class_0->Inherit(_exports_lys_deviation_class);
_exports_lys_deviation_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_deviation_obj = _exports_lys_deviation_class_0->GetFunction();
/* Class: lys_import (_exports_lys_import) */
v8::Handle<v8::FunctionTemplate> _exports_lys_import_class_0 = SWIGV8_CreateClassTemplate("lys_import");
_exports_lys_import_class_0->SetCallHandler(_wrap_new_lys_import);
_exports_lys_import_class_0->Inherit(_exports_lys_import_class);
_exports_lys_import_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_import_obj = _exports_lys_import_class_0->GetFunction();
/* Class: lys_include (_exports_lys_include) */
v8::Handle<v8::FunctionTemplate> _exports_lys_include_class_0 = SWIGV8_CreateClassTemplate("lys_include");
_exports_lys_include_class_0->SetCallHandler(_wrap_new_lys_include);
_exports_lys_include_class_0->Inherit(_exports_lys_include_class);
_exports_lys_include_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_include_obj = _exports_lys_include_class_0->GetFunction();
/* Class: lys_revision (_exports_lys_revision) */
v8::Handle<v8::FunctionTemplate> _exports_lys_revision_class_0 = SWIGV8_CreateClassTemplate("lys_revision");
_exports_lys_revision_class_0->SetCallHandler(_wrap_new_lys_revision);
_exports_lys_revision_class_0->Inherit(_exports_lys_revision_class);
_exports_lys_revision_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_revision_obj = _exports_lys_revision_class_0->GetFunction();
/* Class: lys_tpdf (_exports_lys_tpdf) */
v8::Handle<v8::FunctionTemplate> _exports_lys_tpdf_class_0 = SWIGV8_CreateClassTemplate("lys_tpdf");
_exports_lys_tpdf_class_0->SetCallHandler(_wrap_new_lys_tpdf);
_exports_lys_tpdf_class_0->Inherit(_exports_lys_tpdf_class);
_exports_lys_tpdf_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_tpdf_obj = _exports_lys_tpdf_class_0->GetFunction();
/* Class: lys_unique (_exports_lys_unique) */
v8::Handle<v8::FunctionTemplate> _exports_lys_unique_class_0 = SWIGV8_CreateClassTemplate("lys_unique");
_exports_lys_unique_class_0->SetCallHandler(_wrap_new_lys_unique);
_exports_lys_unique_class_0->Inherit(_exports_lys_unique_class);
_exports_lys_unique_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_unique_obj = _exports_lys_unique_class_0->GetFunction();
/* Class: lys_feature (_exports_lys_feature) */
v8::Handle<v8::FunctionTemplate> _exports_lys_feature_class_0 = SWIGV8_CreateClassTemplate("lys_feature");
_exports_lys_feature_class_0->SetCallHandler(_wrap_new_lys_feature);
_exports_lys_feature_class_0->Inherit(_exports_lys_feature_class);
_exports_lys_feature_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_feature_obj = _exports_lys_feature_class_0->GetFunction();
/* Class: lys_restr (_exports_lys_restr) */
v8::Handle<v8::FunctionTemplate> _exports_lys_restr_class_0 = SWIGV8_CreateClassTemplate("lys_restr");
_exports_lys_restr_class_0->SetCallHandler(_wrap_new_lys_restr);
_exports_lys_restr_class_0->Inherit(_exports_lys_restr_class);
_exports_lys_restr_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_restr_obj = _exports_lys_restr_class_0->GetFunction();
/* Class: lys_when (_exports_lys_when) */
v8::Handle<v8::FunctionTemplate> _exports_lys_when_class_0 = SWIGV8_CreateClassTemplate("lys_when");
_exports_lys_when_class_0->SetCallHandler(_wrap_new_lys_when);
_exports_lys_when_class_0->Inherit(_exports_lys_when_class);
_exports_lys_when_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_when_obj = _exports_lys_when_class_0->GetFunction();
/* Class: lys_ident (_exports_lys_ident) */
v8::Handle<v8::FunctionTemplate> _exports_lys_ident_class_0 = SWIGV8_CreateClassTemplate("lys_ident");
_exports_lys_ident_class_0->SetCallHandler(_wrap_new_lys_ident);
_exports_lys_ident_class_0->Inherit(_exports_lys_ident_class);
_exports_lys_ident_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lys_ident_obj = _exports_lys_ident_class_0->GetFunction();
/* Class: lyd_attr (_exports_lyd_attr) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_attr_class_0 = SWIGV8_CreateClassTemplate("lyd_attr");
_exports_lyd_attr_class_0->SetCallHandler(_wrap_new_lyd_attr);
_exports_lyd_attr_class_0->Inherit(_exports_lyd_attr_class);
_exports_lyd_attr_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_attr_obj = _exports_lyd_attr_class_0->GetFunction();
/* Class: lyd_val (_exports_lyd_val) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_val_class_0 = SWIGV8_CreateClassTemplate("lyd_val");
_exports_lyd_val_class_0->SetCallHandler(_wrap_new_lyd_val);
_exports_lyd_val_class_0->Inherit(_exports_lyd_val_class);
_exports_lyd_val_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_val_obj = _exports_lyd_val_class_0->GetFunction();
/* Class: lyd_node (_exports_lyd_node) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_class_0 = SWIGV8_CreateClassTemplate("lyd_node");
_exports_lyd_node_class_0->SetCallHandler(_wrap_new_lyd_node);
_exports_lyd_node_class_0->Inherit(_exports_lyd_node_class);
_exports_lyd_node_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_node_obj = _exports_lyd_node_class_0->GetFunction();
/* Class: lyd_node_leaf_list (_exports_lyd_node_leaf_list) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_leaf_list_class_0 = SWIGV8_CreateClassTemplate("lyd_node_leaf_list");
_exports_lyd_node_leaf_list_class_0->SetCallHandler(_wrap_new_lyd_node_leaf_list);
_exports_lyd_node_leaf_list_class_0->Inherit(_exports_lyd_node_leaf_list_class);
_exports_lyd_node_leaf_list_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_node_leaf_list_obj = _exports_lyd_node_leaf_list_class_0->GetFunction();
/* Class: lyd_node_anyxml_value (_exports_lyd_node_anyxml_value) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_anyxml_value_class_0 = SWIGV8_CreateClassTemplate("lyd_node_anyxml_value");
_exports_lyd_node_anyxml_value_class_0->SetCallHandler(_wrap_new_lyd_node_anyxml_value);
_exports_lyd_node_anyxml_value_class_0->Inherit(_exports_lyd_node_anyxml_value_class);
_exports_lyd_node_anyxml_value_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_node_anyxml_value_obj = _exports_lyd_node_anyxml_value_class_0->GetFunction();
/* Class: lyd_node_anyxml (_exports_lyd_node_anyxml) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_node_anyxml_class_0 = SWIGV8_CreateClassTemplate("lyd_node_anyxml");
_exports_lyd_node_anyxml_class_0->SetCallHandler(_wrap_new_lyd_node_anyxml);
_exports_lyd_node_anyxml_class_0->Inherit(_exports_lyd_node_anyxml_class);
_exports_lyd_node_anyxml_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_node_anyxml_obj = _exports_lyd_node_anyxml_class_0->GetFunction();
/* Class: lyd_difflist (_exports_lyd_difflist) */
v8::Handle<v8::FunctionTemplate> _exports_lyd_difflist_class_0 = SWIGV8_CreateClassTemplate("lyd_difflist");
_exports_lyd_difflist_class_0->SetCallHandler(_wrap_new_lyd_difflist);
_exports_lyd_difflist_class_0->Inherit(_exports_lyd_difflist_class);
_exports_lyd_difflist_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_lyd_difflist_obj = _exports_lyd_difflist_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_new", _wrap_ly_ctx_new);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_set_searchdir", _wrap_ly_ctx_set_searchdir);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_searchdir", _wrap_ly_ctx_get_searchdir);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_info", _wrap_ly_ctx_info);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_module_iter", _wrap_ly_ctx_get_module_iter);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_module", _wrap_ly_ctx_get_module);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_module_older", _wrap_ly_ctx_get_module_older);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_load_module", _wrap_ly_ctx_load_module);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_set_module_clb", _wrap_ly_ctx_set_module_clb);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_module_clb", _wrap_ly_ctx_get_module_clb);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_module_by_ns", _wrap_ly_ctx_get_module_by_ns);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_submodule", _wrap_ly_ctx_get_submodule);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_submodule2", _wrap_ly_ctx_get_submodule2);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_node", _wrap_ly_ctx_get_node);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_get_node2", _wrap_ly_ctx_get_node2);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_new", _wrap_ly_set_new);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_add", _wrap_ly_set_add);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_clean", _wrap_ly_set_clean);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_rm", _wrap_ly_set_rm);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_rm_index", _wrap_ly_set_rm_index);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_free", _wrap_ly_set_free);
SWIGV8_AddStaticFunction(exports_obj, "ly_verb", _wrap_ly_verb);
SWIGV8_AddStaticFunction(exports_obj, "ly_set_log_clb", _wrap_ly_set_log_clb);
SWIGV8_AddStaticFunction(exports_obj, "ly_get_log_clb", _wrap_ly_get_log_clb);
SWIGV8_AddStaticFunction(exports_obj, "ly_errno_location", _wrap_ly_errno_location);
SWIGV8_AddStaticFunction(exports_obj, "ly_vecode_location", _wrap_ly_vecode_location);
SWIGV8_AddStaticFunction(exports_obj, "ly_errmsg", _wrap_ly_errmsg);
SWIGV8_AddStaticFunction(exports_obj, "ly_errpath", _wrap_ly_errpath);
SWIGV8_AddStaticFunction(exports_obj, "ly_errapptag", _wrap_ly_errapptag);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_parse_mem", _wrap_lyxml_parse_mem);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_parse_path", _wrap_lyxml_parse_path);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_print_file", _wrap_lyxml_print_file);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_print_fd", _wrap_lyxml_print_fd);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_print_mem", _wrap_lyxml_print_mem);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_print_clb", _wrap_lyxml_print_clb);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_free", _wrap_lyxml_free);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_free_withsiblings", _wrap_lyxml_free_withsiblings);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_unlink", _wrap_lyxml_unlink);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_get_attr", _wrap_lyxml_get_attr);
SWIGV8_AddStaticFunction(exports_obj, "lyxml_get_ns", _wrap_lyxml_get_ns);
SWIGV8_AddStaticFunction(exports_obj, "lys_parse_mem", _wrap_lys_parse_mem);
SWIGV8_AddStaticFunction(exports_obj, "lys_parse_fd", _wrap_lys_parse_fd);
SWIGV8_AddStaticFunction(exports_obj, "lys_parse_path", _wrap_lys_parse_path);
SWIGV8_AddStaticFunction(exports_obj, "lys_features_list", _wrap_lys_features_list);
SWIGV8_AddStaticFunction(exports_obj, "lys_features_enable", _wrap_lys_features_enable);
SWIGV8_AddStaticFunction(exports_obj, "lys_features_disable", _wrap_lys_features_disable);
SWIGV8_AddStaticFunction(exports_obj, "lys_features_state", _wrap_lys_features_state);
SWIGV8_AddStaticFunction(exports_obj, "lys_is_disabled", _wrap_lys_is_disabled);
SWIGV8_AddStaticFunction(exports_obj, "lys_getnext", _wrap_lys_getnext);
SWIGV8_AddStaticFunction(exports_obj, "lys_parent", _wrap_lys_parent);
SWIGV8_AddStaticFunction(exports_obj, "lys_node_module", _wrap_lys_node_module);
SWIGV8_AddStaticFunction(exports_obj, "lys_main_module", _wrap_lys_main_module);
SWIGV8_AddStaticFunction(exports_obj, "lys_set_private", _wrap_lys_set_private);
SWIGV8_AddStaticFunction(exports_obj, "lys_print_mem", _wrap_lys_print_mem);
SWIGV8_AddStaticFunction(exports_obj, "lys_print_fd", _wrap_lys_print_fd);
SWIGV8_AddStaticFunction(exports_obj, "lys_print_file", _wrap_lys_print_file);
SWIGV8_AddStaticFunction(exports_obj, "lys_print_clb", _wrap_lys_print_clb);
SWIGV8_AddStaticFunction(exports_obj, "lyd_free_diff", _wrap_lyd_free_diff);
SWIGV8_AddStaticFunction(exports_obj, "lyd_diff", _wrap_lyd_diff);
SWIGV8_AddStaticFunction(exports_obj, "lyd_path", _wrap_lyd_path);
SWIGV8_AddStaticFunction(exports_obj, "lyd_parse_mem", _wrap_lyd_parse_mem);
SWIGV8_AddStaticFunction(exports_obj, "lyd_parse_fd", _wrap_lyd_parse_fd);
SWIGV8_AddStaticFunction(exports_obj, "lyd_parse_path", _wrap_lyd_parse_path);
SWIGV8_AddStaticFunction(exports_obj, "lyd_parse_xml", _wrap_lyd_parse_xml);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new", _wrap_lyd_new);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_leaf", _wrap_lyd_new_leaf);
SWIGV8_AddStaticFunction(exports_obj, "lyd_change_leaf", _wrap_lyd_change_leaf);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_anyxml_str", _wrap_lyd_new_anyxml_str);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_anyxml_xml", _wrap_lyd_new_anyxml_xml);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_output", _wrap_lyd_new_output);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_output_leaf", _wrap_lyd_new_output_leaf);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_output_anyxml_str", _wrap_lyd_new_output_anyxml_str);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_output_anyxml_xml", _wrap_lyd_new_output_anyxml_xml);
SWIGV8_AddStaticFunction(exports_obj, "lyd_new_path", _wrap_lyd_new_path);
SWIGV8_AddStaticFunction(exports_obj, "lyd_dup", _wrap_lyd_dup);
SWIGV8_AddStaticFunction(exports_obj, "lyd_merge", _wrap_lyd_merge);
SWIGV8_AddStaticFunction(exports_obj, "lyd_insert", _wrap_lyd_insert);
SWIGV8_AddStaticFunction(exports_obj, "lyd_insert_before", _wrap_lyd_insert_before);
SWIGV8_AddStaticFunction(exports_obj, "lyd_insert_after", _wrap_lyd_insert_after);
SWIGV8_AddStaticFunction(exports_obj, "lyd_schema_sort", _wrap_lyd_schema_sort);
SWIGV8_AddStaticFunction(exports_obj, "lyd_get_node", _wrap_lyd_get_node);
SWIGV8_AddStaticFunction(exports_obj, "lyd_get_node2", _wrap_lyd_get_node2);
SWIGV8_AddStaticFunction(exports_obj, "lyd_validate_leafref", _wrap_lyd_validate_leafref);
SWIGV8_AddStaticFunction(exports_obj, "lyd_validate", _wrap_lyd_validate);
SWIGV8_AddStaticFunction(exports_obj, "lyd_wd_add", _wrap_lyd_wd_add);
SWIGV8_AddStaticFunction(exports_obj, "lyd_wd_cleanup", _wrap_lyd_wd_cleanup);
SWIGV8_AddStaticFunction(exports_obj, "lyd_unlink", _wrap_lyd_unlink);
SWIGV8_AddStaticFunction(exports_obj, "lyd_free", _wrap_lyd_free);
SWIGV8_AddStaticFunction(exports_obj, "lyd_free_withsiblings", _wrap_lyd_free_withsiblings);
SWIGV8_AddStaticFunction(exports_obj, "lyd_insert_attr", _wrap_lyd_insert_attr);
SWIGV8_AddStaticFunction(exports_obj, "lyd_free_attr", _wrap_lyd_free_attr);
SWIGV8_AddStaticFunction(exports_obj, "lyd_node_module", _wrap_lyd_node_module);
SWIGV8_AddStaticFunction(exports_obj, "lyd_print_mem", _wrap_lyd_print_mem);
SWIGV8_AddStaticFunction(exports_obj, "lyd_print_fd", _wrap_lyd_print_fd);
SWIGV8_AddStaticFunction(exports_obj, "lyd_print_file", _wrap_lyd_print_file);
SWIGV8_AddStaticFunction(exports_obj, "lyd_print_clb", _wrap_lyd_print_clb);
SWIGV8_AddStaticFunction(exports_obj, "lydict_insert", _wrap_lydict_insert);
SWIGV8_AddStaticFunction(exports_obj, "lydict_insert_zc", _wrap_lydict_insert_zc);
SWIGV8_AddStaticFunction(exports_obj, "lydict_remove", _wrap_lydict_remove);
SWIGV8_AddStaticFunction(exports_obj, "ly_ctx_destroy", _wrap___wrap_ly_ctx_destroy);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("ly_set_set"), _exports_ly_set_set_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ly_set"), _exports_ly_set_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyxml_ns"), _exports_lyxml_ns_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyxml_attr"), _exports_lyxml_attr_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyxml_elem"), _exports_lyxml_elem_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_module"), _exports_lys_module_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_submodule"), _exports_lys_submodule_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_binary"), _exports_lys_type_info_binary_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_bit"), _exports_lys_type_bit_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_bits"), _exports_lys_type_info_bits_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_dec64"), _exports_lys_type_info_dec64_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_enum"), _exports_lys_type_enum_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_enums"), _exports_lys_type_info_enums_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_ident"), _exports_lys_type_info_ident_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_inst"), _exports_lys_type_info_inst_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_num"), _exports_lys_type_info_num_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_lref"), _exports_lys_type_info_lref_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_str"), _exports_lys_type_info_str_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info_union"), _exports_lys_type_info_union_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type_info"), _exports_lys_type_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_type"), _exports_lys_type_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node"), _exports_lys_node_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_container"), _exports_lys_node_container_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_choice"), _exports_lys_node_choice_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_leaf"), _exports_lys_node_leaf_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_leaflist"), _exports_lys_node_leaflist_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_list"), _exports_lys_node_list_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_anyxml"), _exports_lys_node_anyxml_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_uses"), _exports_lys_node_uses_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_grp"), _exports_lys_node_grp_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_case"), _exports_lys_node_case_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_rpc_inout"), _exports_lys_node_rpc_inout_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_notif"), _exports_lys_node_notif_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_rpc"), _exports_lys_node_rpc_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_node_augment"), _exports_lys_node_augment_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_refine_mod_list"), _exports_lys_refine_mod_list_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_refine_mod"), _exports_lys_refine_mod_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_refine"), _exports_lys_refine_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_deviate"), _exports_lys_deviate_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_deviation"), _exports_lys_deviation_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_import"), _exports_lys_import_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_include"), _exports_lys_include_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_revision"), _exports_lys_revision_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_tpdf"), _exports_lys_tpdf_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_unique"), _exports_lys_unique_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_feature"), _exports_lys_feature_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_restr"), _exports_lys_restr_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_when"), _exports_lys_when_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lys_ident"), _exports_lys_ident_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_attr"), _exports_lyd_attr_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_val"), _exports_lyd_val_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_node"), _exports_lyd_node_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_node_leaf_list"), _exports_lyd_node_leaf_list_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_node_anyxml_value"), _exports_lyd_node_anyxml_value_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_node_anyxml"), _exports_lyd_node_anyxml_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("lyd_difflist"), _exports_lyd_difflist_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(libyang_javascript, libyang_javascript_initialize)
#endif
